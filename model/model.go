//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package model provides an interface for working with high-level objects (models) in PDF files, including
// reading and writing documents.
//
// The document structure of a PDF is constructed of a hierarchy of data models, representing a tree
// of information starting from the Document catalog (Figure 5 p. 80).
// It is based on the core package which handles core functionality such as file i/o, parsing and
// handling of primitive PDF objects (core.PdfObject).
//
// As an example of the interface, the following snippet can read the PDF and output the number of pages:
//
//	f, err := os.Open(inputPath)
//		if err != nil {
//		return nil, err
//	}
//	defer f.Close()
// 	pdfReader, err := unipdf.NewPdfReader(f)
//	if err != nil {
//		fmt.Printf("Failed to read PDF file: %v\n", err)
//		os.Exit(1)
//	}
//	numPages, err := pdfReader.GetNumPages()
//	if err != nil {
//		fmt.Printf("Failed to get number of pages: %v\n", err)
//		os.Exit(1)
//	}
//	fmt.Printf("The PDF file has %d pages\n", numPages)
//
// For more examples, see the unidoc-examples repository on GitHub: https://github.com/unidoc/unidoc-examples
package model ;import (_ee "bufio";_cdc "bytes";_afb "crypto/md5";_ccb "crypto/rand";_cc "crypto/sha1";_d "crypto/x509";_c "encoding/binary";_fa "encoding/hex";_eff "errors";_af "fmt";_bcg "github.com/unidoc/pkcs7";_bc "github.com/unidoc/unipdf/v3/common";
_bf "github.com/unidoc/unipdf/v3/core";_fd "github.com/unidoc/unipdf/v3/core/security";_ba "github.com/unidoc/unipdf/v3/core/security/crypt";_cf "github.com/unidoc/unipdf/v3/internal/cmap";_ff "github.com/unidoc/unipdf/v3/internal/imageutil";_bad "github.com/unidoc/unipdf/v3/internal/license";
_de "github.com/unidoc/unipdf/v3/internal/sampling";_faf "github.com/unidoc/unipdf/v3/internal/textencoding";_bca "github.com/unidoc/unipdf/v3/internal/timeutils";_aa "github.com/unidoc/unipdf/v3/internal/transform";_cb "github.com/unidoc/unipdf/v3/model/internal/docutil";
_eb "github.com/unidoc/unipdf/v3/model/internal/fonts";_bcd "github.com/unidoc/unipdf/v3/model/mdp";_fag "github.com/unidoc/unipdf/v3/model/sigutil";_ga "github.com/unidoc/unipdf/v3/ps";_efc "github.com/unidoc/unitype";_ead "golang.org/x/xerrors";_e "hash";
_b "image";_ea "image/color";_ "image/gif";_ "image/png";_ag "io";_fe "io/ioutil";_fg "math";_ad "math/rand";_db "os";_ca "regexp";_ge "sort";_ef "strconv";_gf "strings";_f "sync";_g "time";_eag "unicode";_gb "unicode/utf8";);

// ColorAt returns the color of the image pixel specified by the x and y coordinates.
func (_ebdcb *Image )ColorAt (x ,y int )(_ea .Color ,error ){_dcfab :=_ff .BytesPerLine (int (_ebdcb .Width ),int (_ebdcb .BitsPerComponent ),_ebdcb .ColorComponents );switch _ebdcb .ColorComponents {case 1:return _ff .ColorAtGrayscale (x ,y ,int (_ebdcb .BitsPerComponent ),_dcfab ,_ebdcb .Data ,_ebdcb ._dbcfb );
case 3:return _ff .ColorAtNRGBA (x ,y ,int (_ebdcb .Width ),_dcfab ,int (_ebdcb .BitsPerComponent ),_ebdcb .Data ,_ebdcb ._gfegf ,_ebdcb ._dbcfb );case 4:return _ff .ColorAtCMYK (x ,y ,int (_ebdcb .Width ),_ebdcb .Data ,_ebdcb ._dbcfb );};_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 i\u006da\u0067\u0065\u002e\u0020\u0025\u0064\u0020\u0063\u006f\u006d\u0070\u006fn\u0065\u006e\u0074\u0073\u002c\u0020\u0025\u0064\u0020\u0062\u0069\u0074\u0073\u0020\u0070\u0065\u0072 \u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_ebdcb .ColorComponents ,_ebdcb .BitsPerComponent );
return nil ,_eff .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006d\u0061g\u0065 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");};func _cegfa (_dgcda *fontCommon )*pdfFontType0 {return &pdfFontType0 {fontCommon :*_dgcda }};
type pdfFontType3 struct{fontCommon ;_ggeeg *_bf .PdfIndirectObject ;

// These fields are specific to Type 3 fonts.
CharProcs _bf .PdfObject ;Encoding _bf .PdfObject ;FontBBox _bf .PdfObject ;FontMatrix _bf .PdfObject ;FirstChar _bf .PdfObject ;LastChar _bf .PdfObject ;Widths _bf .PdfObject ;Resources _bf .PdfObject ;_cbgba map[_faf .CharCode ]float64 ;_adgcd _faf .TextEncoder ;
};

// SignatureValidationResult defines the response from the signature validation handler.
type SignatureValidationResult struct{

// List of errors when validating the signature.
Errors []string ;IsSigned bool ;IsVerified bool ;IsTrusted bool ;Fields []*PdfField ;Name string ;Date PdfDate ;Reason string ;Location string ;ContactInfo string ;DiffResults *_bcd .DiffResults ;

// GeneralizedTime is the time at which the time-stamp token has been created by the TSA (RFC 3161).
GeneralizedTime _g .Time ;};func (_cfedf *PdfWriter )writeOutlines ()error {if _cfedf ._gdbae ==nil {return nil ;};_bc .Log .Trace ("\u004f\u0075t\u006c\u0069\u006ee\u0054\u0072\u0065\u0065\u003a\u0020\u0025\u002b\u0076",_cfedf ._gdbae );_fgged :=_cfedf ._gdbae .ToPdfObject ();
_bc .Log .Trace ("\u004fu\u0074\u006c\u0069\u006e\u0065\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0025\u0054\u002c\u0020\u0070\u003a\u0025\u0070\u0029",_fgged ,_fgged ,_fgged );_cfedf ._cecba .Set ("\u004f\u0075\u0074\u006c\u0069\u006e\u0065\u0073",_fgged );
_edabc :=_cfedf .addObjects (_fgged );if _edabc !=nil {return _edabc ;};return nil ;};

// ImageToRGB converts image in CalGray color space to RGB (A, B, C -> X, Y, Z).
func (_debf *PdfColorspaceCalGray )ImageToRGB (img Image )(Image ,error ){_ggc :=_de .NewReader (img .getBase ());_ggad :=_ff .NewImageBase (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),3,nil ,nil ,nil );_abbb :=_de .NewWriter (_ggad );
_dgddg :=_fg .Pow (2,float64 (img .BitsPerComponent ))-1;_edeb :=make ([]uint32 ,3);var (_gdee uint32 ;ANorm ,X ,Y ,Z ,_cgadb ,_dfgad ,_cfdde float64 ;_bgea error ;);for {_gdee ,_bgea =_ggc .ReadSample ();if _bgea ==_ag .EOF {break ;}else if _bgea !=nil {return img ,_bgea ;
};ANorm =float64 (_gdee )/_dgddg ;X =_debf .WhitePoint [0]*_fg .Pow (ANorm ,_debf .Gamma );Y =_debf .WhitePoint [1]*_fg .Pow (ANorm ,_debf .Gamma );Z =_debf .WhitePoint [2]*_fg .Pow (ANorm ,_debf .Gamma );_cgadb =3.240479*X +-1.537150*Y +-0.498535*Z ;_dfgad =-0.969256*X +1.875992*Y +0.041556*Z ;
_cfdde =0.055648*X +-0.204043*Y +1.057311*Z ;_cgadb =_fg .Min (_fg .Max (_cgadb ,0),1.0);_dfgad =_fg .Min (_fg .Max (_dfgad ,0),1.0);_cfdde =_fg .Min (_fg .Max (_cfdde ,0),1.0);_edeb [0]=uint32 (_cgadb *_dgddg );_edeb [1]=uint32 (_dfgad *_dgddg );_edeb [2]=uint32 (_cfdde *_dgddg );
if _bgea =_abbb .WriteSamples (_edeb );_bgea !=nil {return img ,_bgea ;};};return _cgfba (&_ggad ),nil ;};

// Encoder returns the font's text encoder.
func (_bedcb pdfFontType3 )Encoder ()_faf .TextEncoder {return _bedcb ._adgcd };

// ImageToRGB converts ICCBased colorspace image to RGB and returns the result.
func (_ccgf *PdfColorspaceICCBased )ImageToRGB (img Image )(Image ,error ){if _ccgf .Alternate ==nil {_bc .Log .Debug ("I\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061lt\u0065\u0072\u006ea\u0074i\u0076\u0065");
if _ccgf .N ==1{_bc .Log .Debug ("\u0049\u0043\u0043\u0020\u0042a\u0073\u0065\u0064\u0020\u0063o\u006co\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061\u006c\u0074\u0065r\u006e\u0061\u0074\u0069\u0076\u0065\u0020\u002d\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061y\u0020\u0028\u004e\u003d\u0031\u0029");
_bdfa :=NewPdfColorspaceDeviceGray ();return _bdfa .ImageToRGB (img );}else if _ccgf .N ==3{_bc .Log .Debug ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0061\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0069\u0076\u0065\u0020\u002d\u0020\u0075\u0073\u0069\u006eg\u0020\u0044\u0065\u0076\u0069\u0063e\u0052\u0047B\u0020\u0028N\u003d3\u0029");
return img ,nil ;}else if _ccgf .N ==4{_bc .Log .Debug ("\u0049\u0043\u0043\u0020\u0042a\u0073\u0065\u0064\u0020\u0063o\u006co\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061\u006c\u0074\u0065r\u006e\u0061\u0074\u0069\u0076\u0065\u0020\u002d\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059K\u0020\u0028\u004e\u003d\u0034\u0029");
_fbcf :=NewPdfColorspaceDeviceCMYK ();return _fbcf .ImageToRGB (img );}else {return img ,_eff .New ("I\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061lt\u0065\u0072\u006ea\u0074i\u0076\u0065");
};};_bc .Log .Trace ("\u0049\u0043\u0043 \u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006c\u0074\u0065\u0072\u006e\u0061t\u0069\u0076\u0065\u003a\u0020\u0025\u0023\u0076",_ccgf );
_cfaa ,_ddabc :=_ccgf .Alternate .ImageToRGB (img );_bc .Log .Trace ("I\u0043C\u0020\u0049\u006e\u0070\u0075\u0074\u0020\u0069m\u0061\u0067\u0065\u003a %\u002b\u0076",img );_bc .Log .Trace ("I\u0043\u0043\u0020\u004fut\u0070u\u0074\u0020\u0069\u006d\u0061g\u0065\u003a\u0020\u0025\u002b\u0076",_cfaa );
return _cfaa ,_ddabc ;};func (_bcadf *PdfWriter )updateObjectNumbers (){_dgbbd :=_bcadf .ObjNumOffset ;_aagca :=0;for _ ,_dedee :=range _bcadf ._agfac {_bgade :=int64 (_aagca +1+_dgbbd );_ffffb :=true ;if _bcadf ._dgbga {if _cedb ,_beggc :=_bcadf ._bbcbd [_dedee ];
_beggc {_bgade =_cedb ;_ffffb =false ;};};switch _cdfec :=_dedee .(type ){case *_bf .PdfIndirectObject :_cdfec .ObjectNumber =_bgade ;_cdfec .GenerationNumber =0;case *_bf .PdfObjectStream :_cdfec .ObjectNumber =_bgade ;_cdfec .GenerationNumber =0;case *_bf .PdfObjectStreams :_cdfec .ObjectNumber =_bgade ;
_cdfec .GenerationNumber =0;default:_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0074\u0079\u0070\u0065\u0020%\u0054\u0020\u002d\u0020\u0073\u006b\u0069p\u0070\u0069\u006e\u0067",_cdfec );continue ;
};if _ffffb {_aagca ++;};};_gdfbc :=func (_geac _bf .PdfObject )int64 {switch _ccbba :=_geac .(type ){case *_bf .PdfIndirectObject :return _ccbba .ObjectNumber ;case *_bf .PdfObjectStream :return _ccbba .ObjectNumber ;case *_bf .PdfObjectStreams :return _ccbba .ObjectNumber ;
};return 0;};_ge .SliceStable (_bcadf ._agfac ,func (_dcaac ,_ffada int )bool {return _gdfbc (_bcadf ._agfac [_dcaac ])< _gdfbc (_bcadf ._agfac [_ffada ])});};

// GetContainingPdfObject implements interface PdfModel.
func (_dg *PdfAction )GetContainingPdfObject ()_bf .PdfObject {return _dg ._fda };

// PdfColorspaceDeviceRGB represents an RGB colorspace.
type PdfColorspaceDeviceRGB struct{};

// GetPdfInfo returns the PDF info dictionary.
func (_fggaf *PdfReader )GetPdfInfo ()(*PdfInfo ,error ){_bdeee ,_aaadb :=_fggaf .GetTrailer ();if _aaadb !=nil {return nil ,_aaadb ;};var _cgce *_bf .PdfObjectDictionary ;_efdg :=_bdeee .Get ("\u0049\u006e\u0066\u006f");switch _gdggf :=_efdg .(type ){case *_bf .PdfObjectReference :_aaddf :=_gdggf ;
_efdg ,_aaadb =_fggaf .GetIndirectObjectByNumber (int (_aaddf .ObjectNumber ));_efdg =_bf .TraceToDirectObject (_efdg );if _aaadb !=nil {return nil ,_aaadb ;};_cgce ,_ =_efdg .(*_bf .PdfObjectDictionary );case *_bf .PdfObjectDictionary :_cgce =_gdggf ;
};if _cgce ==nil {return nil ,_eff .New ("I\u006e\u0066\u006f\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006eo\u0074\u0020\u0070r\u0065s\u0065\u006e\u0074");};_gcegf ,_aaadb :=NewPdfInfoFromObject (_cgce );if _aaadb !=nil {return nil ,_aaadb ;
};return _gcegf ,nil ;};func (_aabe *PdfColorspaceSpecialIndexed )String ()string {return "\u0049n\u0064\u0065\u0078\u0065\u0064";};func (_cdac SignatureValidationResult )String ()string {var _ccbfa _cdc .Buffer ;_ccbfa .WriteString (_af .Sprintf ("\u004ea\u006d\u0065\u003a\u0020\u0025\u0073\n",_cdac .Name ));
if _cdac .Date ._ddgda > 0{_ccbfa .WriteString (_af .Sprintf ("\u0044a\u0074\u0065\u003a\u0020\u0025\u0073\n",_cdac .Date .ToGoTime ().String ()));}else {_ccbfa .WriteString ("\u0044\u0061\u0074\u0065 n\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u000a");
};if len (_cdac .Reason )> 0{_ccbfa .WriteString (_af .Sprintf ("R\u0065\u0061\u0073\u006f\u006e\u003a\u0020\u0025\u0073\u000a",_cdac .Reason ));}else {_ccbfa .WriteString ("N\u006f \u0072\u0065\u0061\u0073\u006f\u006e\u0020\u0073p\u0065\u0063\u0069\u0066ie\u0064\u000a");
};if len (_cdac .Location )> 0{_ccbfa .WriteString (_af .Sprintf ("\u004c\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0073\u000a",_cdac .Location ));}else {_ccbfa .WriteString ("\u004c\u006f\u0063at\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u000a");
};if len (_cdac .ContactInfo )> 0{_ccbfa .WriteString (_af .Sprintf ("\u0043\u006f\u006e\u0074\u0061\u0063\u0074\u0020\u0049\u006e\u0066\u006f:\u0020\u0025\u0073\u000a",_cdac .ContactInfo ));}else {_ccbfa .WriteString ("C\u006f\u006e\u0074\u0061\u0063\u0074 \u0069\u006e\u0066\u006f\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063i\u0066i\u0065\u0064\u000a");
};_ccbfa .WriteString (_af .Sprintf ("F\u0069\u0065\u006c\u0064\u0073\u003a\u0020\u0025\u0064\u000a",len (_cdac .Fields )));if _cdac .IsSigned {_ccbfa .WriteString ("S\u0069\u0067\u006e\u0065\u0064\u003a \u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020i\u0073\u0020\u0073i\u0067n\u0065\u0064\u000a");
}else {_ccbfa .WriteString ("\u0053\u0069\u0067\u006eed\u003a\u0020\u004e\u006f\u0074\u0020\u0073\u0069\u0067\u006e\u0065\u0064\u000a");};if _cdac .IsVerified {_ccbfa .WriteString ("\u0053\u0069\u0067n\u0061\u0074\u0075\u0072e\u0020\u0076\u0061\u006c\u0069\u0064\u0061t\u0069\u006f\u006e\u003a\u0020\u0049\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u000a");
}else {_ccbfa .WriteString ("\u0053\u0069\u0067\u006e\u0061\u0074u\u0072\u0065\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e:\u0020\u0049\u0073\u0020\u0069\u006e\u0076a\u006c\u0069\u0064\u000a");};if _cdac .IsTrusted {_ccbfa .WriteString ("\u0054\u0072\u0075\u0073\u0074\u0065\u0064\u003a\u0020\u0043\u0065\u0072\u0074\u0069\u0066i\u0063a\u0074\u0065\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0073\u0074\u0065\u0064\u000a");
}else {_ccbfa .WriteString ("\u0054\u0072\u0075s\u0074\u0065\u0064\u003a \u0055\u006e\u0074\u0072\u0075\u0073\u0074e\u0064\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063\u0061\u0074\u0065\u000a");};if !_cdac .GeneralizedTime .IsZero (){_ccbfa .WriteString (_af .Sprintf ("G\u0065n\u0065\u0072\u0061\u006c\u0069\u007a\u0065\u0064T\u0069\u006d\u0065\u003a %\u0073\u000a",_cdac .GeneralizedTime .String ()));
};if _cdac .DiffResults !=nil {_ccbfa .WriteString (_af .Sprintf ("\u0064\u0069\u0066\u0066 i\u0073\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064\u003a\u0020\u0025v\u000a",_cdac .DiffResults .IsPermitted ()));if len (_cdac .DiffResults .Warnings )> 0{_ccbfa .WriteString ("\u004d\u0044\u0050\u0020\u0077\u0061\u0072\u006e\u0069n\u0067\u0073\u003a\u000a");
for _ ,_cddfe :=range _cdac .DiffResults .Warnings {_ccbfa .WriteString (_af .Sprintf ("\u0009\u0025\u0073\u000a",_cddfe ));};};if len (_cdac .DiffResults .Errors )> 0{_ccbfa .WriteString ("\u004d\u0044\u0050 \u0065\u0072\u0072\u006f\u0072\u0073\u003a\u000a");
for _ ,_caeac :=range _cdac .DiffResults .Errors {_ccbfa .WriteString (_af .Sprintf ("\u0009\u0025\u0073\u000a",_caeac ));};};};return _ccbfa .String ();};

// SetShadingByName sets a shading resource specified by keyName.
func (_ffge *PdfPageResources )SetShadingByName (keyName _bf .PdfObjectName ,shadingObj _bf .PdfObject )error {if _ffge .Shading ==nil {_ffge .Shading =_bf .MakeDict ();};_dgade ,_cgaf :=_ffge .Shading .(*_bf .PdfObjectDictionary );if !_cgaf {return _bf .ErrTypeError ;
};_dgade .Set (keyName ,shadingObj );return nil ;};

// NewOutlineBookmark returns an initialized PdfOutlineItem for a given bookmark title and page.
func NewOutlineBookmark (title string ,page *_bf .PdfIndirectObject )*PdfOutlineItem {_abbcf :=PdfOutlineItem {};_abbcf ._bacb =&_abbcf ;_abbcf .Title =_bf .MakeString (title );_edaag :=_bf .MakeArray ();_edaag .Append (page );_edaag .Append (_bf .MakeName ("\u0046\u0069\u0074"));
_abbcf .Dest =_edaag ;return &_abbcf ;};

// Mask returns the uin32 bitmask for the specific flag.
func (_agfb FieldFlag )Mask ()uint32 {return uint32 (_agfb )};

// PdfAnnotationInk represents Ink annotations.
// (Section 12.5.6.13).
type PdfAnnotationInk struct{*PdfAnnotation ;*PdfAnnotationMarkup ;InkList _bf .PdfObject ;BS _bf .PdfObject ;};var _cddga =false ;

// NewStandard14FontWithEncoding returns the standard 14 font named `basefont` as a *PdfFont and
// a TextEncoder that encodes all the runes in `alphabet`, or an error if this is not possible.
// An error can occur if `basefont` is not one the standard 14 font names.
func NewStandard14FontWithEncoding (basefont StdFontName ,alphabet map[rune ]int )(*PdfFont ,_faf .SimpleEncoder ,error ){_aeee ,_cgcf :=_cbabg (basefont );if _cgcf !=nil {return nil ,nil ,_cgcf ;};_fccab ,_bgbb :=_aeee .Encoder ().(_faf .SimpleEncoder );
if !_bgbb {return nil ,nil ,_af .Errorf ("\u006f\u006e\u006c\u0079\u0020s\u0069\u006d\u0070\u006c\u0065\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006eg\u0020\u0069\u0073\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u002c\u0020\u0067\u006f\u0074\u0020\u0025\u0054",_aeee .Encoder ());
};_fgdba :=make (map[rune ]_faf .GlyphName );for _cbceb :=range alphabet {if _ ,_cegf :=_fccab .RuneToCharcode (_cbceb );!_cegf {_ ,_afbd :=_aeee ._bdcde .Read (_cbceb );if !_afbd {_bc .Log .Trace ("r\u0075\u006e\u0065\u0020\u0025\u0023x\u003d\u0025\u0071\u0020\u006e\u006f\u0074\u0020\u0069n\u0020\u0074\u0068e\u0020f\u006f\u006e\u0074",_cbceb ,_cbceb );
continue ;};_fgdbf ,_afbd :=_faf .RuneToGlyph (_cbceb );if !_afbd {_bc .Log .Debug ("\u006eo\u0020\u0067\u006c\u0079\u0070\u0068\u0020\u0066\u006f\u0072\u0020r\u0075\u006e\u0065\u0020\u0025\u0023\u0078\u003d\u0025\u0071",_cbceb ,_cbceb );continue ;};if len (_fgdba )>=255{return nil ,nil ,_eff .New ("\u0074\u006f\u006f\u0020\u006d\u0061\u006e\u0079\u0020\u0063\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020f\u006f\u0072\u0020\u0073\u0069\u006d\u0070\u006c\u0065\u0020\u0065\u006e\u0063o\u0064\u0069\u006e\u0067");
};_fgdba [_cbceb ]=_fgdbf ;};};var (_gbda []_faf .CharCode ;_dfde []_faf .CharCode ;);for _ddfg :=_faf .CharCode (1);_ddfg <=0xff;_ddfg ++{_egacg ,_bfedg :=_fccab .CharcodeToRune (_ddfg );if !_bfedg {_gbda =append (_gbda ,_ddfg );continue ;};if _ ,_bfedg =alphabet [_egacg ];
!_bfedg {_dfde =append (_dfde ,_ddfg );};};_cdbbd :=append (_gbda ,_dfde ...);if len (_cdbbd )< len (_fgdba ){return nil ,nil ,_af .Errorf ("n\u0065\u0065\u0064\u0020\u0074\u006f\u0020\u0065\u006ec\u006f\u0064\u0065\u0020\u0025\u0064\u0020ru\u006e\u0065\u0073\u002c \u0062\u0075\u0074\u0020\u0068\u0061\u0076\u0065\u0020on\u006c\u0079 \u0025\u0064\u0020\u0073\u006c\u006f\u0074\u0073",len (_fgdba ),len (_cdbbd ));
};_babg :=make ([]rune ,0,len (_fgdba ));for _abdf :=range _fgdba {_babg =append (_babg ,_abdf );};_ge .Slice (_babg ,func (_dbdge ,_egbc int )bool {return _babg [_dbdge ]< _babg [_egbc ]});_gegde :=make (map[_faf .CharCode ]_faf .GlyphName ,len (_babg ));
for _ ,_gdbe :=range _babg {_bfdb :=_cdbbd [0];_cdbbd =_cdbbd [1:];_gegde [_bfdb ]=_fgdba [_gdbe ];};_fccab =_faf .ApplyDifferences (_fccab ,_gegde );_aeee .SetEncoder (_fccab );return &PdfFont {_cacce :&_aeee },_fccab ,nil ;};

// NewPdfAnnotationRedact returns a new redact annotation.
func NewPdfAnnotationRedact ()*PdfAnnotationRedact {_agdc :=NewPdfAnnotation ();_cbd :=&PdfAnnotationRedact {};_cbd .PdfAnnotation =_agdc ;_cbd .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_agdc .SetContext (_cbd );return _cbd ;};

// SetLocation sets the `Location` field of the signature.
func (_dbgefa *PdfSignature )SetLocation (location string ){_dbgefa .Location =_bf .MakeString (location );};

// PdfFieldButton represents a button field which includes push buttons, checkboxes, and radio buttons.
type PdfFieldButton struct{*PdfField ;Opt *_bf .PdfObjectArray ;_bebf *Image ;};

// Evaluate runs the function. Input is [x1 x2 x3].
func (_ccfg *PdfFunctionType4 )Evaluate (xVec []float64 )([]float64 ,error ){if _ccfg ._beadef ==nil {_ccfg ._beadef =_ga .NewPSExecutor (_ccfg .Program );};var _fggdd []_ga .PSObject ;for _ ,_dffb :=range xVec {_fggdd =append (_fggdd ,_ga .MakeReal (_dffb ));
};_dagdc ,_bbbf :=_ccfg ._beadef .Execute (_fggdd );if _bbbf !=nil {return nil ,_bbbf ;};_aecg ,_bbbf :=_ga .PSObjectArrayToFloat64Array (_dagdc );if _bbbf !=nil {return nil ,_bbbf ;};return _aecg ,nil ;};

// CharcodesToStrings returns the unicode strings corresponding to `charcodes`.
// The int returns are the number of strings and the number of unconvereted codes.
// NOTE: The number of strings returned is equal to the number of charcodes
func (_ggfc *PdfFont )CharcodesToStrings (charcodes []_faf .CharCode )([]string ,int ,int ){_agga :=_ggfc .baseFields ();_ebecf :=make ([]string ,0,len (charcodes ));_cbcefa :=0;_dadf :=_ggfc .Encoder ();_fbfdc :=_agga ._ggcb !=nil &&_ggfc .IsSimple ()&&_ggfc .Subtype ()=="\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065"&&!_gf .Contains (_agga ._ggcb .Name (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-");
if !_fbfdc &&_dadf !=nil {switch _eabae :=_dadf .(type ){case _faf .SimpleEncoder :_cbdf :=_eabae .BaseName ();if _ ,_eeac :=_adccb [_cbdf ];_eeac {for _ ,_cbdaa :=range charcodes {if _ebaff ,_dadb :=_dadf .CharcodeToRune (_cbdaa );_dadb {_ebecf =append (_ebecf ,string (_ebaff ));
}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0072u\u006e\u0065\u002e\u0020\u0063\u006f\u0064\u0065=\u0030x\u0025\u0030\u0034\u0078\u0020\u0063\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0073\u003d\u005b\u0025\u00200\u0034\u0078\u005d\u0020\u0043\u0049\u0044\u003d\u0025\u0074\u000a"+"\t\u0066\u006f\u006e\u0074=%\u0073\n\u0009\u0065\u006e\u0063\u006fd\u0069\u006e\u0067\u003d\u0025\u0073",_cbdaa ,charcodes ,_agga .isCIDFont (),_ggfc ,_dadf );
_cbcefa ++;_ebecf =append (_ebecf ,_cf .MissingCodeString );};};return _ebecf ,len (_ebecf ),_cbcefa ;};};};for _ ,_cceaa :=range charcodes {if _agga ._ggcb !=nil {if _fadfe ,_ebbba :=_agga ._ggcb .CharcodeToUnicode (_cf .CharCode (_cceaa ));_ebbba {_ebecf =append (_ebecf ,_fadfe );
continue ;};};if _dadf !=nil {if _fgbd ,_abcb :=_dadf .CharcodeToRune (_cceaa );_abcb {_ebecf =append (_ebecf ,string (_fgbd ));continue ;};};_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0072u\u006e\u0065\u002e\u0020\u0063\u006f\u0064\u0065=\u0030x\u0025\u0030\u0034\u0078\u0020\u0063\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0073\u003d\u005b\u0025\u00200\u0034\u0078\u005d\u0020\u0043\u0049\u0044\u003d\u0025\u0074\u000a"+"\t\u0066\u006f\u006e\u0074=%\u0073\n\u0009\u0065\u006e\u0063\u006fd\u0069\u006e\u0067\u003d\u0025\u0073",_cceaa ,charcodes ,_agga .isCIDFont (),_ggfc ,_dadf );
_cbcefa ++;_ebecf =append (_ebecf ,_cf .MissingCodeString );};if _cbcefa !=0{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0043\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0020\u0074\u006f\u0020u\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u0055\u0073\u0069\u006e\u0067\u0020i\u006ep\u0075\u0074\u002e\u000a"+"\u0009\u006e\u0075\u006d\u0043\u0068\u0061\u0072\u0073\u003d\u0025d\u0020\u006e\u0075\u006d\u004d\u0069\u0073\u0073\u0065\u0073=\u0025\u0064\u000a"+"\u0009\u0066\u006f\u006e\u0074\u003d\u0025\u0073",len (charcodes ),_cbcefa ,_ggfc );
};return _ebecf ,len (_ebecf ),_cbcefa ;};

// GetPrimitiveFromModel returns the primitive object corresponding to the input `model`.
func (_ecdbf *modelManager )GetPrimitiveFromModel (model PdfModel )_bf .PdfObject {_bedec ,_ebcce :=_ecdbf ._bdcfa [model ];if !_ebcce {return nil ;};return _bedec ;};

// GetCatalogMetadata gets the catalog defined XMP Metadata.
func (_ggdc *PdfReader )GetCatalogMetadata ()(_bf .PdfObject ,bool ){if _ggdc ._dbaea ==nil {return nil ,false ;};_bacf :=_ggdc ._dbaea .Get ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061");return _bacf ,_bacf !=nil ;};

// ToPdfObject implements interface PdfModel.
func (_fc *PdfActionNamed )ToPdfObject ()_bf .PdfObject {_fc .PdfAction .ToPdfObject ();_dbb :=_fc ._fda ;_gc :=_dbb .PdfObject .(*_bf .PdfObjectDictionary );_gc .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeNamed )));_gc .SetIfNotNil ("\u004e",_fc .N );
return _dbb ;};

// Write writes out the PDF.
func (_aabf *PdfWriter )Write (writer _ag .Writer )error {_bc .Log .Trace ("\u0057r\u0069\u0074\u0065\u0028\u0029");_abeae :=_aabf .checkLicense ();if _abeae !=nil {return _abeae ;};if _abeae =_aabf .writeOutlines ();_abeae !=nil {return _abeae ;};if _abeae =_aabf .writeAcroFormFields ();
_abeae !=nil {return _abeae ;};_aabf .checkPendingObjects ();if _abeae =_aabf .writeOutputIntents ();_abeae !=nil {return _abeae ;};_aabf .setCatalogVersion ();_aabf .copyObjects ();if _abeae =_aabf .optimize ();_abeae !=nil {return _abeae ;};if _abeae =_aabf .optimizeDocument ();
_abeae !=nil {return _abeae ;};var _cabfbc _e .Hash ;if _aabf ._ccecf {_cabfbc =_afb .New ();writer =_ag .MultiWriter (_cabfbc ,writer );};_aabf .setWriter (writer );_dbecb :=_aabf .checkCrossReferenceStream ();_dgggca ,_dbecb :=_aabf .mapObjectStreams (_dbecb );
_aabf .adjustXRefAffectedVersion (_dbecb );_aabf .writeDocumentVersion ();_aabf .updateObjectNumbers ();_aabf .writeObjects ();if _abeae =_aabf .writeObjectsInStreams (_dgggca );_abeae !=nil {return _abeae ;};_gdcg :=_aabf ._feddc ;var _eabag int ;for _aadeg :=range _aabf ._baadg {if _aadeg > _eabag {_eabag =_aadeg ;
};};if _aabf ._ccecf {if _abeae =_aabf .setHashIDs (_cabfbc );_abeae !=nil {return _abeae ;};};if _dbecb {if _abeae =_aabf .writeXRefStreams (_eabag ,_gdcg );_abeae !=nil {return _abeae ;};}else {_aabf .writeTrailer (_eabag );};_aabf .makeOffSetReference (_gdcg );
if _abeae =_aabf .flushWriter ();_abeae !=nil {return _abeae ;};return nil ;};func _aecdf (_adegc _bf .PdfObject )(*PdfPageResourcesColorspaces ,error ){_aedcde :=&PdfPageResourcesColorspaces {};if _fggcc ,_dgaa :=_adegc .(*_bf .PdfIndirectObject );_dgaa {_aedcde ._abca =_fggcc ;
_adegc =_fggcc .PdfObject ;};_cbdcb ,_acec :=_bf .GetDict (_adegc );if !_acec {return nil ,_eff .New ("\u0043\u0053\u0020at\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};_aedcde .Names =[]string {};
_aedcde .Colorspaces =map[string ]PdfColorspace {};for _ ,_dbggcg :=range _cbdcb .Keys (){_fcfccg :=_cbdcb .Get (_dbggcg );_aedcde .Names =append (_aedcde .Names ,string (_dbggcg ));_dbcfbc ,_fdddd :=NewPdfColorspaceFromPdfObject (_fcfccg );if _fdddd !=nil {return nil ,_fdddd ;
};_aedcde .Colorspaces [string (_dbggcg )]=_dbcfbc ;};return _aedcde ,nil ;};

// PdfFilespec represents a file specification which can either refer to an external or embedded file.
type PdfFilespec struct{Type _bf .PdfObject ;FS _bf .PdfObject ;F _bf .PdfObject ;UF _bf .PdfObject ;DOS _bf .PdfObject ;Mac _bf .PdfObject ;Unix _bf .PdfObject ;ID _bf .PdfObject ;V _bf .PdfObject ;EF _bf .PdfObject ;RF _bf .PdfObject ;Desc _bf .PdfObject ;
CI _bf .PdfObject ;_fbbg _bf .PdfObject ;};func (_efcd *PdfReader )newPdfOutlineItemFromIndirectObject (_gage *_bf .PdfIndirectObject )(*PdfOutlineItem ,error ){_bbfac ,_ddfcf :=_gage .PdfObject .(*_bf .PdfObjectDictionary );if !_ddfcf {return nil ,_af .Errorf ("\u006f\u0075\u0074l\u0069\u006e\u0065\u0020o\u0062\u006a\u0065\u0063\u0074\u0020\u006eo\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_bebec :=NewPdfOutlineItem ();_bbae :=_bbfac .Get ("\u0054\u0069\u0074l\u0065");if _bbae ==nil {return nil ,_af .Errorf ("\u006d\u0069\u0073s\u0069\u006e\u0067\u0020\u0054\u0069\u0074\u006c\u0065\u0020\u0066\u0072\u006f\u006d\u0020\u004f\u0075\u0074\u006c\u0069\u006e\u0065\u0020\u0049\u0074\u0065\u006d\u0020\u0028r\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029");
};_cfgd ,_bbdgf :=_bf .GetString (_bbae );if !_bbdgf {return nil ,_af .Errorf ("\u0074\u0069\u0074le\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0054\u0029",_bbae );};_bebec .Title =_cfgd ;if _affdg :=_bbfac .Get ("\u0043\u006f\u0075n\u0074");
_affdg !=nil {_bgge ,_gacee :=_affdg .(*_bf .PdfObjectInteger );if !_gacee {return nil ,_af .Errorf ("\u0063o\u0075\u006e\u0074\u0020n\u006f\u0074\u0020\u0061\u006e \u0069n\u0074e\u0067\u0065\u0072\u0020\u0028\u0025\u0054)",_affdg );};_deebd :=int64 (*_bgge );
_bebec .Count =&_deebd ;};if _faebb :=_bbfac .Get ("\u0044\u0065\u0073\u0074");_faebb !=nil {_bebec .Dest =_bf .ResolveReference (_faebb );if !_efcd ._aggga {_eaadf :=_efcd .traverseObjectData (_bebec .Dest );if _eaadf !=nil {return nil ,_eaadf ;};};};
if _fbdbc :=_bbfac .Get ("\u0041");_fbdbc !=nil {_bebec .A =_bf .ResolveReference (_fbdbc );if !_efcd ._aggga {_eebec :=_efcd .traverseObjectData (_bebec .A );if _eebec !=nil {return nil ,_eebec ;};};};if _agca :=_bbfac .Get ("\u0053\u0045");_agca !=nil {_bebec .SE =nil ;
};if _bggc :=_bbfac .Get ("\u0043");_bggc !=nil {_bebec .C =_bf .ResolveReference (_bggc );};if _ddbge :=_bbfac .Get ("\u0046");_ddbge !=nil {_bebec .F =_bf .ResolveReference (_ddbge );};return _bebec ,nil ;};

// PdfAnnotationMarkup represents additional fields for mark-up annotations.
// (Section 12.5.6.2 p. 399).
type PdfAnnotationMarkup struct{T _bf .PdfObject ;Popup *PdfAnnotationPopup ;CA _bf .PdfObject ;RC _bf .PdfObject ;CreationDate _bf .PdfObject ;IRT _bf .PdfObject ;Subj _bf .PdfObject ;RT _bf .PdfObject ;IT _bf .PdfObject ;ExData _bf .PdfObject ;};func (_dgff *pdfFontType3 )getFontDescriptor ()*PdfFontDescriptor {return _dgff ._cedfe };
func (_eeca *PdfReader )newPdfAnnotationLineFromDict (_ddab *_bf .PdfObjectDictionary )(*PdfAnnotationLine ,error ){_acea :=PdfAnnotationLine {};_gcdg ,_aad :=_eeca .newPdfAnnotationMarkupFromDict (_ddab );if _aad !=nil {return nil ,_aad ;};_acea .PdfAnnotationMarkup =_gcdg ;
_acea .L =_ddab .Get ("\u004c");_acea .BS =_ddab .Get ("\u0042\u0053");_acea .LE =_ddab .Get ("\u004c\u0045");_acea .IC =_ddab .Get ("\u0049\u0043");_acea .LL =_ddab .Get ("\u004c\u004c");_acea .LLE =_ddab .Get ("\u004c\u004c\u0045");_acea .Cap =_ddab .Get ("\u0043\u0061\u0070");
_acea .IT =_ddab .Get ("\u0049\u0054");_acea .LLO =_ddab .Get ("\u004c\u004c\u004f");_acea .CP =_ddab .Get ("\u0043\u0050");_acea .Measure =_ddab .Get ("\u004de\u0061\u0073\u0075\u0072\u0065");_acea .CO =_ddab .Get ("\u0043\u004f");return &_acea ,nil ;
};func (_dcc *PdfReader )newPdfAnnotationPrinterMarkFromDict (_agcd *_bf .PdfObjectDictionary )(*PdfAnnotationPrinterMark ,error ){_ede :=PdfAnnotationPrinterMark {};_ede .MN =_agcd .Get ("\u004d\u004e");return &_ede ,nil ;};func _cbcde (_gebfe *_bf .PdfObjectDictionary )(*PdfShadingPattern ,error ){_abadf :=&PdfShadingPattern {};
_adgcb :=_gebfe .Get ("\u0053h\u0061\u0064\u0069\u006e\u0067");if _adgcb ==nil {_bc .Log .Debug ("\u0053h\u0061d\u0069\u006e\u0067\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");return nil ,ErrRequiredAttributeMissing ;};_ebag ,_fcfee :=_ceacbf (_adgcb );
if _fcfee !=nil {_bc .Log .Debug ("\u0045r\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006eg\u0020s\u0068a\u0064\u0069\u006e\u0067\u003a\u0020\u0025v",_fcfee );return nil ,_fcfee ;};_abadf .Shading =_ebag ;if _eacd :=_gebfe .Get ("\u004d\u0061\u0074\u0072\u0069\u0078");
_eacd !=nil {_eddcg ,_dgebf :=_eacd .(*_bf .PdfObjectArray );if !_dgebf {_bc .Log .Debug ("\u004d\u0061\u0074\u0072i\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_eacd );return nil ,_bf .ErrTypeError ;
};_abadf .Matrix =_eddcg ;};if _gfgb :=_gebfe .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e");_gfgb !=nil {_abadf .ExtGState =_gfgb ;};return _abadf ,nil ;};func (_ffgb *PdfReader )newPdfAnnotationScreenFromDict (_egff *_bf .PdfObjectDictionary )(*PdfAnnotationScreen ,error ){_dcgf :=PdfAnnotationScreen {};
_dcgf .T =_egff .Get ("\u0054");_dcgf .MK =_egff .Get ("\u004d\u004b");_dcgf .A =_egff .Get ("\u0041");_dcgf .AA =_egff .Get ("\u0041\u0041");return &_dcgf ,nil ;};

// ColorFromPdfObjects gets the color from a series of pdf objects (4 for cmyk).
func (_efae *PdfColorspaceDeviceCMYK )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=4{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_fbde ,_abgf :=_bf .GetNumbersAsFloat (objects );
if _abgf !=nil {return nil ,_abgf ;};return _efae .ColorFromFloats (_fbde );};

// SetContext sets the specific fielddata type, e.g. would be PdfFieldButton for a button field.
func (_fgdgd *PdfField )SetContext (ctx PdfModel ){_fgdgd ._gfbeb =ctx };

// ToPdfObject implements interface PdfModel.
func (_fbea *PdfActionGoTo3DView )ToPdfObject ()_bf .PdfObject {_fbea .PdfAction .ToPdfObject ();_gdcb :=_fbea ._fda ;_fca :=_gdcb .PdfObject .(*_bf .PdfObjectDictionary );_fca .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeGoTo3DView )));_fca .SetIfNotNil ("\u0054\u0041",_fbea .TA );
_fca .SetIfNotNil ("\u0056",_fbea .V );return _gdcb ;};

// A PdfPattern can represent a Pattern, either a tiling pattern or a shading pattern.
// Note that all patterns shall be treated as colours; a Pattern colour space shall be established with the CS or cs
// operator just like other colour spaces, and a particular pattern shall be installed as the current colour with the
// SCN or scn operator.
type PdfPattern struct{

// Type: Pattern
PatternType int64 ;_adccfb PdfModel ;_bfcdg _bf .PdfObject ;};func (_gccg *Image )samplesAddPadding (_adcgd []uint32 )[]uint32 {_gdbdc :=_ff .BytesPerLine (int (_gccg .Width ),int (_gccg .BitsPerComponent ),_gccg .ColorComponents )*(8/int (_gccg .BitsPerComponent ));
_bgegc :=_gdbdc *int (_gccg .Height );if len (_adcgd )==_bgegc {return _adcgd ;};_eeef :=make ([]uint32 ,_bgegc );_edec :=int (_gccg .Width )*_gccg .ColorComponents ;for _acaa :=0;_acaa < int (_gccg .Height );_acaa ++{_gecdf :=_acaa *int (_gccg .Width );
_gebea :=_acaa *_gdbdc ;for _ecbae :=0;_ecbae < _edec ;_ecbae ++{_eeef [_gebea +_ecbae ]=_adcgd [_gecdf +_ecbae ];};};return _eeef ;};func _ffgf (_bdeg *_bf .PdfObjectDictionary ,_aabb *fontCommon ,_ebefd _faf .TextEncoder )(*pdfFontSimple ,error ){_agagae :=_bgbba (_aabb );
_agagae ._ddgcg =_ebefd ;if _ebefd ==nil {_bfea :=_bdeg .Get ("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r");if _bfea ==nil {_bfea =_bf .MakeInteger (0);};_agagae .FirstChar =_bfea ;_eadcc ,_baeg :=_bf .GetIntVal (_bfea );if !_baeg {_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u0046i\u0072s\u0074C\u0068\u0061\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u0029",_bfea );
return nil ,_bf .ErrTypeError ;};_gdga :=_faf .CharCode (_eadcc );_bfea =_bdeg .Get ("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072");if _bfea ==nil {_bfea =_bf .MakeInteger (255);};_agagae .LastChar =_bfea ;_eadcc ,_baeg =_bf .GetIntVal (_bfea );if !_baeg {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u004c\u0061\u0073\u0074\u0043h\u0061\u0072\u0020\u0074\u0079\u0070\u0065 \u0028\u0025\u0054\u0029",_bfea );
return nil ,_bf .ErrTypeError ;};_acbdd :=_faf .CharCode (_eadcc );_agagae ._fabb =make (map[_faf .CharCode ]float64 );_bfea =_bdeg .Get ("\u0057\u0069\u0064\u0074\u0068\u0073");if _bfea !=nil {_agagae .Widths =_bfea ;_cedec ,_ddde :=_bf .GetArray (_bfea );
if !_ddde {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020W\u0069\u0064t\u0068\u0073\u0020\u0061\u0074\u0074\u0072\u0069b\u0075\u0074\u0065\u0020\u0021\u003d\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_bfea );return nil ,_bf .ErrTypeError ;
};_gagfa ,_adbgc :=_cedec .ToFloat64Array ();if _adbgc !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069d\u0074\u0068\u0073\u0020\u0074\u006f\u0020a\u0072\u0072\u0061\u0079");
return nil ,_adbgc ;};if len (_gagfa )!=int (_acbdd -_gdga +1){_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0077\u0069\u0064\u0074\u0068s\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0025\u0064 \u0028\u0025\u0064\u0029",_acbdd -_gdga +1,len (_gagfa ));
return nil ,_bf .ErrRangeError ;};for _dfbg ,_ddgcf :=range _gagfa {_agagae ._fabb [_gdga +_faf .CharCode (_dfbg )]=_ddgcf ;};};};_agagae .Encoding =_bf .TraceToDirectObject (_bdeg .Get ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"));return _agagae ,nil ;
};

// PdfShadingType2 is an Axial shading.
type PdfShadingType2 struct{*PdfShading ;Coords *_bf .PdfObjectArray ;Domain *_bf .PdfObjectArray ;Function []PdfFunction ;Extend *_bf .PdfObjectArray ;};

// PdfActionMovie represents a movie action.
type PdfActionMovie struct{*PdfAction ;Annotation _bf .PdfObject ;T _bf .PdfObject ;Operation _bf .PdfObject ;};

// IsCheckbox returns true if the button field represents a checkbox, false otherwise.
func (_aecac *PdfFieldButton )IsCheckbox ()bool {return _aecac .GetType ()==ButtonTypeCheckbox };

// Encoder returns the font's text encoder.
func (_eccd pdfCIDFontType2 )Encoder ()_faf .TextEncoder {return _eccd ._eddgf };

// ToPdfObject returns a PDF object representation of the outline item.
func (_cgdc *OutlineItem )ToPdfObject ()_bf .PdfObject {_degea ,_ :=_cgdc .ToPdfOutlineItem ();return _degea .ToPdfObject ();};const (FieldFlagClear FieldFlag =0;FieldFlagReadOnly FieldFlag =1;FieldFlagRequired FieldFlag =(1<<1);FieldFlagNoExport FieldFlag =(2<<1);
FieldFlagNoToggleToOff FieldFlag =(1<<14);FieldFlagRadio FieldFlag =(1<<15);FieldFlagPushbutton FieldFlag =(1<<16);FieldFlagRadiosInUnision FieldFlag =(1<<25);FieldFlagMultiline FieldFlag =(1<<12);FieldFlagPassword FieldFlag =(1<<13);FieldFlagFileSelect FieldFlag =(1<<20);
FieldFlagDoNotScroll FieldFlag =(1<<23);FieldFlagComb FieldFlag =(1<<24);FieldFlagRichText FieldFlag =(1<<26);FieldFlagDoNotSpellCheck FieldFlag =(1<<22);FieldFlagCombo FieldFlag =(1<<17);FieldFlagEdit FieldFlag =(1<<18);FieldFlagSort FieldFlag =(1<<19);
FieldFlagMultiSelect FieldFlag =(1<<21);FieldFlagCommitOnSelChange FieldFlag =(1<<27););

// GetRuneMetrics returns the character metrics for the specified rune.
// A bool flag is returned to indicate whether or not the entry was found.
func (_bgbf pdfFontType3 )GetRuneMetrics (r rune )(_eb .CharMetrics ,bool ){_beagd :=_bgbf .Encoder ();if _beagd ==nil {_bc .Log .Debug ("\u004e\u006f\u0020en\u0063\u006f\u0064\u0065\u0072\u0020\u0066\u006f\u0072\u0020\u0066\u006f\u006e\u0074\u0073\u003d\u0025\u0073",_bgbf );
return _eb .CharMetrics {},false ;};_bfefa ,_addgd :=_beagd .RuneToCharcode (r );if !_addgd {if r !=' '{_bc .Log .Trace ("\u004e\u006f\u0020c\u0068\u0061\u0072\u0063o\u0064\u0065\u0020\u0066\u006f\u0072\u0020r\u0075\u006e\u0065\u003d\u0025\u0076\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",r ,_bgbf );
};return _eb .CharMetrics {},false ;};_gbcd ,_begd :=_bgbf .GetCharMetrics (_bfefa );return _gbcd ,_begd ;};

// Insert adds a top level outline item in the outline,
// at the specified index.
func (_aeccca *Outline )Insert (index uint ,item *OutlineItem ){_acgcd :=uint (len (_aeccca .Entries ));if index > _acgcd {index =_acgcd ;};_aeccca .Entries =append (_aeccca .Entries [:index ],append ([]*OutlineItem {item },_aeccca .Entries [index :]...)...);
};func _beade (_fbcee ,_dcbbe string )string {if _gf .Contains (_fbcee ,"\u002b"){_ebbe :=_gf .Split (_fbcee ,"\u002b");if len (_ebbe )==2{_fbcee =_ebbe [1];};};return _dcbbe +"\u002b"+_fbcee ;};

// DecodeArray returns the range of color component values in the Lab colorspace.
func (_degb *PdfColorspaceLab )DecodeArray ()[]float64 {_bafe :=[]float64 {0,100};if _degb .Range !=nil &&len (_degb .Range )==4{_bafe =append (_bafe ,_degb .Range ...);}else {_bafe =append (_bafe ,-100,100,-100,100);};return _bafe ;};

// PageProcessCallback callback function used in page loading
// that could be used to modify the page content.
//
// If an error is returned, the `ToWriter` process would fail.
//
// This callback, if defined, will take precedence over `PageCallback` callback.
type PageProcessCallback func (_eege int ,_gded *PdfPage )error ;

// GetContentStreamWithEncoder returns the pattern cell's content stream and its encoder
func (_gbgc *PdfTilingPattern )GetContentStreamWithEncoder ()([]byte ,_bf .StreamEncoder ,error ){_gdad ,_fbcc :=_gbgc ._bfcdg .(*_bf .PdfObjectStream );if !_fbcc {_bc .Log .Debug ("\u0054\u0069l\u0069\u006e\u0067\u0020\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_gbgc ._bfcdg );
return nil ,nil ,_bf .ErrTypeError ;};_bgfd ,_dfdgg :=_bf .DecodeStream (_gdad );if _dfdgg !=nil {_bc .Log .Debug ("\u0046\u0061\u0069l\u0065\u0064\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020s\u0074\u0072\u0065\u0061\u006d\u002c\u0020\u0065\u0072\u0072\u003a\u0020\u0025\u0076",_dfdgg );
return nil ,nil ,_dfdgg ;};_ebffa ,_dfdgg :=_bf .NewEncoderFromStream (_gdad );if _dfdgg !=nil {_bc .Log .Debug ("F\u0061\u0069\u006c\u0065\u0064\u0020f\u0069\u006e\u0064\u0069\u006e\u0067 \u0064\u0065\u0063\u006f\u0064\u0069\u006eg\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u003a\u0020%\u0076",_dfdgg );
return nil ,nil ,_dfdgg ;};return _bgfd ,_ebffa ,nil ;};

// PdfActionImportData represents a importData action.
type PdfActionImportData struct{*PdfAction ;F *PdfFilespec ;};func (_cfa *PdfReader )newPdfAnnotationUnderlineFromDict (_cebb *_bf .PdfObjectDictionary )(*PdfAnnotationUnderline ,error ){_acca :=PdfAnnotationUnderline {};_gbcf ,_agdd :=_cfa .newPdfAnnotationMarkupFromDict (_cebb );
if _agdd !=nil {return nil ,_agdd ;};_acca .PdfAnnotationMarkup =_gbcf ;_acca .QuadPoints =_cebb .Get ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073");return &_acca ,nil ;};

// GetNumComponents returns the number of color components (3 for RGB).
func (_ffga *PdfColorDeviceRGB )GetNumComponents ()int {return 3};

// A returns the value of the A component of the color.
func (_facea *PdfColorCalRGB )A ()float64 {return _facea [0]};

// NewPdfAnnotationInk returns a new ink annotation.
func NewPdfAnnotationInk ()*PdfAnnotationInk {_abf :=NewPdfAnnotation ();_dga :=&PdfAnnotationInk {};_dga .PdfAnnotation =_abf ;_dga .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_abf .SetContext (_dga );return _dga ;};

// NewPdfAnnotation3D returns a new 3d annotation.
func NewPdfAnnotation3D ()*PdfAnnotation3D {_bcaf :=NewPdfAnnotation ();_bga :=&PdfAnnotation3D {};_bga .PdfAnnotation =_bcaf ;_bcaf .SetContext (_bga );return _bga ;};func (_abec *PdfReader )newPdfAnnotationCaretFromDict (_acb *_bf .PdfObjectDictionary )(*PdfAnnotationCaret ,error ){_dfeb :=PdfAnnotationCaret {};
_ecbc ,_dbbf :=_abec .newPdfAnnotationMarkupFromDict (_acb );if _dbbf !=nil {return nil ,_dbbf ;};_dfeb .PdfAnnotationMarkup =_ecbc ;_dfeb .RD =_acb .Get ("\u0052\u0044");_dfeb .Sy =_acb .Get ("\u0053\u0079");return &_dfeb ,nil ;};

// ToPdfObject converts the pdfCIDFontType0 to a PDF representation.
func (_dggcb *pdfCIDFontType0 )ToPdfObject ()_bf .PdfObject {return _bf .MakeNull ()};

// PdfActionSubmitForm represents a submitForm action.
type PdfActionSubmitForm struct{*PdfAction ;F *PdfFilespec ;Fields _bf .PdfObject ;Flags _bf .PdfObject ;};

// Field returns the parent form field of the widget annotation, if one exists.
// NOTE: the method returns nil if the parent form field has not been parsed.
func (_daee *PdfAnnotationWidget )Field ()*PdfField {return _daee ._adf };func _gbcbf (_ebecge _bf .PdfObject ,_afafbb *PdfReader )(*OutlineDest ,error ){_ggfcb ,_fdcfgf :=_bf .GetArray (_ebecge );if !_fdcfgf {return nil ,_eff .New ("\u006f\u0075\u0074\u006c\u0069\u006e\u0065 \u0064\u0065\u0073t\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_cfdec :=_ggfcb .Len ();if _cfdec < 2{return nil ,_af .Errorf ("\u0069n\u0076\u0061l\u0069\u0064\u0020\u006fu\u0074\u006c\u0069n\u0065\u0020\u0064\u0065\u0073\u0074\u0069\u006e\u0061ti\u006f\u006e\u0020a\u0072\u0072a\u0079\u0020\u006c\u0065\u006e\u0067t\u0068\u003a \u0025\u0064",_cfdec );
};_ggafe :=&OutlineDest {Mode :"\u0046\u0069\u0074"};_fggab :=_ggfcb .Get (0);if _agfa ,_acgda :=_bf .GetIndirect (_fggab );_acgda {if _ ,_geadc ,_bdace :=_afafbb .PageFromIndirectObject (_agfa );_bdace ==nil {_ggafe .Page =int64 (_geadc -1);}else {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063o\u0075\u006c\u0064 \u006e\u006f\u0074\u0020g\u0065\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006e\u0064\u0065\u0078\u0020\u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0025\u002b\u0076",_agfa );
};_ggafe .PageObj =_agfa ;}else if _efcfe ,_aege :=_bf .GetIntVal (_fggab );_aege {if _efcfe >=0&&_efcfe < len (_afafbb .PageList ){_ggafe .PageObj =_afafbb .PageList [_efcfe ].GetPageAsIndirectObject ();}else {_bc .Log .Debug ("\u0057\u0041R\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0025\u0064",_efcfe );
};_ggafe .Page =int64 (_efcfe );}else {return nil ,_af .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u006f\u0075\u0074\u006cine\u0020de\u0073\u0074\u0069\u006e\u0061\u0074\u0069on\u0020\u0070\u0061\u0067\u0065\u003a\u0020%\u0054",_fggab );};_bbfce ,_fdcfgf :=_bf .GetNameVal (_ggfcb .Get (1));
if !_fdcfgf {_bc .Log .Debug ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065\u0020\u0064\u0065s\u0074\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006d\u0061\u0067\u006e\u0069\u0066\u0069\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_ggfcb .Get (1));
return _ggafe ,nil ;};switch _bbfce {case "\u0046\u0069\u0074","\u0046\u0069\u0074\u0042":case "\u0046\u0069\u0074\u0048","\u0046\u0069\u0074B\u0048":if _cfdec > 2{_ggafe .Y ,_ =_bf .GetNumberAsFloat (_bf .TraceToDirectObject (_ggfcb .Get (2)));};case "\u0046\u0069\u0074\u0056","\u0046\u0069\u0074B\u0056":if _cfdec > 2{_ggafe .X ,_ =_bf .GetNumberAsFloat (_bf .TraceToDirectObject (_ggfcb .Get (2)));
};case "\u0058\u0059\u005a":if _cfdec > 4{_ggafe .X ,_ =_bf .GetNumberAsFloat (_bf .TraceToDirectObject (_ggfcb .Get (2)));_ggafe .Y ,_ =_bf .GetNumberAsFloat (_bf .TraceToDirectObject (_ggfcb .Get (3)));_ggafe .Zoom ,_ =_bf .GetNumberAsFloat (_bf .TraceToDirectObject (_ggfcb .Get (4)));
};default:_bbfce ="\u0046\u0069\u0074";};_ggafe .Mode =_bbfce ;return _ggafe ,nil ;};

// GetCharMetrics returns the char metrics for character code `code`.
func (_gdag pdfCIDFontType0 )GetCharMetrics (code _faf .CharCode )(_eb .CharMetrics ,bool ){_cccbe :=_gdag ._ededd ;if _ecccc ,_fbcbg :=_gdag ._decg [code ];_fbcbg {_cccbe =_ecccc ;};return _eb .CharMetrics {Wx :_cccbe },true ;};

// NewPdfAnnotationSquare returns a new square annotation.
func NewPdfAnnotationSquare ()*PdfAnnotationSquare {_eaab :=NewPdfAnnotation ();_bfgd :=&PdfAnnotationSquare {};_bfgd .PdfAnnotation =_eaab ;_bfgd .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_eaab .SetContext (_bfgd );return _bfgd ;};func _cgdfb ()string {_ggeae .Lock ();
defer _ggeae .Unlock ();return _dafd };

// OutlineItem represents a PDF outline item dictionary (Table 153 - pp. 376 - 377).
type OutlineItem struct{Title string `json:"title"`;Dest OutlineDest `json:"dest"`;Entries []*OutlineItem `json:"entries,omitempty"`;};

// G returns the value of the green component of the color.
func (_cfce *PdfColorDeviceRGB )G ()float64 {return _cfce [1]};

// Initialize initializes the PdfSignature.
func (_dgfaa *PdfSignature )Initialize ()error {if _dgfaa .Handler ==nil {return _eff .New ("\u0073\u0069\u0067n\u0061\u0074\u0075\u0072e\u0020\u0068\u0061\u006e\u0064\u006c\u0065r\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");
};return _dgfaa .Handler .InitSignature (_dgfaa );};

// PdfModel is a higher level PDF construct which can be collapsed into a PdfObject.
// Each PdfModel has an underlying PdfObject and vice versa (one-to-one).
// Under normal circumstances there should only be one copy of each.
// Copies can be made, but care must be taken to do it properly.
type PdfModel interface{ToPdfObject ()_bf .PdfObject ;GetContainingPdfObject ()_bf .PdfObject ;};

// SetContext sets the sub annotation (context).
func (_cbc *PdfAnnotation )SetContext (ctx PdfModel ){_cbc ._fgc =ctx };func (_ddfd *PdfFilespec )getDict ()*_bf .PdfObjectDictionary {if _aacf ,_daed :=_ddfd ._fbbg .(*_bf .PdfIndirectObject );_daed {_ebgd ,_aeac :=_aacf .PdfObject .(*_bf .PdfObjectDictionary );
if !_aeac {return nil ;};return _ebgd ;}else if _becfa ,_badc :=_ddfd ._fbbg .(*_bf .PdfObjectDictionary );_badc {return _becfa ;}else {_bc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020F\u0069\u006c\u0065\u0073\u0070\u0065\u0063\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074 \u0074\u0079p\u0065\u0020(\u0025T\u0029",_ddfd ._fbbg );
return nil ;};};

// PdfAnnotationRedact represents Redact annotations.
// (Section 12.5.6.23).
type PdfAnnotationRedact struct{*PdfAnnotation ;*PdfAnnotationMarkup ;QuadPoints _bf .PdfObject ;IC _bf .PdfObject ;RO _bf .PdfObject ;OverlayText _bf .PdfObject ;Repeat _bf .PdfObject ;DA _bf .PdfObject ;Q _bf .PdfObject ;};

// PdfAction represents an action in PDF (section 12.6 p. 412).
type PdfAction struct{_baf PdfModel ;Type _bf .PdfObject ;S _bf .PdfObject ;Next _bf .PdfObject ;_fda *_bf .PdfIndirectObject ;};

// PdfAnnotationSquare represents Square annotations.
// (Section 12.5.6.8).
type PdfAnnotationSquare struct{*PdfAnnotation ;*PdfAnnotationMarkup ;BS _bf .PdfObject ;IC _bf .PdfObject ;BE _bf .PdfObject ;RD _bf .PdfObject ;};

// NewReaderOpts generates a default `ReaderOpts` instance.
func NewReaderOpts ()*ReaderOpts {return &ReaderOpts {Password :"",LazyLoad :true }};

// NewPdfAnnotationMovie returns a new movie annotation.
func NewPdfAnnotationMovie ()*PdfAnnotationMovie {_agg :=NewPdfAnnotation ();_ecc :=&PdfAnnotationMovie {};_ecc .PdfAnnotation =_agg ;_agg .SetContext (_ecc );return _ecc ;};

// DSS represents a Document Security Store dictionary.
// The DSS dictionary contains both global and signature specific validation
// information. The certificates and revocation data in the `Certs`, `OCSPs`,
// and `CRLs` fields can be used to validate any signature in the document.
// Additionally, the VRI entry contains validation data per signature.
// The keys in the VRI entry are calculated as upper(hex(sha1(sig.Contents))).
// The values are VRI dictionaries containing certificates and revocation
// information used for validating a single signature.
// See ETSI TS 102 778-4 V1.1.1 for more information.
type DSS struct{_agagg *_bf .PdfIndirectObject ;Certs []*_bf .PdfObjectStream ;OCSPs []*_bf .PdfObjectStream ;CRLs []*_bf .PdfObjectStream ;VRI map[string ]*VRI ;_dbae map[string ]*_bf .PdfObjectStream ;_eabfad map[string ]*_bf .PdfObjectStream ;_dega map[string ]*_bf .PdfObjectStream ;
};func (_ddbb *PdfReader )newPdfAnnotation3DFromDict (_dbge *_bf .PdfObjectDictionary )(*PdfAnnotation3D ,error ){_eafd :=PdfAnnotation3D {};_eafd .T3DD =_dbge .Get ("\u0033\u0044\u0044");_eafd .T3DV =_dbge .Get ("\u0033\u0044\u0056");_eafd .T3DA =_dbge .Get ("\u0033\u0044\u0041");
_eafd .T3DI =_dbge .Get ("\u0033\u0044\u0049");_eafd .T3DB =_dbge .Get ("\u0033\u0044\u0042");return &_eafd ,nil ;};

// NewPdfColorDeviceCMYK returns a new CMYK32 color.
func NewPdfColorDeviceCMYK (c ,m ,y ,k float64 )*PdfColorDeviceCMYK {_gebgbc :=PdfColorDeviceCMYK {c ,m ,y ,k };return &_gebgbc ;};

// ToPdfObject recursively builds the Outline tree PDF object.
func (_eega *PdfOutlineItem )ToPdfObject ()_bf .PdfObject {_acbgd :=_eega ._aabdd ;_dfef :=_acbgd .PdfObject .(*_bf .PdfObjectDictionary );_dfef .Set ("\u0054\u0069\u0074l\u0065",_eega .Title );if _eega .A !=nil {_dfef .Set ("\u0041",_eega .A );};if _ceadf :=_dfef .Get ("\u0053\u0045");
_ceadf !=nil {_dfef .Remove ("\u0053\u0045");};if _eega .C !=nil {_dfef .Set ("\u0043",_eega .C );};if _eega .Dest !=nil {_dfef .Set ("\u0044\u0065\u0073\u0074",_eega .Dest );};if _eega .F !=nil {_dfef .Set ("\u0046",_eega .F );};if _eega .Count !=nil {_dfef .Set ("\u0043\u006f\u0075n\u0074",_bf .MakeInteger (*_eega .Count ));
};if _eega .Next !=nil {_dfef .Set ("\u004e\u0065\u0078\u0074",_eega .Next .ToPdfObject ());};if _eega .First !=nil {_dfef .Set ("\u0046\u0069\u0072s\u0074",_eega .First .ToPdfObject ());};if _eega .Prev !=nil {_dfef .Set ("\u0050\u0072\u0065\u0076",_eega .Prev .GetContext ().GetContainingPdfObject ());
};if _eega .Last !=nil {_dfef .Set ("\u004c\u0061\u0073\u0074",_eega .Last .GetContext ().GetContainingPdfObject ());};if _eega .Parent !=nil {_dfef .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_eega .Parent .GetContext ().GetContainingPdfObject ());};
return _acbgd ;};

// SetCatalogMetadata sets the catalog metadata (XMP) stream object.
func (_fdagg *PdfWriter )SetCatalogMetadata (meta _bf .PdfObject )error {if meta ==nil {_fdagg ._cecba .Remove ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061");return nil ;};_ffcee ,_bgdf :=_bf .GetStream (meta );if !_bgdf {return _eff .New ("\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u006d\u0065\u0074\u0061\u0064a\u0074\u0061\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0073t\u0072\u0065\u0061\u006d");
};_fdagg .addObject (_ffcee );_fdagg ._cecba .Set ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061",_ffcee );return nil ;};

// GetCharMetrics returns the char metrics for character code `code`.
func (_affc pdfFontType0 )GetCharMetrics (code _faf .CharCode )(_eb .CharMetrics ,bool ){if _affc .DescendantFont ==nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0064\u0065\u0073\u0063\u0065\u006e\u0064\u0061\u006e\u0074\u002e\u0020\u0066\u006f\u006et=\u0025\u0073",_affc );
return _eb .CharMetrics {},false ;};return _affc .DescendantFont .GetCharMetrics (code );};

// ColorFromPdfObjects loads the color from PDF objects.
// The first objects (if present) represent the color in underlying colorspace.  The last one represents
// the name of the pattern.
func (_edae *PdfColorspaceSpecialPattern )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )< 1{return nil ,_eff .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gcaca :=&PdfColorPattern {};_cfceb ,_dagd :=objects [len (objects )-1].(*_bf .PdfObjectName );if !_dagd {_bc .Log .Debug ("\u0050\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u006e\u0061\u006d\u0065\u0020\u006e\u006ft\u0020a\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",objects [len (objects )-1]);
return nil ,ErrTypeCheck ;};_gcaca .PatternName =*_cfceb ;if len (objects )> 1{_aaa :=objects [0:len (objects )-1];if _edae .UnderlyingCS ==nil {_bc .Log .Debug ("P\u0061\u0074t\u0065\u0072\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0077\u0069\u0074\u0068\u0020\u0064\u0065\u0066\u0069\u006ee\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u0020\u0062\u0075\u0074\u0020\u0075\u006e\u0064\u0065\u0072\u006c\u0079i\u006e\u0067\u0020\u0063\u0073\u0020\u006d\u0069\u0073\u0073\u0069n\u0067");
return nil ,_eff .New ("\u0075n\u0064\u0065\u0072\u006cy\u0069\u006e\u0067\u0020\u0043S\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_gadcg ,_ecdcb :=_edae .UnderlyingCS .ColorFromPdfObjects (_aaa );if _ecdcb !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0076\u0069\u0061\u0020\u0075\u006e\u0064\u0065\u0072\u006c\u0079\u0069\u006e\u0067\u0020\u0063\u0073\u003a\u0020\u0025\u0076",_ecdcb );
return nil ,_ecdcb ;};_gcaca .Color =_gadcg ;};return _gcaca ,nil ;};

// NewPdfActionSubmitForm returns a new "submit form" action.
func NewPdfActionSubmitForm ()*PdfActionSubmitForm {_bg :=NewPdfAction ();_gff :=&PdfActionSubmitForm {};_gff .PdfAction =_bg ;_bg .SetContext (_gff );return _gff ;};

// ToPdfObject implements interface PdfModel.
func (_bbbdf *PdfFilespec )ToPdfObject ()_bf .PdfObject {_bbadf :=_bbbdf .getDict ();_bbadf .Clear ();_bbadf .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0046\u0069\u006c\u0065\u0073\u0070\u0065\u0063"));_bbadf .SetIfNotNil ("\u0046\u0053",_bbbdf .FS );
_bbadf .SetIfNotNil ("\u0046",_bbbdf .F );_bbadf .SetIfNotNil ("\u0055\u0046",_bbbdf .UF );_bbadf .SetIfNotNil ("\u0044\u004f\u0053",_bbbdf .DOS );_bbadf .SetIfNotNil ("\u004d\u0061\u0063",_bbbdf .Mac );_bbadf .SetIfNotNil ("\u0055\u006e\u0069\u0078",_bbbdf .Unix );
_bbadf .SetIfNotNil ("\u0049\u0044",_bbbdf .ID );_bbadf .SetIfNotNil ("\u0056",_bbbdf .V );_bbadf .SetIfNotNil ("\u0045\u0046",_bbbdf .EF );_bbadf .SetIfNotNil ("\u0052\u0046",_bbbdf .RF );_bbadf .SetIfNotNil ("\u0044\u0065\u0073\u0063",_bbbdf .Desc );
_bbadf .SetIfNotNil ("\u0043\u0049",_bbbdf .CI );return _bbbdf ._fbbg ;};

// PdfAnnotationMovie represents Movie annotations.
// (Section 12.5.6.17).
type PdfAnnotationMovie struct{*PdfAnnotation ;T _bf .PdfObject ;Movie _bf .PdfObject ;A _bf .PdfObject ;};

// PdfReader represents a PDF file reader. It is a frontend to the lower level parsing mechanism and provides
// a higher level access to work with PDF structure and information, such as the page structure etc.
type PdfReader struct{_gafdb *_bf .PdfParser ;_bbgaa _bf .PdfObject ;_afece *_bf .PdfIndirectObject ;_efcfed *_bf .PdfObjectDictionary ;_ggdg []*_bf .PdfIndirectObject ;PageList []*PdfPage ;_gdebc int ;_dbaea *_bf .PdfObjectDictionary ;_bgdac *PdfOutlineTreeNode ;
AcroForm *PdfAcroForm ;DSS *DSS ;Rotate *int64 ;_eggf *Permissions ;_gbbcb map[*PdfReader ]*PdfReader ;_dede []*PdfReader ;_fgac *modelManager ;_aggga bool ;_eddf map[_bf .PdfObject ]struct{};_geeda _ag .ReadSeeker ;_ffade string ;_fbcfb bool ;_fbagdf *ReaderOpts ;
_becd bool ;};

// WriteString outputs the object as it is to be written to file.
func (_gfda *PdfTransformParamsDocMDP )WriteString ()string {return _gfda .ToPdfObject ().WriteString ()};func (_faccf *LTV )generateVRIKey (_dbbbc *PdfSignature )(string ,error ){_acfg ,_bagf :=_dcdg (_dbbbc .Contents .Bytes ());if _bagf !=nil {return "",_bagf ;
};return _gf .ToUpper (_fa .EncodeToString (_acfg )),nil ;};func (_ebf *PdfAnnotationMarkup )appendToPdfDictionary (_feae *_bf .PdfObjectDictionary ){_feae .SetIfNotNil ("\u0054",_ebf .T );if _ebf .Popup !=nil {_feae .Set ("\u0050\u006f\u0070u\u0070",_ebf .Popup .ToPdfObject ());
};_feae .SetIfNotNil ("\u0043\u0041",_ebf .CA );_feae .SetIfNotNil ("\u0052\u0043",_ebf .RC );_feae .SetIfNotNil ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_ebf .CreationDate );_feae .SetIfNotNil ("\u0049\u0052\u0054",_ebf .IRT );
_feae .SetIfNotNil ("\u0053\u0075\u0062\u006a",_ebf .Subj );_feae .SetIfNotNil ("\u0052\u0054",_ebf .RT );_feae .SetIfNotNil ("\u0049\u0054",_ebf .IT );_feae .SetIfNotNil ("\u0045\u0078\u0044\u0061\u0074\u0061",_ebf .ExData );};

// ToPdfObject implements interface PdfModel.
func (_eg *PdfActionURI )ToPdfObject ()_bf .PdfObject {_eg .PdfAction .ToPdfObject ();_bbc :=_eg ._fda ;_geae :=_bbc .PdfObject .(*_bf .PdfObjectDictionary );_geae .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeURI )));_geae .SetIfNotNil ("\u0055\u0052\u0049",_eg .URI );
_geae .SetIfNotNil ("\u0049\u0073\u004da\u0070",_eg .IsMap );return _bbc ;};

// ColorToRGB converts a Lab color to an RGB color.
func (_bdde *PdfColorspaceLab )ColorToRGB (color PdfColor )(PdfColor ,error ){_gege :=func (_dfbfcg float64 )float64 {if _dfbfcg >=6.0/29{return _dfbfcg *_dfbfcg *_dfbfcg ;};return 108.0/841*(_dfbfcg -4/29);};_dfdc ,_afcf :=color .(*PdfColorLab );if !_afcf {_bc .Log .Debug ("\u0069\u006e\u0070\u0075t \u0063\u006f\u006c\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u006c\u0061\u0062");
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};LStar :=_dfdc .L ();AStar :=_dfdc .A ();BStar :=_dfdc .B ();L :=(LStar +16)/116+AStar /500;M :=(LStar +16)/116;N :=(LStar +16)/116-BStar /200;
X :=_bdde .WhitePoint [0]*_gege (L );Y :=_bdde .WhitePoint [1]*_gege (M );Z :=_bdde .WhitePoint [2]*_gege (N );_edcbd :=3.240479*X +-1.537150*Y +-0.498535*Z ;_egfd :=-0.969256*X +1.875992*Y +0.041556*Z ;_gggd :=0.055648*X +-0.204043*Y +1.057311*Z ;_edcbd =_fg .Min (_fg .Max (_edcbd ,0),1.0);
_egfd =_fg .Min (_fg .Max (_egfd ,0),1.0);_gggd =_fg .Min (_fg .Max (_gggd ,0),1.0);return NewPdfColorDeviceRGB (_edcbd ,_egfd ,_gggd ),nil ;};

// SetBorderWidth sets the style's border width.
func (_aeed *PdfBorderStyle )SetBorderWidth (width float64 ){_aeed .W =&width };

// ColorFromPdfObjects returns a new PdfColor based on input color components. The input PdfObjects should
// be numeric.
func (_bfeb *PdfColorspaceDeviceN )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=_bfeb .GetNumComponents (){return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_eagc ,_dgfb :=_bf .GetNumbersAsFloat (objects );
if _dgfb !=nil {return nil ,_dgfb ;};return _bfeb .ColorFromFloats (_eagc );};

// ToPdfObject implements interface PdfModel.
func (_eccfe *PdfAnnotationCaret )ToPdfObject ()_bf .PdfObject {_eccfe .PdfAnnotation .ToPdfObject ();_ddd :=_eccfe ._cdaf ;_adca :=_ddd .PdfObject .(*_bf .PdfObjectDictionary );_eccfe .PdfAnnotationMarkup .appendToPdfDictionary (_adca );_adca .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0043\u0061\u0072e\u0074"));
_adca .SetIfNotNil ("\u0052\u0044",_eccfe .RD );_adca .SetIfNotNil ("\u0053\u0079",_eccfe .Sy );return _ddd ;};

// GetSubFilter returns SubFilter value or empty string.
func (_cabfa *pdfSignDictionary )GetSubFilter ()string {_cdfea :=_cabfa .Get ("\u0053u\u0062\u0046\u0069\u006c\u0074\u0065r");if _cdfea ==nil {return "";};if _aggcg ,_gcded :=_bf .GetNameVal (_cdfea );_gcded {return _aggcg ;};return "";};func (_debaf *PdfWriter )writeAcroFormFields ()error {if _debaf ._dadgd ==nil {return nil ;
};_bc .Log .Trace ("\u0057r\u0069t\u0069\u006e\u0067\u0020\u0061c\u0072\u006f \u0066\u006f\u0072\u006d\u0073");_gfbgb :=_debaf ._dadgd .ToPdfObject ();_bc .Log .Trace ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u003a\u0020\u0025\u002b\u0076",_gfbgb );
_debaf ._cecba .Set ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d",_gfbgb );_agecf :=_debaf .addObjects (_gfbgb );if _agecf !=nil {return _agecf ;};return nil ;};

// GetContainingPdfObject implements interface PdfModel.
func (_dcbge *PdfSignatureReference )GetContainingPdfObject ()_bf .PdfObject {return _dcbge ._fabfb };

// DecodeArray returns the component range values for the Indexed colorspace.
func (_bbafb *PdfColorspaceSpecialIndexed )DecodeArray ()[]float64 {return []float64 {0,float64 (_bbafb .HiVal )};};

// NewPdfReaderLazy creates a new PdfReader for `rs` in lazy-loading mode. The difference
// from NewPdfReader is that in lazy-loading mode, objects are only loaded into memory when needed
// rather than entire structure being loaded into memory on reader creation.
// Note that it may make sense to use the lazy-load reader when processing only parts of files,
// rather than loading entire file into memory. Example: splitting a few pages from a large PDF file.
func NewPdfReaderLazy (rs _ag .ReadSeeker )(*PdfReader ,error ){const _bcfdg ="\u006d\u006f\u0064\u0065l:\u004e\u0065\u0077\u0050\u0064\u0066\u0052\u0065\u0061\u0064\u0065\u0072\u004c\u0061z\u0079";return _bfaag (rs ,&ReaderOpts {LazyLoad :true },false ,_bcfdg );
};

// SignatureHandler interface defines the common functionality for PDF signature handlers, which
// need to be capable of validating digital signatures and signing PDF documents.
type SignatureHandler interface{

// IsApplicable checks if a given signature dictionary `sig` is applicable for the signature handler.
// For example a signature of type `adbe.pkcs7.detached` might not fit for a rsa.sha1 handler.
IsApplicable (_fddcc *PdfSignature )bool ;

// Validate validates a PDF signature against a given digest (hash) such as that determined
// for an input file. Returns validation results.
Validate (_cabag *PdfSignature ,_eabac Hasher )(SignatureValidationResult ,error );

// InitSignature prepares the signature dictionary for signing. This involves setting all
// necessary fields, and also allocating sufficient space to the Contents so that the
// finalized signature can be inserted once the hash is calculated.
InitSignature (_dgdcf *PdfSignature )error ;

// NewDigest creates a new digest/hasher based on the signature dictionary and handler.
NewDigest (_afeca *PdfSignature )(Hasher ,error );

// Sign receives the hash `digest` (for example hash of an input file), and signs based
// on the signature dictionary `sig` and applies the signature data to the signature
// dictionary Contents field.
Sign (_ccecb *PdfSignature ,_ecadb Hasher )error ;};

// GetExtGState gets the ExtGState specified by keyName. Returns a bool
// indicating whether it was found or not.
func (_eagaa *PdfPageResources )GetExtGState (keyName _bf .PdfObjectName )(_bf .PdfObject ,bool ){if _eagaa .ExtGState ==nil {return nil ,false ;};_cebaec ,_bfacd :=_bf .TraceToDirectObject (_eagaa .ExtGState ).(*_bf .PdfObjectDictionary );if !_bfacd {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_eagaa .ExtGState );
return nil ,false ;};if _egge :=_cebaec .Get (keyName );_egge !=nil {return _egge ,true ;};return nil ,false ;};

// GetRevisionNumber returns the version of the current Pdf document
func (_bfcdf *PdfReader )GetRevisionNumber ()int {return _bfcdf ._gafdb .GetRevisionNumber ()};

// ImageToRGB converts an Image in a given PdfColorspace to an RGB image.
func (_ecfge *PdfColorspaceDeviceN )ImageToRGB (img Image )(Image ,error ){_fecc :=_de .NewReader (img .getBase ());_gaff :=_ff .NewImageBase (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),img .ColorComponents ,nil ,img ._gfegf ,img ._dbcfb );
_dagcgd :=_de .NewWriter (_gaff );_cefg :=_fg .Pow (2,float64 (img .BitsPerComponent ))-1;_gdab :=_ecfge .GetNumComponents ();_fabd :=make ([]uint32 ,_gdab );_gdfe :=make ([]float64 ,_gdab );for {_dcbbd :=_fecc .ReadSamples (_fabd );if _dcbbd ==_ag .EOF {break ;
}else if _dcbbd !=nil {return img ,_dcbbd ;};for _gbbd :=0;_gbbd < _gdab ;_gbbd ++{_gcga :=float64 (_fabd [_gbbd ])/_cefg ;_gdfe [_gbbd ]=_gcga ;};_bfee ,_dcbbd :=_ecfge .TintTransform .Evaluate (_gdfe );if _dcbbd !=nil {return img ,_dcbbd ;};for _ ,_agac :=range _bfee {_agac =_fg .Min (_fg .Max (0,_agac ),1.0);
if _dcbbd =_dagcgd .WriteSample (uint32 (_agac *_cefg ));_dcbbd !=nil {return img ,_dcbbd ;};};};return _ecfge .AlternateSpace .ImageToRGB (_cgfba (&_gaff ));};

// ToPdfObject implements interface PdfModel.
func (_fbae *PdfAnnotationTrapNet )ToPdfObject ()_bf .PdfObject {_fbae .PdfAnnotation .ToPdfObject ();_cgef :=_fbae ._cdaf ;_defd :=_cgef .PdfObject .(*_bf .PdfObjectDictionary );_defd .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0054r\u0061\u0070\u004e\u0065\u0074"));
return _cgef ;};

// NewPdfAnnotationPrinterMark returns a new printermark annotation.
func NewPdfAnnotationPrinterMark ()*PdfAnnotationPrinterMark {_cedg :=NewPdfAnnotation ();_abgg :=&PdfAnnotationPrinterMark {};_abgg .PdfAnnotation =_cedg ;_cedg .SetContext (_abgg );return _abgg ;};func _cgebg (_aacg _bf .PdfObject )(*PdfColorspaceDeviceN ,error ){_fffbg :=NewPdfColorspaceDeviceN ();
if _fbgce ,_dgbab :=_aacg .(*_bf .PdfIndirectObject );_dgbab {_fffbg ._bcfcf =_fbgce ;};_aacg =_bf .TraceToDirectObject (_aacg );_eccfg ,_dgafd :=_aacg .(*_bf .PdfObjectArray );if !_dgafd {return nil ,_af .Errorf ("\u0064\u0065\u0076\u0069\u0063\u0065\u004e\u0020\u0043\u0053\u003a \u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0062j\u0065\u0063\u0074");
};if _eccfg .Len ()!=4&&_eccfg .Len ()!=5{return nil ,_af .Errorf ("\u0064\u0065\u0076ic\u0065\u004e\u0020\u0043\u0053\u003a\u0020\u0049\u006ec\u006fr\u0072e\u0063t\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u006c\u0065\u006e\u0067\u0074\u0068");};_aacg =_eccfg .Get (0);
_adfg ,_dgafd :=_aacg .(*_bf .PdfObjectName );if !_dgafd {return nil ,_af .Errorf ("\u0064\u0065\u0076i\u0063\u0065\u004e\u0020C\u0053\u003a\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0066\u0061\u006d\u0069\u006c\u0079\u0020\u006e\u0061\u006d\u0065");
};if *_adfg !="\u0044e\u0076\u0069\u0063\u0065\u004e"{return nil ,_af .Errorf ("\u0064\u0065v\u0069\u0063\u0065\u004e\u0020\u0043\u0053\u003a\u0020\u0077\u0072\u006f\u006e\u0067\u0020\u0066\u0061\u006d\u0069\u006c\u0079\u0020na\u006d\u0065");};_aacg =_eccfg .Get (1);
_aacg =_bf .TraceToDirectObject (_aacg );_gcae ,_dgafd :=_aacg .(*_bf .PdfObjectArray );if !_dgafd {return nil ,_af .Errorf ("\u0064\u0065\u0076i\u0063\u0065\u004e\u0020C\u0053\u003a\u0020\u0049\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0061\u006d\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079");
};_fffbg .ColorantNames =_gcae ;_aacg =_eccfg .Get (2);_fadc ,_eaacc :=NewPdfColorspaceFromPdfObject (_aacg );if _eaacc !=nil {return nil ,_eaacc ;};_fffbg .AlternateSpace =_fadc ;_dbaf ,_eaacc :=_bbbbd (_eccfg .Get (3));if _eaacc !=nil {return nil ,_eaacc ;
};_fffbg .TintTransform =_dbaf ;if _eccfg .Len ()==5{_acgfa ,_bedc :=_gfcf (_eccfg .Get (4));if _bedc !=nil {return nil ,_bedc ;};_fffbg .Attributes =_acgfa ;};return _fffbg ,nil ;};func (_aeccc *pdfCIDFontType2 )getFontDescriptor ()*PdfFontDescriptor {return _aeccc ._cedfe };


// ImageHandler interface implements common image loading and processing tasks.
// Implementing as an interface allows for the possibility to use non-standard libraries for faster
// loading and processing of images.
type ImageHandler interface{

// Read any image type and load into a new Image object.
Read (_bfbdb _ag .Reader )(*Image ,error );

// NewImageFromGoImage loads a NRGBA32 unidoc Image from a standard Go image structure.
NewImageFromGoImage (_eebd _b .Image )(*Image ,error );

// NewGrayImageFromGoImage loads a grayscale unidoc Image from a standard Go image structure.
NewGrayImageFromGoImage (_fdaac _b .Image )(*Image ,error );

// Compress an image.
Compress (_caac *Image ,_affac int64 )(*Image ,error );};func (_bcce *PdfWriter )flushWriter ()error {if _bcce ._cgebb ==nil {_bcce ._cgebb =_bcce ._fddfe .Flush ();};return _bcce ._cgebb ;};

// Y returns the value of the yellow component of the color.
func (_ebefe *PdfColorDeviceCMYK )Y ()float64 {return _ebefe [2]};

// Compress is yet to be implemented.
// Should be able to compress in terms of JPEG quality parameter,
// and DPI threshold (need to know bounding area dimensions).
func (_ecbfe DefaultImageHandler )Compress (input *Image ,quality int64 )(*Image ,error ){return input ,nil ;};

// GetNumComponents returns the number of color components (4 for CMYK32).
func (_ebdb *PdfColorDeviceCMYK )GetNumComponents ()int {return 4};

// SetFlag sets the flag for the field.
func (_gabda *PdfField )SetFlag (flag FieldFlag ){_gabda .Ff =_bf .MakeInteger (int64 (flag ))};

// XObjectForm (Table 95 in 8.10.2).
type XObjectForm struct{Filter _bf .StreamEncoder ;FormType _bf .PdfObject ;BBox _bf .PdfObject ;Matrix _bf .PdfObject ;Resources *PdfPageResources ;Group _bf .PdfObject ;Ref _bf .PdfObject ;MetaData _bf .PdfObject ;PieceInfo _bf .PdfObject ;LastModified _bf .PdfObject ;
StructParent _bf .PdfObject ;StructParents _bf .PdfObject ;OPI _bf .PdfObject ;OC _bf .PdfObject ;Name _bf .PdfObject ;

// Stream data.
Stream []byte ;_cdaggd *_bf .PdfObjectStream ;};func (_gabg *pdfFontType0 )bytesToCharcodes (_gbcca []byte )([]_faf .CharCode ,bool ){if _gabg ._caceg ==nil {return nil ,false ;};_abfcd ,_ccfcd :=_gabg ._caceg .BytesToCharcodes (_gbcca );if !_ccfcd {return nil ,false ;
};_aggaa :=make ([]_faf .CharCode ,len (_abfcd ));for _dggg ,_aadg :=range _abfcd {_aggaa [_dggg ]=_faf .CharCode (_aadg );};return _aggaa ,true ;};

// DecodeArray returns the range of color component values in CalRGB colorspace.
func (_bgfga *PdfColorspaceCalRGB )DecodeArray ()[]float64 {return []float64 {0.0,1.0,0.0,1.0,0.0,1.0};};

// GetNamedDestinations returns the Dests entry in the PDF catalog.
// See section 12.3.2.3 "Named Destinations" (p. 367 PDF32000_2008).
func (_gagb *PdfReader )GetNamedDestinations ()(_bf .PdfObject ,error ){_fecf :=_bf .ResolveReference (_gagb ._dbaea .Get ("\u0044\u0065\u0073t\u0073"));if _fecf ==nil {return nil ,nil ;};if !_gagb ._aggga {_edcc :=_gagb .traverseObjectData (_fecf );if _edcc !=nil {return nil ,_edcc ;
};};return _fecf ,nil ;};func (_bbb *PdfReader )newPdfActionThreadFromDict (_ffe *_bf .PdfObjectDictionary )(*PdfActionThread ,error ){_beb ,_eafe :=_aac (_ffe .Get ("\u0046"));if _eafe !=nil {return nil ,_eafe ;};return &PdfActionThread {D :_ffe .Get ("\u0044"),B :_ffe .Get ("\u0042"),F :_beb },nil ;
};

// NewPdfAnnotationTrapNet returns a new trapnet annotation.
func NewPdfAnnotationTrapNet ()*PdfAnnotationTrapNet {_fbc :=NewPdfAnnotation ();_bge :=&PdfAnnotationTrapNet {};_bge .PdfAnnotation =_fbc ;_fbc .SetContext (_bge );return _bge ;};

// PartialName returns the partial name of the field.
func (_bdfb *PdfField )PartialName ()string {_cgae :="";if _bdfb .T !=nil {_cgae =_bdfb .T .Decoded ();}else {_bc .Log .Debug ("\u0046\u0069el\u0064\u0020\u006di\u0073\u0073\u0069\u006eg T\u0020fi\u0065\u006c\u0064\u0020\u0028\u0069\u006eco\u006d\u0070\u0061\u0074\u0069\u0062\u006ce\u0029");
};return _cgae ;};

// StandardValidator is the interface that is used for the PDF StandardImplementer validation for the PDF document.
// It is using a CompliancePdfReader which is expected to give more Metadata during reading process.
// NOTE: This implementation is in experimental development state.
// 	Keep in mind that it might change in the subsequent minor versions.
type StandardValidator interface{

// ValidateStandard checks if the input reader
ValidateStandard (_baaba *CompliancePdfReader )error ;};

// ToPdfObject implements interface PdfModel.
func (_egegd *PdfSignatureReference )ToPdfObject ()_bf .PdfObject {_cgcda :=_bf .MakeDict ();_cgcda .SetIfNotNil ("\u0054\u0079\u0070\u0065",_egegd .Type );_cgcda .SetIfNotNil ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u004d\u0065\u0074\u0068\u006f\u0064",_egegd .TransformMethod );
_cgcda .SetIfNotNil ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u0050\u0061\u0072\u0061\u006d\u0073",_egegd .TransformParams );_cgcda .SetIfNotNil ("\u0044\u0061\u0074\u0061",_egegd .Data );_cgcda .SetIfNotNil ("\u0044\u0069\u0067e\u0073\u0074\u004d\u0065\u0074\u0068\u006f\u0064",_egegd .DigestMethod );
return _cgcda ;};

// SetFillImage attach a model.Image to push button.
func (_cfdfd *PdfFieldButton )SetFillImage (image *Image ){if _cfdfd .IsPush (){_cfdfd ._bebf =image ;};};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components.
func (_bdeb *PdfColorspaceSpecialPattern )ColorFromFloats (vals []float64 )(PdfColor ,error ){if _bdeb .UnderlyingCS ==nil {return nil ,_eff .New ("u\u006e\u0064\u0065\u0072\u006c\u0079i\u006e\u0067\u0020\u0043\u0053\u0020\u006e\u006f\u0074 \u0073\u0070\u0065c\u0069f\u0069\u0065\u0064");
};return _bdeb .UnderlyingCS .ColorFromFloats (vals );};

// PdfFunctionType0 uses a sequence of sample values (contained in a stream) to provide an approximation
// for functions whose domains and ranges are bounded. The samples are organized as an m-dimensional
// table in which each entry has n components
type PdfFunctionType0 struct{Domain []float64 ;Range []float64 ;NumInputs int ;NumOutputs int ;Size []int ;BitsPerSample int ;Order int ;Encode []float64 ;Decode []float64 ;_dacc []byte ;_dacb []uint32 ;_fbaac *_bf .PdfObjectStream ;};

// ColorToRGB only converts color used with uncolored patterns (defined in underlying colorspace).  Does not go into the
// pattern objects and convert those.  If that is desired, needs to be done separately.  See for example
// grayscale conversion example in unidoc-examples repo.
func (_abde *PdfColorspaceSpecialPattern )ColorToRGB (color PdfColor )(PdfColor ,error ){_cbcef ,_dfbfd :=color .(*PdfColorPattern );if !_dfbfd {_bc .Log .Debug ("\u0043\u006f\u006c\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0070a\u0074\u0074\u0065\u0072\u006e\u0020\u0028\u0067\u006f\u0074 \u0025\u0054\u0029",color );
return nil ,ErrTypeCheck ;};if _cbcef .Color ==nil {return color ,nil ;};if _abde .UnderlyingCS ==nil {return nil ,_eff .New ("\u0075n\u0064\u0065\u0072\u006cy\u0069\u006e\u0067\u0020\u0043S\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};
return _abde .UnderlyingCS .ColorToRGB (_cbcef .Color );};func _dbeg (_ggbf _eb .StdFont )pdfFontSimple {_cgagd :=_ggbf .Descriptor ();return pdfFontSimple {fontCommon :fontCommon {_fdfb :"\u0054\u0079\u0070e\u0031",_adccf :_ggbf .Name ()},_bdcde :_ggbf .GetMetricsTable (),_acgd :&PdfFontDescriptor {FontName :_bf .MakeName (string (_cgagd .Name )),FontFamily :_bf .MakeName (_cgagd .Family ),FontWeight :_bf .MakeFloat (float64 (_cgagd .Weight )),Flags :_bf .MakeInteger (int64 (_cgagd .Flags )),FontBBox :_bf .MakeArrayFromFloats (_cgagd .BBox [:]),ItalicAngle :_bf .MakeFloat (_cgagd .ItalicAngle ),Ascent :_bf .MakeFloat (_cgagd .Ascent ),Descent :_bf .MakeFloat (_cgagd .Descent ),CapHeight :_bf .MakeFloat (_cgagd .CapHeight ),XHeight :_bf .MakeFloat (_cgagd .XHeight ),StemV :_bf .MakeFloat (_cgagd .StemV ),StemH :_bf .MakeFloat (_cgagd .StemH )},_ddgcg :_ggbf .Encoder ()};
};func (_baba *LTV )validateSig (_fdce *PdfSignature )error {if _fdce ==nil ||_fdce .Contents ==nil ||len (_fdce .Contents .Bytes ())==0{return _af .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065 \u0066\u0069\u0065l\u0064:\u0020\u0025\u0076",_fdce );
};return nil ;};

// ReplacePage replaces the original page to a new page.
func (_gbcc *PdfAppender )ReplacePage (pageNum int ,page *PdfPage ){_eaea :=pageNum -1;for _cfab :=range _gbcc ._bagg {if _cfab ==_eaea {_bcaa :=page .Duplicate ();_fdfcd (_bcaa );_gbcc ._bagg [_cfab ]=_bcaa ;};};};

// HasFontByName checks if has font resource by name.
func (_bedef *PdfPage )HasFontByName (name _bf .PdfObjectName )bool {_bgfa ,_egbff :=_bedef .Resources .Font .(*_bf .PdfObjectDictionary );if !_egbff {return false ;};if _babb :=_bgfa .Get (name );_babb !=nil {return true ;};return false ;};

// NewPdfPageResourcesFromDict creates and returns a new PdfPageResources object
// from the input dictionary.
func NewPdfPageResourcesFromDict (dict *_bf .PdfObjectDictionary )(*PdfPageResources ,error ){_adgba :=NewPdfPageResources ();if _bffec :=dict .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e");_bffec !=nil {_adgba .ExtGState =_bffec ;};if _affcc :=dict .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065");
_affcc !=nil &&!_bf .IsNullObject (_affcc ){_adgba .ColorSpace =_affcc ;};if _affag :=dict .Get ("\u0050a\u0074\u0074\u0065\u0072\u006e");_affag !=nil {_adgba .Pattern =_affag ;};if _gabcf :=dict .Get ("\u0053h\u0061\u0064\u0069\u006e\u0067");_gabcf !=nil {_adgba .Shading =_gabcf ;
};if _fgdd :=dict .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074");_fgdd !=nil {_adgba .XObject =_fgdd ;};if _gaagfa :=_bf .ResolveReference (dict .Get ("\u0046\u006f\u006e\u0074"));_gaagfa !=nil {_adgba .Font =_gaagfa ;};if _afddb :=dict .Get ("\u0050r\u006f\u0063\u0053\u0065\u0074");
_afddb !=nil {_adgba .ProcSet =_afddb ;};if _ggeac :=dict .Get ("\u0050\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_ggeac !=nil {_adgba .Properties =_ggeac ;};return _adgba ,nil ;};

// NewPdfAnnotationLine returns a new line annotation.
func NewPdfAnnotationLine ()*PdfAnnotationLine {_acc :=NewPdfAnnotation ();_dgbb :=&PdfAnnotationLine {};_dgbb .PdfAnnotation =_acc ;_dgbb .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_acc .SetContext (_dgbb );return _dgbb ;};

// PdfColorspaceICCBased format [/ICCBased stream]
//
// The stream shall contain the ICC profile.
// A conforming reader shall support ICC.1:2004:10 as required by PDF 1.7, which will enable it
// to properly render all embedded ICC profiles regardless of the PDF version
//
// In the current implementation, we rely on the alternative colormap provided.
type PdfColorspaceICCBased struct{N int ;Alternate PdfColorspace ;

// If omitted ICC not supported: then use DeviceGray,
// DeviceRGB or DeviceCMYK for N=1,3,4 respectively.
Range []float64 ;Metadata *_bf .PdfObjectStream ;Data []byte ;_ecee *_bf .PdfIndirectObject ;_gadcf *_bf .PdfObjectStream ;};func _fdgc (_aacb _bf .PdfObject )(*PdfColorspaceSpecialPattern ,error ){_bc .Log .Trace ("\u004e\u0065\u0077\u0020\u0050\u0061\u0074\u0074\u0065\u0072n\u0020\u0043\u0053\u0020\u0066\u0072\u006fm\u0020\u006f\u0062\u006a\u003a\u0020\u0025\u0073\u0020\u0025\u0054",_aacb .String (),_aacb );
_abfggc :=NewPdfColorspaceSpecialPattern ();if _ebbg ,_edce :=_aacb .(*_bf .PdfIndirectObject );_edce {_abfggc ._fbed =_ebbg ;};_aacb =_bf .TraceToDirectObject (_aacb );if _badag ,_ffag :=_aacb .(*_bf .PdfObjectName );_ffag {if *_badag !="\u0050a\u0074\u0074\u0065\u0072\u006e"{return nil ,_af .Errorf ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u006e\u0061\u006d\u0065");
};return _abfggc ,nil ;};_febf ,_gefe :=_aacb .(*_bf .PdfObjectArray );if !_gefe {_bc .Log .Error ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0061t\u0074\u0065\u0072\u006e\u0020\u0043\u0053 \u004f\u0062\u006a\u0065\u0063\u0074\u003a\u0020\u0025\u0023\u0076",_aacb );
return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u0050\u0061\u0074\u0074e\u0072n\u0020C\u0053\u0020\u006f\u0062\u006a\u0065\u0063t");};if _febf .Len ()!=1&&_febf .Len ()!=2{_bc .Log .Error ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0050\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0043\u0053\u0020\u0061\u0072\u0072\u0061\u0079\u003a %\u0023\u0076",_febf );
return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0061\u0074\u0074\u0065r\u006e\u0020\u0043\u0053\u0020\u0061\u0072\u0072\u0061\u0079");};_aacb =_febf .Get (0);if _aecf ,_cccbga :=_aacb .(*_bf .PdfObjectName );_cccbga {if *_aecf !="\u0050a\u0074\u0074\u0065\u0072\u006e"{_bc .Log .Error ("\u0049\u006e\u0076al\u0069\u0064\u0020\u0050\u0061\u0074\u0074\u0065\u0072n\u0020C\u0053 \u0061r\u0072\u0061\u0079\u0020\u006e\u0061\u006d\u0065\u003a\u0020\u0025\u0023\u0076",_aecf );
return nil ,_af .Errorf ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u006e\u0061\u006d\u0065");};};if _febf .Len ()> 1{_aacb =_febf .Get (1);_aacb =_bf .TraceToDirectObject (_aacb );_gecec ,_fced :=NewPdfColorspaceFromPdfObject (_aacb );if _fced !=nil {return nil ,_fced ;
};_abfggc .UnderlyingCS =_gecec ;};_bc .Log .Trace ("R\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u0050\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0077i\u0074\u0068\u0020\u0075\u006e\u0064\u0065\u0072\u006c\u0079in\u0067\u0020\u0063s\u003a \u0025\u0054",_abfggc .UnderlyingCS );
return _abfggc ,nil ;};func (_bcff *DSS )add (_aaba *[]*_bf .PdfObjectStream ,_cdcbg map[string ]*_bf .PdfObjectStream ,_aedb [][]byte )([]*_bf .PdfObjectStream ,error ){_dcgde :=make ([]*_bf .PdfObjectStream ,0,len (_aedb ));for _ ,_gbfe :=range _aedb {_ecge ,_dedd :=_dcdg (_gbfe );
if _dedd !=nil {return nil ,_dedd ;};_eaad ,_bbfgf :=_cdcbg [string (_ecge )];if !_bbfgf {_eaad ,_dedd =_bf .MakeStream (_gbfe ,_bf .NewRawEncoder ());if _dedd !=nil {return nil ,_dedd ;};_cdcbg [string (_ecge )]=_eaad ;*_aaba =append (*_aaba ,_eaad );
};_dcgde =append (_dcgde ,_eaad );};return _dcgde ,nil ;};

// GetCatalogStructTreeRoot gets the catalog StructTreeRoot object.
func (_fdece *PdfReader )GetCatalogStructTreeRoot ()(_bf .PdfObject ,bool ){if _fdece ._dbaea ==nil {return nil ,false ;};_agfcfa :=_fdece ._dbaea .Get ("\u0053\u0074\u0072\u0075\u0063\u0074\u0054\u0072\u0065e\u0052\u006f\u006f\u0074");return _agfcfa ,_agfcfa !=nil ;
};

// AppendContentBytes creates a PDF stream from `cs` and appends it to the
// array of streams specified by the pages's Contents entry.
// If `wrapContents` is true, the content stream of the page is wrapped using
// a `q/Q` operator pair, so that its state does not affect the appended
// content stream.
func (_aacbc *PdfPage )AppendContentBytes (cs []byte ,wrapContents bool )error {_cfbgd :=_aacbc .GetContentStreamObjs ();wrapContents =wrapContents &&len (_cfbgd )> 0;_ggdd :=_bf .NewFlateEncoder ();_beccd :=_bf .MakeArray ();if wrapContents {_edcee ,_ddecc :=_bf .MakeStream ([]byte ("\u0071\u000a"),_ggdd );
if _ddecc !=nil {return _ddecc ;};_beccd .Append (_edcee );};_beccd .Append (_cfbgd ...);if wrapContents {_afgfd ,_cceda :=_bf .MakeStream ([]byte ("\u000a\u0051\u000a"),_ggdd );if _cceda !=nil {return _cceda ;};_beccd .Append (_afgfd );};_fcga ,_dbcge :=_bf .MakeStream (cs ,_ggdd );
if _dbcge !=nil {return _dbcge ;};_beccd .Append (_fcga );_aacbc .Contents =_beccd ;return nil ;};func _fbda (_bccbf _bf .PdfObject ){_bc .Log .Debug ("\u006f\u0062\u006a\u003a\u0020\u0025\u0054\u0020\u0025\u0073",_bccbf ,_bccbf .String ());if _egbcd ,_dbecd :=_bccbf .(*_bf .PdfObjectStream );
_dbecd {_acagg ,_bdbd :=_bf .DecodeStream (_egbcd );if _bdbd !=nil {_bc .Log .Debug ("\u0045r\u0072\u006f\u0072\u003a\u0020\u0025v",_bdbd );return ;};_bc .Log .Debug ("D\u0065\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0073",_acagg );}else if _bddb ,_eadeaa :=_bccbf .(*_bf .PdfIndirectObject );
_eadeaa {_bc .Log .Debug ("\u0025\u0054\u0020%\u0076",_bddb .PdfObject ,_bddb .PdfObject );_bc .Log .Debug ("\u0025\u0073",_bddb .PdfObject .String ());};};func (_efff *PdfReader )buildNameNodes (_fgcc *_bf .PdfIndirectObject ,_fedge map[_bf .PdfObject ]struct{})error {if _fgcc ==nil {return nil ;
};if _ ,_degaa :=_fedge [_fgcc ];_degaa {_bc .Log .Debug ("\u0043\u0079\u0063l\u0069\u0063\u0020\u0072e\u0063\u0075\u0072\u0073\u0069\u006f\u006e,\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0028\u0025\u0076\u0029",_fgcc .ObjectNumber );
return nil ;};_fedge [_fgcc ]=struct{}{};_caee ,_effda :=_fgcc .PdfObject .(*_bf .PdfObjectDictionary );if !_effda {return _eff .New ("n\u006f\u0064\u0065\u0020no\u0074 \u0061\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079");};if _egdd ,_dabf :=_bf .GetDict (_caee .Get ("\u0044\u0065\u0073t\u0073"));
_dabf {_dgafc ,_afae :=_bf .GetArray (_egdd .Get ("\u004b\u0069\u0064\u0073"));if !_afae {return _eff .New ("\u0049n\u0076\u0061\u006c\u0069d\u0020\u004b\u0069\u0064\u0073 \u0061r\u0072a\u0079\u0020\u006f\u0062\u006a\u0065\u0063t");};_bc .Log .Trace ("\u004b\u0069\u0064\u0073\u003a\u0020\u0025\u0073",_dgafc );
for _ecdbe ,_eedfce :=range _dgafc .Elements (){_bcdbge ,_fcdge :=_bf .GetIndirect (_eedfce );if !_fcdge {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u0068\u0069\u006c\u0064\u0020n\u006f\u0074\u0020\u0069\u006e\u0064i\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u002d \u0028\u0025\u0073\u0029",_bcdbge );
return _eff .New ("\u0063h\u0069\u006c\u0064\u0020n\u006f\u0074\u0020\u0069\u006ed\u0069r\u0065c\u0074\u0020\u006f\u0062\u006a\u0065\u0063t");};_dgafc .Set (_ecdbe ,_bcdbge );_fbefd :=_efff .buildNameNodes (_bcdbge ,_fedge );if _fbefd !=nil {return _fbefd ;
};};};if _ebgb ,_ecdfeg :=_bf .GetDict (_caee );_ecdfeg {if !_bf .IsNullObject (_ebgb .Get ("\u004b\u0069\u0064\u0073")){if _fcdc ,_effg :=_bf .GetArray (_ebgb .Get ("\u004b\u0069\u0064\u0073"));_effg {for _agfgd ,_edgfd :=range _fcdc .Elements (){if _cbfcf ,_aadb :=_bf .GetIndirect (_edgfd );
_aadb {_fcdc .Set (_agfgd ,_cbfcf );_eccdd :=_efff .buildNameNodes (_cbfcf ,_fedge );if _eccdd !=nil {return _eccdd ;};};};};};};return nil ;};func _gfacg (_abeab *_bf .PdfObjectArray )(float64 ,error ){_cegeg ,_aadba :=_abeab .ToFloat64Array ();if _aadba !=nil {_bc .Log .Debug ("\u0042\u0061\u0064\u0020\u004d\u0061\u0074\u0074\u0065\u0020\u0061\u0072\u0072\u0061\u0079:\u0020m\u0061\u0074\u0074\u0065\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_abeab ,_aadba );
};switch len (_cegeg ){case 1:return _cegeg [0],nil ;case 3:_febee :=PdfColorspaceDeviceRGB {};_cdcca ,_aabac :=_febee .ColorFromFloats (_cegeg );if _aabac !=nil {return 0.0,_aabac ;};return _cdcca .(*PdfColorDeviceRGB ).ToGray ().Val (),nil ;case 4:_cacfe :=PdfColorspaceDeviceCMYK {};
_gfge ,_bccgc :=_cacfe .ColorFromFloats (_cegeg );if _bccgc !=nil {return 0.0,_bccgc ;};_gcfb ,_bccgc :=_cacfe .ColorToRGB (_gfge .(*PdfColorDeviceCMYK ));if _bccgc !=nil {return 0.0,_bccgc ;};return _gcfb .(*PdfColorDeviceRGB ).ToGray ().Val (),nil ;};
_aadba =_eff .New ("\u0062a\u0064 \u004d\u0061\u0074\u0074\u0065\u0020\u0063\u006f\u006c\u006f\u0072");_bc .Log .Error ("\u0074\u006f\u0047ra\u0079\u003a\u0020\u006d\u0061\u0074\u0074\u0065\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_abeab ,_aadba );
return 0.0,_aadba ;};

// ToPdfObject implements interface PdfModel.
func (_egd *PdfAnnotationScreen )ToPdfObject ()_bf .PdfObject {_egd .PdfAnnotation .ToPdfObject ();_dfdg :=_egd ._cdaf ;_fgec :=_dfdg .PdfObject .(*_bf .PdfObjectDictionary );_fgec .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0053\u0063\u0072\u0065\u0065\u006e"));
_fgec .SetIfNotNil ("\u0054",_egd .T );_fgec .SetIfNotNil ("\u004d\u004b",_egd .MK );_fgec .SetIfNotNil ("\u0041",_egd .A );_fgec .SetIfNotNil ("\u0041\u0041",_egd .AA );return _dfdg ;};

// XObjectType represents the type of an XObject.
type XObjectType int ;

// SetOptimizer sets the optimizer to optimize PDF before writing.
func (_ddgee *PdfWriter )SetOptimizer (optimizer Optimizer ){_ddgee ._geaaa =optimizer };

// SetReason sets the `Reason` field of the signature.
func (_bcacc *PdfSignature )SetReason (reason string ){_bcacc .Reason =_bf .MakeString (reason )};

// NewPdfActionGoToE returns a new "go to embedded" action.
func NewPdfActionGoToE ()*PdfActionGoToE {_ffd :=NewPdfAction ();_cab :=&PdfActionGoToE {};_cab .PdfAction =_ffd ;_ffd .SetContext (_cab );return _cab ;};

// NewPdfActionResetForm returns a new "reset form" action.
func NewPdfActionResetForm ()*PdfActionResetForm {_cac :=NewPdfAction ();_ec :=&PdfActionResetForm {};_ec .PdfAction =_cac ;_cac .SetContext (_ec );return _ec ;};

// GetContainingPdfObject returns the container of the shading object (indirect object).
func (_fdffb *PdfShading )GetContainingPdfObject ()_bf .PdfObject {return _fdffb ._daaad };

// GetContainingPdfObject returns the container of the DSS (indirect object).
func (_ccfc *DSS )GetContainingPdfObject ()_bf .PdfObject {return _ccfc ._agagg };

// FieldFlattenOpts defines a set of options which can be used to configure
// the field flattening process.
type FieldFlattenOpts struct{

// FilterFunc allows filtering the form fields used in the flattening
// process. If the filter function returns true, the field is flattened,
// otherwise it is skipped.
// If a non-terminal field is discarded, all of its children (the fields
// present in the Kids array) are discarded as well.
// Non-terminal fields are kept in the AcroForm if one or more of their
// child fields have not been selected for flattening.
// If a filter function is not provided, all form fields are flattened.
FilterFunc FieldFilterFunc ;

// AnnotFilterFunc allows filtering the annotations in the flattening
// process. If the filter function returns true, the annotation is flattened,
// otherwise it is skipped.
AnnotFilterFunc AnnotFilterFunc ;};

// DecodeArray returns the range of color component values in the ICCBased colorspace.
func (_fbdf *PdfColorspaceICCBased )DecodeArray ()[]float64 {return _fbdf .Range };func (_bcfc *PdfReader )newPdfAnnotationPopupFromDict (_facc *_bf .PdfObjectDictionary )(*PdfAnnotationPopup ,error ){_dfg :=PdfAnnotationPopup {};_dfg .Parent =_facc .Get ("\u0050\u0061\u0072\u0065\u006e\u0074");
_dfg .Open =_facc .Get ("\u004f\u0070\u0065\u006e");return &_dfg ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_gcg *PdfAnnotationMovie )ToPdfObject ()_bf .PdfObject {_gcg .PdfAnnotation .ToPdfObject ();_eef :=_gcg ._cdaf ;_edfe :=_eef .PdfObject .(*_bf .PdfObjectDictionary );_edfe .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u004d\u006f\u0076i\u0065"));
_edfe .SetIfNotNil ("\u0054",_gcg .T );_edfe .SetIfNotNil ("\u004d\u006f\u0076i\u0065",_gcg .Movie );_edfe .SetIfNotNil ("\u0041",_gcg .A );return _eef ;};func (_geccg *pdfFontSimple )getFontDescriptor ()*PdfFontDescriptor {if _bbfc :=_geccg ._cedfe ;_bbfc !=nil {return _bbfc ;
};return _geccg ._acgd ;};

// ToPdfObject implements interface PdfModel.
func (_fcfe *PdfAnnotationCircle )ToPdfObject ()_bf .PdfObject {_fcfe .PdfAnnotation .ToPdfObject ();_fccc :=_fcfe ._cdaf ;_cdae :=_fccc .PdfObject .(*_bf .PdfObjectDictionary );_fcfe .PdfAnnotationMarkup .appendToPdfDictionary (_cdae );_cdae .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0043\u0069\u0072\u0063\u006c\u0065"));
_cdae .SetIfNotNil ("\u0042\u0053",_fcfe .BS );_cdae .SetIfNotNil ("\u0049\u0043",_fcfe .IC );_cdae .SetIfNotNil ("\u0042\u0045",_fcfe .BE );_cdae .SetIfNotNil ("\u0052\u0044",_fcfe .RD );return _fccc ;};

// DefaultFont returns the default font, which is currently the built in Helvetica.
func DefaultFont ()*PdfFont {_fcadf ,_eecgb :=_eb .NewStdFontByName (HelveticaName );if !_eecgb {panic ("\u0048\u0065lv\u0065\u0074\u0069c\u0061\u0020\u0073\u0068oul\u0064 a\u006c\u0077\u0061\u0079\u0073\u0020\u0062e \u0061\u0076\u0061\u0069\u006c\u0061\u0062l\u0065");
};_ecddg :=_dbeg (_fcadf );return &PdfFont {_cacce :&_ecddg };};func (_eeae *PdfReader )newPdfAnnotationFileAttachmentFromDict (_eaef *_bf .PdfObjectDictionary )(*PdfAnnotationFileAttachment ,error ){_cba :=PdfAnnotationFileAttachment {};_gga ,_cfef :=_eeae .newPdfAnnotationMarkupFromDict (_eaef );
if _cfef !=nil {return nil ,_cfef ;};_cba .PdfAnnotationMarkup =_gga ;_cba .FS =_eaef .Get ("\u0046\u0053");_cba .Name =_eaef .Get ("\u004e\u0061\u006d\u0065");return &_cba ,nil ;};

// NewPdfOutlineTree returns an initialized PdfOutline tree.
func NewPdfOutlineTree ()*PdfOutline {_acdb :=NewPdfOutline ();_acdb ._bacb =&_acdb ;return _acdb };

// ToPdfObject returns an indirect object containing the signature field dictionary.
func (_gdae *PdfFieldSignature )ToPdfObject ()_bf .PdfObject {if _gdae .PdfAnnotationWidget !=nil {_gdae .PdfAnnotationWidget .ToPdfObject ();};_gdae .PdfField .ToPdfObject ();_adac :=_gdae ._fgcdf ;_eeaf :=_adac .PdfObject .(*_bf .PdfObjectDictionary );
_eeaf .SetIfNotNil ("\u0046\u0054",_bf .MakeName ("\u0053\u0069\u0067"));_eeaf .SetIfNotNil ("\u004c\u006f\u0063\u006b",_gdae .Lock );_eeaf .SetIfNotNil ("\u0053\u0056",_gdae .SV );if _gdae .V !=nil {_eeaf .SetIfNotNil ("\u0056",_gdae .V .ToPdfObject ());
};return _adac ;};

// AddWatermarkImage adds a watermark to the page.
func (_aegcbe *PdfPage )AddWatermarkImage (ximg *XObjectImage ,opt WatermarkImageOptions )error {_bcfcc ,_fafd :=_aegcbe .GetMediaBox ();if _fafd !=nil {return _fafd ;};_cdfge :=_bcfcc .Urx -_bcfcc .Llx ;_ccdd :=_bcfcc .Ury -_bcfcc .Lly ;_cdggg :=float64 (*ximg .Width );
_bggcc :=(_cdfge -_cdggg )/2;if opt .FitToWidth {_cdggg =_cdfge ;_bggcc =0;};_cdege :=_ccdd ;_eebdc :=float64 (0);if opt .PreserveAspectRatio {_cdege =_cdggg *float64 (*ximg .Height )/float64 (*ximg .Width );_eebdc =(_ccdd -_cdege )/2;};if _aegcbe .Resources ==nil {_aegcbe .Resources =NewPdfPageResources ();
};_dbggc :=0;_eefagg :=_bf .PdfObjectName (_af .Sprintf ("\u0049\u006d\u0077%\u0064",_dbggc ));for _aegcbe .Resources .HasXObjectByName (_eefagg ){_dbggc ++;_eefagg =_bf .PdfObjectName (_af .Sprintf ("\u0049\u006d\u0077%\u0064",_dbggc ));};_fafd =_aegcbe .AddImageResource (_eefagg ,ximg );
if _fafd !=nil {return _fafd ;};_dbggc =0;_cgdg :=_bf .PdfObjectName (_af .Sprintf ("\u0047\u0053\u0025\u0064",_dbggc ));for _aegcbe .HasExtGState (_cgdg ){_dbggc ++;_cgdg =_bf .PdfObjectName (_af .Sprintf ("\u0047\u0053\u0025\u0064",_dbggc ));};_agdgb :=_bf .MakeDict ();
_agdgb .Set ("\u0042\u004d",_bf .MakeName ("\u004e\u006f\u0072\u006d\u0061\u006c"));_agdgb .Set ("\u0043\u0041",_bf .MakeFloat (opt .Alpha ));_agdgb .Set ("\u0063\u0061",_bf .MakeFloat (opt .Alpha ));_fafd =_aegcbe .AddExtGState (_cgdg ,_agdgb );if _fafd !=nil {return _fafd ;
};_agcc :=_af .Sprintf ("\u0071\u000a"+"\u002f%\u0073\u0020\u0067\u0073\u000a"+"%\u002e\u0030\u0066\u0020\u0030\u00200\u0020\u0025\u002e\u0030\u0066\u0020\u0025\u002e\u0034f\u0020\u0025\u002e4\u0066 \u0063\u006d\u000a"+"\u002f%\u0073\u0020\u0044\u006f\u000a"+"\u0051",_cgdg ,_cdggg ,_cdege ,_bggcc ,_eebdc ,_eefagg );
_aegcbe .AddContentStreamByString (_agcc );return nil ;};

// ToPdfObject returns the PDF representation of the colorspace.
func (_adbgg *PdfColorspaceSpecialPattern )ToPdfObject ()_bf .PdfObject {if _adbgg .UnderlyingCS ==nil {return _bf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e");};_faed :=_bf .MakeArray (_bf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_faed .Append (_adbgg .UnderlyingCS .ToPdfObject ());
if _adbgg ._fbed !=nil {_adbgg ._fbed .PdfObject =_faed ;return _adbgg ._fbed ;};return _faed ;};func (_eeg *PdfAppender )mergeResources (_cddf ,_ceac _bf .PdfObject ,_ccg map[_bf .PdfObjectName ]_bf .PdfObjectName )_bf .PdfObject {if _ceac ==nil &&_cddf ==nil {return nil ;
};if _ceac ==nil {return _cddf ;};_dcf ,_fdfg :=_bf .GetDict (_ceac );if !_fdfg {return _cddf ;};if _cddf ==nil {_dagf :=_bf .MakeDict ();_dagf .Merge (_dcf );return _ceac ;};_fddc ,_fdfg :=_bf .GetDict (_cddf );if !_fdfg {_bc .Log .Error ("\u0045\u0072\u0072or\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065 \u0069s\u0020n\u006ft\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
_fddc =_bf .MakeDict ();};for _ ,_ggg :=range _dcf .Keys (){if _gebd ,_ecea :=_ccg [_ggg ];_ecea {_fddc .Set (_gebd ,_dcf .Get (_ggg ));}else {_fddc .Set (_ggg ,_dcf .Get (_ggg ));};};return _fddc ;};func (_dfbbe *DSS )addCerts (_fbfbd [][]byte )([]*_bf .PdfObjectStream ,error ){return _dfbbe .add (&_dfbbe .Certs ,_dfbbe ._dbae ,_fbfbd );
};func _ceacbf (_addba _bf .PdfObject )(*PdfShading ,error ){_eggg :=&PdfShading {};var _ebecd *_bf .PdfObjectDictionary ;if _agcdff ,_gabeb :=_bf .GetIndirect (_addba );_gabeb {_eggg ._daaad =_agcdff ;_bcabe ,_fbbdd :=_agcdff .PdfObject .(*_bf .PdfObjectDictionary );
if !_fbbdd {_bc .Log .Debug ("\u004f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069c\u0074i\u006f\u006e\u0061\u0072\u0079\u0020\u0074y\u0070\u0065");return nil ,_bf .ErrTypeError ;};_ebecd =_bcabe ;}else if _eebb ,_bgbde :=_bf .GetStream (_addba );
_bgbde {_eggg ._daaad =_eebb ;_ebecd =_eebb .PdfObjectDictionary ;}else if _aafge ,_ffdag :=_bf .GetDict (_addba );_ffdag {_eggg ._daaad =_aafge ;_ebecd =_aafge ;}else {_bc .Log .Debug ("O\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0075\u006e\u0065\u0078\u0070e\u0063\u0074\u0065d\u0020(\u0025\u0054\u0029",_addba );
return nil ,_bf .ErrTypeError ;};if _ebecd ==nil {_bc .Log .Debug ("\u0044i\u0063t\u0069\u006f\u006e\u0061\u0072y\u0020\u006di\u0073\u0073\u0069\u006e\u0067");return nil ,_eff .New ("\u0064\u0069\u0063t\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_addba =_ebecd .Get ("S\u0068\u0061\u0064\u0069\u006e\u0067\u0054\u0079\u0070\u0065");if _addba ==nil {_bc .Log .Debug ("\u0052\u0065q\u0075\u0069\u0072\u0065\u0064\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0079\u0070\u0065\u0020\u006d\u0069\u0073si\u006e\u0067");
return nil ,ErrRequiredAttributeMissing ;};_addba =_bf .TraceToDirectObject (_addba );_cafgg ,_ggfaa :=_addba .(*_bf .PdfObjectInteger );if !_ggfaa {_bc .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0066o\u0072 \u0073h\u0061d\u0069\u006e\u0067\u0020\u0074\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u0029",_addba );
return nil ,_bf .ErrTypeError ;};if *_cafgg < 1||*_cafgg > 7{_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0079\u0070\u0065\u002c\u0020\u006e\u006ft\u0020\u0031\u002d\u0037\u0020(\u0067\u006ft\u0020\u0025\u0064\u0029",*_cafgg );
return nil ,_bf .ErrTypeError ;};_eggg .ShadingType =_cafgg ;_addba =_ebecd .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065");if _addba ==nil {_bc .Log .Debug ("\u0052\u0065\u0071\u0075\u0069\u0072e\u0064\u0020\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065\u0020e\u006e\u0074\u0072\u0079\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");
return nil ,ErrRequiredAttributeMissing ;};_acacb ,_cbde :=NewPdfColorspaceFromPdfObject (_addba );if _cbde !=nil {_bc .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065: \u0025\u0076",_cbde );
return nil ,_cbde ;};_eggg .ColorSpace =_acacb ;_addba =_ebecd .Get ("\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064");if _addba !=nil {_addba =_bf .TraceToDirectObject (_addba );_bccbc ,_ggggf :=_addba .(*_bf .PdfObjectArray );if !_ggggf {_bc .Log .Debug ("\u0042\u0061\u0063\u006b\u0067r\u006f\u0075\u006e\u0064\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054)",_addba );
return nil ,_bf .ErrTypeError ;};_eggg .Background =_bccbc ;};_addba =_ebecd .Get ("\u0042\u0042\u006f\u0078");if _addba !=nil {_addba =_bf .TraceToDirectObject (_addba );_faad ,_gccgb :=_addba .(*_bf .PdfObjectArray );if !_gccgb {_bc .Log .Debug ("\u0042\u0061\u0063\u006b\u0067r\u006f\u0075\u006e\u0064\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0062\u0079\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054)",_addba );
return nil ,_bf .ErrTypeError ;};_bcbgc ,_ccccb :=NewPdfRectangle (*_faad );if _ccccb !=nil {_bc .Log .Debug ("\u0042\u0042\u006f\u0078\u0020\u0065\u0072\u0072\u006fr\u003a\u0020\u0025\u0076",_ccccb );return nil ,_ccccb ;};_eggg .BBox =_bcbgc ;};_addba =_ebecd .Get ("\u0041n\u0074\u0069\u0041\u006c\u0069\u0061s");
if _addba !=nil {_addba =_bf .TraceToDirectObject (_addba );_gaegc ,_fecfb :=_addba .(*_bf .PdfObjectBool );if !_fecfb {_bc .Log .Debug ("A\u006e\u0074\u0069\u0041\u006c\u0069\u0061\u0073\u0020i\u006e\u0076\u0061\u006c\u0069\u0064\u0020ty\u0070\u0065\u002c\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020bo\u006f\u006c \u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_addba );
return nil ,_bf .ErrTypeError ;};_eggg .AntiAlias =_gaegc ;};switch *_cafgg {case 1:_ecfgb ,_aadaa :=_edded (_ebecd );if _aadaa !=nil {return nil ,_aadaa ;};_ecfgb .PdfShading =_eggg ;_eggg ._bcgbde =_ecfgb ;return _eggg ,nil ;case 2:_fcaac ,_abcg :=_degfd (_ebecd );
if _abcg !=nil {return nil ,_abcg ;};_fcaac .PdfShading =_eggg ;_eggg ._bcgbde =_fcaac ;return _eggg ,nil ;case 3:_cfdbcc ,_becdb :=_bbgdb (_ebecd );if _becdb !=nil {return nil ,_becdb ;};_cfdbcc .PdfShading =_eggg ;_eggg ._bcgbde =_cfdbcc ;return _eggg ,nil ;
case 4:_efgad ,_bcdce :=_cdded (_ebecd );if _bcdce !=nil {return nil ,_bcdce ;};_efgad .PdfShading =_eggg ;_eggg ._bcgbde =_efgad ;return _eggg ,nil ;case 5:_abbfb ,_fccga :=_abff (_ebecd );if _fccga !=nil {return nil ,_fccga ;};_abbfb .PdfShading =_eggg ;
_eggg ._bcgbde =_abbfb ;return _eggg ,nil ;case 6:_fcac ,_cgecf :=_gbfdd (_ebecd );if _cgecf !=nil {return nil ,_cgecf ;};_fcac .PdfShading =_eggg ;_eggg ._bcgbde =_fcac ;return _eggg ,nil ;case 7:_addad ,_gabcg :=_gegdb (_ebecd );if _gabcg !=nil {return nil ,_gabcg ;
};_addad .PdfShading =_eggg ;_eggg ._bcgbde =_addad ;return _eggg ,nil ;};return nil ,_eff .New ("u\u006ek\u006e\u006f\u0077\u006e\u0020\u0073\u0068\u0061d\u0069\u006e\u0067\u0020ty\u0070\u0065");};

// NewPdfDate returns a new PdfDate object from a PDF date string (see 7.9.4 Dates).
// format: "D: YYYYMMDDHHmmSSOHH'mm"
func NewPdfDate (dateStr string )(PdfDate ,error ){_dgggb ,_efaeg :=_bca .ParsePdfTime (dateStr );if _efaeg !=nil {return PdfDate {},_efaeg ;};return NewPdfDateFromTime (_dgggb );};

// PdfActionGoToR represents a GoToR action.
type PdfActionGoToR struct{*PdfAction ;F *PdfFilespec ;D _bf .PdfObject ;NewWindow _bf .PdfObject ;};func _fdfcd (_fcefe *PdfPage ){_aegag :=_bad .GetLicenseKey ();if _aegag !=nil &&_aegag .IsLicensed (){return ;};_gabb :=_bf .PdfObjectName ("\u0055\u0046\u0031");
if !_fcefe .Resources .HasFontByName (_gabb ){_fcefe .Resources .SetFontByName (_gabb ,DefaultFont ().ToPdfObject ());};var _faaegc []string ;_faaegc =append (_faaegc ,"\u0071");_faaegc =append (_faaegc ,"\u0042\u0054");_faaegc =append (_faaegc ,_af .Sprintf ("\u002f%\u0073\u0020\u0031\u0034\u0020\u0054f",_gabb .String ()));
_faaegc =append (_faaegc ,"\u0031\u0020\u0030\u0020\u0030\u0020\u0072\u0067");_faaegc =append (_faaegc ,"\u0031\u0030\u0020\u0031\u0030\u0020\u0054\u0064");_ecddc :="\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064\u0020\u0055\u006e\u0069\u0044o\u0063\u0020\u002d\u0020\u0047\u0065\u0074\u0020\u0061\u0020\u006c\u0069\u0063e\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073:/\u002f\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f";
_faaegc =append (_faaegc ,_af .Sprintf ("\u0028%\u0073\u0029\u0020\u0054\u006a",_ecddc ));_faaegc =append (_faaegc ,"\u0045\u0054");_faaegc =append (_faaegc ,"\u0051");_cbcdf :=_gf .Join (_faaegc ,"\u000a");_fcefe .AddContentStreamByString (_cbcdf );_fcefe .ToPdfObject ();
};func (_bfebb *pdfCIDFontType0 )baseFields ()*fontCommon {return &_bfebb .fontCommon };

// GetOptimizer returns current PDF optimizer.
func (_dgbcd *PdfWriter )GetOptimizer ()Optimizer {return _dgbcd ._geaaa };

// PdfShadingType3 is a Radial shading.
type PdfShadingType3 struct{*PdfShading ;Coords *_bf .PdfObjectArray ;Domain *_bf .PdfObjectArray ;Function []PdfFunction ;Extend *_bf .PdfObjectArray ;};

// DecodeArray returns the component range values for the Separation colorspace.
func (_dbca *PdfColorspaceSpecialSeparation )DecodeArray ()[]float64 {return []float64 {0,1.0}};

// ToInteger convert to an integer format.
func (_gfbd *PdfColorDeviceCMYK )ToInteger (bits int )[4]uint32 {_febe :=_fg .Pow (2,float64 (bits ))-1;return [4]uint32 {uint32 (_febe *_gfbd .C ()),uint32 (_febe *_gfbd .M ()),uint32 (_febe *_gfbd .Y ()),uint32 (_febe *_gfbd .K ())};};

// ToPdfObject implements interface PdfModel.
func (_effgb *PdfTransformParamsDocMDP )ToPdfObject ()_bf .PdfObject {_cecda :=_bf .MakeDict ();_cecda .SetIfNotNil ("\u0054\u0079\u0070\u0065",_effgb .Type );_cecda .SetIfNotNil ("\u0056",_effgb .V );_cecda .SetIfNotNil ("\u0050",_effgb .P );return _cecda ;
};

// GetOutlines returns a high-level Outline object, based on the outline tree
// of the reader.
func (_gbfcd *PdfReader )GetOutlines ()(*Outline ,error ){if _gbfcd ==nil {return nil ,_eff .New ("\u0063\u0061n\u006e\u006f\u0074\u0020c\u0072\u0065a\u0074\u0065\u0020\u006f\u0075\u0074\u006c\u0069n\u0065\u0020\u0066\u0072\u006f\u006d\u0020\u006e\u0069\u006c\u0020\u0072e\u0061\u0064\u0065\u0072");
};_ggea :=_gbfcd .GetOutlineTree ();if _ggea ==nil {return nil ,_eff .New ("\u0074\u0068\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0072\u0065\u0061\u0064e\u0072\u0020\u0064\u006f\u0065\u0073\u0020n\u006f\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u006e\u0020o\u0075\u0074\u006c\u0069\u006e\u0065\u0020\u0074\u0072\u0065\u0065");
};var _affgegf func (_dagea *PdfOutlineTreeNode ,_fgbge *[]*OutlineItem );_affgegf =func (_cebbb *PdfOutlineTreeNode ,_acgdfe *[]*OutlineItem ){if _cebbb ==nil {return ;};if _cebbb ._bacb ==nil {_bc .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020m\u0069\u0073\u0073\u0069ng \u006fut\u006c\u0069\u006e\u0065\u0020\u0065\u006etr\u0079\u0020\u0063\u006f\u006e\u0074\u0065x\u0074");
return ;};var _gabfb *OutlineItem ;if _cacca ,_gedab :=_cebbb ._bacb .(*PdfOutlineItem );_gedab {_becea :=_cacca .Dest ;if (_becea ==nil ||_bf .IsNullObject (_becea ))&&_cacca .A !=nil {if _aeeaa ,_acafg :=_bf .GetDict (_cacca .A );_acafg {if _becgc ,_dbacd :=_bf .GetArray (_aeeaa .Get ("\u0044"));
_dbacd {_becea =_becgc ;}else {_gacfg ,_fgdea :=_bf .GetString (_aeeaa .Get ("\u0044"));if !_fgdea {return ;};_fafbf ,_fgdea :=_gbfcd ._dbaea .Get ("\u004e\u0061\u006de\u0073").(*_bf .PdfObjectReference );if !_fgdea {return ;};_badaf ,_bbgea :=_gbfcd ._gafdb .LookupByReference (*_fafbf );
if _bbgea !=nil {_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0072\u0065\u0061\u0064\u0020\u006e\u0061\u006d\u0065\u0073\u0020\u0072\u0065\u0066\u0065\u0072e\u006e\u0063\u0065\u0020\u0028\u0025\u0073\u0029",_bbgea .Error ());
return ;};_eabdg ,_fgdea :=_badaf .(*_bf .PdfIndirectObject );if !_fgdea {return ;};_acaac :=map[_bf .PdfObject ]struct{}{};_bbgea =_gbfcd .buildNameNodes (_eabdg ,_acaac );if _bbgea !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0062\u0075\u0069\u006c\u0064\u0020\u006ea\u006d\u0065\u0020\u006e\u006fd\u0065\u0073 \u0028\u0025\u0073\u0029",_bbgea .Error ());
return ;};for _gbbe :=range _acaac {_cadc ,_bfgaf :=_bf .GetDict (_gbbe );if !_bfgaf {continue ;};_dgcaed ,_bfgaf :=_bf .GetArray (_cadc .Get ("\u004e\u0061\u006de\u0073"));if !_bfgaf {continue ;};for _cgeef ,_afacd :=range _dgcaed .Elements (){switch _afacd .(type ){case *_bf .PdfObjectString :if _afacd .String ()==_gacfg .String (){if _faeab :=_dgcaed .Get (_cgeef +1);
_faeab !=nil {if _dcfcfd ,_gbad :=_bf .GetDict (_faeab );_gbad {_becea =_dcfcfd .Get ("\u0044");break ;};};};};};};};};};var _fdcc OutlineDest ;if _becea !=nil &&!_bf .IsNullObject (_becea ){if _bcfbb ,_cfefdd :=_gbcbf (_becea ,_gbfcd );_cfefdd ==nil {_fdcc =*_bcfbb ;
}else {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063o\u0075\u006c\u0064 \u006e\u006f\u0074\u0020p\u0061\u0072\u0073\u0065\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065\u0020\u0064\u0065\u0073\u0074\u0020\u0028\u0025\u0076\u0029\u003a\u0020\u0025\u0076",_becea ,_cfefdd );
};};_gabfb =NewOutlineItem (_cacca .Title .Decoded (),_fdcc );*_acgdfe =append (*_acgdfe ,_gabfb );if _cacca .Next !=nil {_affgegf (_cacca .Next ,_acgdfe );};};if _cebbb .First !=nil {if _gabfb !=nil {_acgdfe =&_gabfb .Entries ;};_affgegf (_cebbb .First ,_acgdfe );
};};_dfgaa :=NewOutline ();_affgegf (_ggea ,&_dfgaa .Entries );return _dfgaa ,nil ;};func (_bbad *PdfReader )newPdfAnnotationLinkFromDict (_bdea *_bf .PdfObjectDictionary )(*PdfAnnotationLink ,error ){_fea :=PdfAnnotationLink {};_fea .A =_bdea .Get ("\u0041");
_fea .Dest =_bdea .Get ("\u0044\u0065\u0073\u0074");_fea .H =_bdea .Get ("\u0048");_fea .PA =_bdea .Get ("\u0050\u0041");_fea .QuadPoints =_bdea .Get ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073");_fea .BS =_bdea .Get ("\u0042\u0053");
return &_fea ,nil ;};func _cbabg (_bbcb StdFontName )(pdfFontSimple ,error ){_edbea ,_egdf :=_eb .NewStdFontByName (_bbcb );if !_egdf {return pdfFontSimple {},ErrFontNotSupported ;};_eafa :=_dbeg (_edbea );return _eafa ,nil ;};

// HasColorspaceByName checks if the colorspace with the specified name exists in the page resources.
func (_fdcgd *PdfPageResources )HasColorspaceByName (keyName _bf .PdfObjectName )bool {_dbcgd ,_cacde :=_fdcgd .GetColorspaces ();if _cacde !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0072\u0061\u0063\u0065: \u0025\u0076",_cacde );
return false ;};if _dbcgd ==nil {return false ;};_ ,_ebfad :=_dbcgd .Colorspaces [string (keyName )];return _ebfad ;};type pdfCIDFontType0 struct{fontCommon ;_adcecg *_bf .PdfIndirectObject ;_gbca _faf .TextEncoder ;

// Table 117 – Entries in a CIDFont dictionary (page 269)
// (Required) Dictionary that defines the character collection of the CIDFont.
// See Table 116.
CIDSystemInfo *_bf .PdfObjectDictionary ;

// Glyph metrics fields (optional).
DW _bf .PdfObject ;W _bf .PdfObject ;DW2 _bf .PdfObject ;W2 _bf .PdfObject ;_decg map[_faf .CharCode ]float64 ;_ededd float64 ;};func _bbbbd (_dfeef _bf .PdfObject )(PdfFunction ,error ){_dfeef =_bf .ResolveReference (_dfeef );if _bgec ,_cfcce :=_dfeef .(*_bf .PdfObjectStream );
_cfcce {_ccdf :=_bgec .PdfObjectDictionary ;_ebae ,_bdacd :=_ccdf .Get ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065").(*_bf .PdfObjectInteger );if !_bdacd {_bc .Log .Error ("F\u0075\u006e\u0063\u0074\u0069\u006fn\u0054\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006di\u0073s\u0069\u006e\u0067");
return nil ,_eff .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072 \u006f\u0072\u0020\u006d\u0069\u0073\u0073i\u006e\u0067");};if *_ebae ==0{return _dbefc (_bgec );}else if *_ebae ==4{return _fdfee (_bgec );
}else {return nil ,_eff .New ("i\u006e\u0076\u0061\u006cid\u0020f\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0074\u0079\u0070\u0065");};}else if _efade ,_dagb :=_dfeef .(*_bf .PdfIndirectObject );_dagb {_eaefa ,_ceabc :=_efade .PdfObject .(*_bf .PdfObjectDictionary );
if !_ceabc {_bc .Log .Error ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e\u0020\u0049\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020o\u0062\u006a\u0065\u0063\u0074\u0020\u006eo\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006eg\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
return nil ,_eff .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072 \u006f\u0072\u0020\u006d\u0069\u0073\u0073i\u006e\u0067");};_eaffb ,_ceabc :=_eaefa .Get ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065").(*_bf .PdfObjectInteger );
if !_ceabc {_bc .Log .Error ("F\u0075\u006e\u0063\u0074\u0069\u006fn\u0054\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006di\u0073s\u0069\u006e\u0067");return nil ,_eff .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072 \u006f\u0072\u0020\u006d\u0069\u0073\u0073i\u006e\u0067");
};if *_eaffb ==2{return _dcgfc (_efade );}else if *_eaffb ==3{return _baef (_efade );}else {return nil ,_eff .New ("i\u006e\u0076\u0061\u006cid\u0020f\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0074\u0079\u0070\u0065");};}else if _dgcf ,_cgfe :=_dfeef .(*_bf .PdfObjectDictionary );
_cgfe {_feed ,_dafag :=_dgcf .Get ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065").(*_bf .PdfObjectInteger );if !_dafag {_bc .Log .Error ("F\u0075\u006e\u0063\u0074\u0069\u006fn\u0054\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006di\u0073s\u0069\u006e\u0067");
return nil ,_eff .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072 \u006f\u0072\u0020\u006d\u0069\u0073\u0073i\u006e\u0067");};if *_feed ==2{return _dcgfc (_dgcf );}else if *_feed ==3{return _baef (_dgcf );
}else {return nil ,_eff .New ("i\u006e\u0076\u0061\u006cid\u0020f\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0074\u0079\u0070\u0065");};}else {_bc .Log .Debug ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e\u0020\u0054\u0079\u0070\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0023\u0076",_dfeef );
return nil ,_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// components. The slice should contain a single PdfObjectFloat element in
// range 0-1.
func (_gggf *PdfColorspaceCalGray )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_feea ,_ceaaa :=_bf .GetNumbersAsFloat (objects );
if _ceaaa !=nil {return nil ,_ceaaa ;};return _gggf .ColorFromFloats (_feea );};

// GetContext returns the PdfField context which is the more specific field data type, e.g. PdfFieldButton
// for a button field.
func (_ebbbb *PdfField )GetContext ()PdfModel {return _ebbbb ._gfbeb };

// GetContainingPdfObject returns the container of the PdfAcroForm (indirect object).
func (_cbcb *PdfAcroForm )GetContainingPdfObject ()_bf .PdfObject {return _cbcb ._ccfccd };var _fbgab =map[string ]struct{}{"\u0046\u0054":{},"\u004b\u0069\u0064\u0073":{},"\u0054":{},"\u0054\u0055":{},"\u0054\u004d":{},"\u0046\u0066":{},"\u0056":{},"\u0044\u0056":{},"\u0041\u0041":{},"\u0044\u0041":{},"\u0051":{},"\u0044\u0053":{},"\u0052\u0056":{}};
func (_efbf *PdfColorspaceDeviceRGB )String ()string {return "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";};

// GetBorderWidth returns the border style's width.
func (_egdc *PdfBorderStyle )GetBorderWidth ()float64 {if _egdc .W ==nil {return 1;};return *_egdc .W ;};func (_fafgd *PdfWriter )setWriter (_bacbe _ag .Writer ){_fafgd ._feddc =_fafgd ._cffb ;_fafgd ._fddfe =_ee .NewWriter (_bacbe );};func (_ffcec *PdfWriter )addObjects (_agaa _bf .PdfObject )error {_bc .Log .Trace ("\u0041d\u0064i\u006e\u0067\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0073\u0021");
if _cgafg ,_eecf :=_agaa .(*_bf .PdfIndirectObject );_eecf {_bc .Log .Trace ("\u0049\u006e\u0064\u0069\u0072\u0065\u0063\u0074");_bc .Log .Trace ("\u002d \u0025\u0073\u0020\u0028\u0025\u0070)",_agaa ,_cgafg );_bc .Log .Trace ("\u002d\u0020\u0025\u0073",_cgafg .PdfObject );
if _ffcec .addObject (_cgafg ){_acdc :=_ffcec .addObjects (_cgafg .PdfObject );if _acdc !=nil {return _acdc ;};};return nil ;};if _cfbcea ,_bbdbaf :=_agaa .(*_bf .PdfObjectStream );_bbdbaf {_bc .Log .Trace ("\u0053\u0074\u0072\u0065\u0061\u006d");_bc .Log .Trace ("\u002d \u0025\u0073\u0020\u0025\u0070",_agaa ,_agaa );
if _ffcec .addObject (_cfbcea ){_ceeff :=_ffcec .addObjects (_cfbcea .PdfObjectDictionary );if _ceeff !=nil {return _ceeff ;};};return nil ;};if _abdec ,_bgabb :=_agaa .(*_bf .PdfObjectDictionary );_bgabb {_bc .Log .Trace ("\u0044\u0069\u0063\u0074");_bc .Log .Trace ("\u002d\u0020\u0025\u0073",_agaa );
for _ ,_gaabc :=range _abdec .Keys (){_caecf :=_abdec .Get (_gaabc );if _acfgc ,_cggda :=_caecf .(*_bf .PdfObjectReference );_cggda {_caecf =_acfgc .Resolve ();_abdec .Set (_gaabc ,_caecf );};if _gaabc !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _dgceeb :=_ffcec .addObjects (_caecf );
_dgceeb !=nil {return _dgceeb ;};}else {if _ ,_agcfab :=_caecf .(*_bf .PdfObjectNull );_agcfab {continue ;};if _defef :=_ffcec .hasObject (_caecf );!_defef {_bc .Log .Debug ("P\u0061\u0072\u0065\u006e\u0074\u0020o\u0062\u006a\u0020\u006e\u006f\u0074 \u0061\u0064\u0064\u0065\u0064\u0020\u0079e\u0074\u0021\u0021\u0020\u0025\u0054\u0020\u0025\u0070\u0020%\u0076",_caecf ,_caecf ,_caecf );
_ffcec ._fdbad [_caecf ]=append (_ffcec ._fdbad [_caecf ],_abdec );};};};return nil ;};if _eebdca ,_fgedg :=_agaa .(*_bf .PdfObjectArray );_fgedg {_bc .Log .Trace ("\u0041\u0072\u0072a\u0079");_bc .Log .Trace ("\u002d\u0020\u0025\u0073",_agaa );if _eebdca ==nil {return _eff .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};for _beaaf ,_edbf :=range _eebdca .Elements (){if _dccfg ,_deaeb :=_edbf .(*_bf .PdfObjectReference );_deaeb {_edbf =_dccfg .Resolve ();_eebdca .Set (_beaaf ,_edbf );};if _beafd :=_ffcec .addObjects (_edbf );_beafd !=nil {return _beafd ;};};return nil ;
};if _ ,_gdfcb :=_agaa .(*_bf .PdfObjectReference );_gdfcb {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0061\u006e\u006e\u006f\u0074 \u0062\u0065\u0020\u0061\u0020\u0072e\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u002d\u0020\u0067\u006f\u0074 \u0025\u0023\u0076\u0021",_agaa );
return _eff .New ("r\u0065\u0066\u0065\u0072en\u0063e\u0020\u006e\u006f\u0074\u0020a\u006c\u006c\u006f\u0077\u0065\u0064");};return nil ;};

// ToPdfObject returns the PDF representation of the function.
func (_dceb *PdfFunctionType2 )ToPdfObject ()_bf .PdfObject {_adfbc :=_bf .MakeDict ();_adfbc .Set ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065",_bf .MakeInteger (2));_gabab :=&_bf .PdfObjectArray {};for _ ,_edaaf :=range _dceb .Domain {_gabab .Append (_bf .MakeFloat (_edaaf ));
};_adfbc .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_gabab );if _dceb .Range !=nil {_dcda :=&_bf .PdfObjectArray {};for _ ,_bgagc :=range _dceb .Range {_dcda .Append (_bf .MakeFloat (_bgagc ));};_adfbc .Set ("\u0052\u0061\u006eg\u0065",_dcda );};if _dceb .C0 !=nil {_ddba :=&_bf .PdfObjectArray {};
for _ ,_cfdbbb :=range _dceb .C0 {_ddba .Append (_bf .MakeFloat (_cfdbbb ));};_adfbc .Set ("\u0043\u0030",_ddba );};if _dceb .C1 !=nil {_gabdg :=&_bf .PdfObjectArray {};for _ ,_dedcf :=range _dceb .C1 {_gabdg .Append (_bf .MakeFloat (_dedcf ));};_adfbc .Set ("\u0043\u0031",_gabdg );
};_adfbc .Set ("\u004e",_bf .MakeFloat (_dceb .N ));if _dceb ._afceg !=nil {_dceb ._afceg .PdfObject =_adfbc ;return _dceb ._afceg ;};return _adfbc ;};

// CharMetrics represents width and height metrics of a glyph.
type CharMetrics =_eb .CharMetrics ;

// SetPdfCreator sets the Creator attribute of the output PDF.
func SetPdfCreator (creator string ){_ggeae .Lock ();defer _ggeae .Unlock ();_afadd =creator };

// ToPdfObject implements interface PdfModel.
func (_gbega *PdfAnnotationRichMedia )ToPdfObject ()_bf .PdfObject {_gbega .PdfAnnotation .ToPdfObject ();_gfbg :=_gbega ._cdaf ;_geef :=_gfbg .PdfObject .(*_bf .PdfObjectDictionary );_geef .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0052i\u0063\u0068\u004d\u0065\u0064\u0069a"));
_geef .SetIfNotNil ("\u0052\u0069\u0063\u0068\u004d\u0065\u0064\u0069\u0061\u0053\u0065\u0074t\u0069\u006e\u0067\u0073",_gbega .RichMediaSettings );_geef .SetIfNotNil ("\u0052\u0069c\u0068\u004d\u0065d\u0069\u0061\u0043\u006f\u006e\u0074\u0065\u006e\u0074",_gbega .RichMediaContent );
return _gfbg ;};

// ImageToRGB convert an indexed image to RGB.
func (_dbcd *PdfColorspaceSpecialIndexed )ImageToRGB (img Image )(Image ,error ){N :=_dbcd .Base .GetNumComponents ();if N < 1{return Image {},_af .Errorf ("\u0062\u0061d \u0062\u0061\u0073e\u0020\u0063\u006f\u006cors\u0070ac\u0065\u0020\u004e\u0075\u006d\u0043\u006fmp\u006f\u006e\u0065\u006e\u0074\u0073\u003d%\u0064",N );
};_gcaa :=_ff .NewImageBase (int (img .Width ),int (img .Height ),8,N ,nil ,img ._gfegf ,img ._dbcfb );_cbagc :=_de .NewReader (img .getBase ());_gbfa :=_de .NewWriter (_gcaa );var (_bbga uint32 ;_aeea int ;_gefg error ;);for {_bbga ,_gefg =_cbagc .ReadSample ();
if _gefg ==_ag .EOF {break ;}else if _gefg !=nil {return img ,_gefg ;};_aeea =int (_bbga );_bc .Log .Trace ("\u0049\u006ed\u0065\u0078\u0065\u0064\u003a\u0020\u0069\u006e\u0064\u0065\u0078\u003d\u0025\u0064\u0020\u004e\u003d\u0025\u0064\u0020\u006c\u0075t=\u0025\u0064",_aeea ,N ,len (_dbcd ._fddea ));
if (_aeea +1)*N > len (_dbcd ._fddea ){_aeea =len (_dbcd ._fddea )/N -1;_bc .Log .Trace ("C\u006c\u0069\u0070\u0070in\u0067 \u0074\u006f\u0020\u0069\u006ed\u0065\u0078\u003a\u0020\u0025\u0064",_aeea );if _aeea < 0{_bc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069p\u0020\u0069\u006e\u0064\u0065\u0078.\u0020\u0049\u0073\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006ce\u0020\u0064\u0061\u006d\u0061\u0067\u0065\u0064\u003f");
break ;};};for _egfg :=_aeea *N ;_egfg < (_aeea +1)*N ;_egfg ++{if _gefg =_gbfa .WriteSample (uint32 (_dbcd ._fddea [_egfg ]));_gefg !=nil {return img ,_gefg ;};};};return _dbcd .Base .ImageToRGB (_cgfba (&_gcaa ));};

// PdfShadingPattern is a Shading patterns that provide a smooth transition between colors across an area to be painted,
// i.e. color(x,y) = f(x,y) at each point.
// It is a type 2 pattern (PatternType = 2).
type PdfShadingPattern struct{*PdfPattern ;Shading *PdfShading ;Matrix *_bf .PdfObjectArray ;ExtGState _bf .PdfObject ;};

// ToPdfObject implements interface PdfModel.
func (_eded *PdfAnnotation3D )ToPdfObject ()_bf .PdfObject {_eded .PdfAnnotation .ToPdfObject ();_aaea :=_eded ._cdaf ;_bagb :=_aaea .PdfObject .(*_bf .PdfObjectDictionary );_bagb .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0033\u0044"));
_bagb .SetIfNotNil ("\u0033\u0044\u0044",_eded .T3DD );_bagb .SetIfNotNil ("\u0033\u0044\u0056",_eded .T3DV );_bagb .SetIfNotNil ("\u0033\u0044\u0041",_eded .T3DA );_bagb .SetIfNotNil ("\u0033\u0044\u0049",_eded .T3DI );_bagb .SetIfNotNil ("\u0033\u0044\u0042",_eded .T3DB );
return _aaea ;};type pdfSignDictionary struct{*_bf .PdfObjectDictionary ;_efdd *SignatureHandler ;_debae *PdfSignature ;_caeadf int64 ;_fccba int ;_ddbc int ;_bgbeg int ;_bcfab int ;};

// SetForms sets the Acroform for a PDF file.
func (_beecb *PdfWriter )SetForms (form *PdfAcroForm )error {_beecb ._dadgd =form ;return nil };

// NewPdfColorspaceSpecialSeparation returns a new separation color.
func NewPdfColorspaceSpecialSeparation ()*PdfColorspaceSpecialSeparation {_bcfd :=&PdfColorspaceSpecialSeparation {};return _bcfd ;};

// NewPdfFontFromPdfObject loads a PdfFont from the dictionary `fontObj`.  If there is a problem an
// error is returned.
func NewPdfFontFromPdfObject (fontObj _bf .PdfObject )(*PdfFont ,error ){return _decaa (fontObj ,true )};

// GetContainingPdfObject returns the container of the outline item (indirect object).
func (_efge *PdfOutlineItem )GetContainingPdfObject ()_bf .PdfObject {return _efge ._aabdd };

// FieldAppearanceGenerator generates appearance stream for a given field.
type FieldAppearanceGenerator interface{ContentStreamWrapper ;GenerateAppearanceDict (_cccgd *PdfAcroForm ,_afafb *PdfField ,_cfcd *PdfAnnotationWidget )(*_bf .PdfObjectDictionary ,error );};func _dbefc (_ecbgce *_bf .PdfObjectStream )(*PdfFunctionType0 ,error ){_gddf :=&PdfFunctionType0 {};
_gddf ._fbaac =_ecbgce ;_dbbfe :=_ecbgce .PdfObjectDictionary ;_agdg ,_gdebf :=_bf .TraceToDirectObject (_dbbfe .Get ("\u0044\u006f\u006d\u0061\u0069\u006e")).(*_bf .PdfObjectArray );if !_gdebf {_bc .Log .Error ("D\u006fm\u0061\u0069\u006e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063\u0069fi\u0065\u0064");
return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if _agdg .Len ()< 0||_agdg .Len ()%2!=0{_bc .Log .Error ("\u0044\u006f\u006d\u0061\u0069\u006e\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
return nil ,_eff .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0064\u006f\u006da\u0069\u006e\u0020\u0072an\u0067\u0065");};_gddf .NumInputs =_agdg .Len ()/2;_cafe ,_eccad :=_agdg .ToFloat64Array ();if _eccad !=nil {return nil ,_eccad ;};_gddf .Domain =_cafe ;
_agdg ,_gdebf =_bf .TraceToDirectObject (_dbbfe .Get ("\u0052\u0061\u006eg\u0065")).(*_bf .PdfObjectArray );if !_gdebf {_bc .Log .Error ("\u0052\u0061\u006e\u0067e \u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064");return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if _agdg .Len ()< 0||_agdg .Len ()%2!=0{return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");};_gddf .NumOutputs =_agdg .Len ()/2;_ggecg ,_eccad :=_agdg .ToFloat64Array ();if _eccad !=nil {return nil ,_eccad ;
};_gddf .Range =_ggecg ;_agdg ,_gdebf =_bf .TraceToDirectObject (_dbbfe .Get ("\u0053\u0069\u007a\u0065")).(*_bf .PdfObjectArray );if !_gdebf {_bc .Log .Error ("\u0053i\u007ae\u0020\u006e\u006f\u0074\u0020s\u0070\u0065c\u0069\u0066\u0069\u0065\u0064");
return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};_gccb ,_eccad :=_agdg .ToIntegerArray ();
if _eccad !=nil {return nil ,_eccad ;};if len (_gccb )!=_gddf .NumInputs {_bc .Log .Error ("T\u0061\u0062\u006c\u0065\u0020\u0073\u0069\u007a\u0065\u0020\u006e\u006f\u0074\u0020\u006d\u0061\u0074\u0063h\u0069\u006e\u0067\u0020\u006e\u0075\u006d\u0062\u0065\u0072 o\u0066\u0020\u0069n\u0070u\u0074\u0073");
return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_gddf .Size =_gccb ;_bbcc ,_gdebf :=_bf .TraceToDirectObject (_dbbfe .Get ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0053\u0061\u006d\u0070\u006c\u0065")).(*_bf .PdfObjectInteger );
if !_gdebf {_bc .Log .Error ("B\u0069\u0074\u0073\u0050\u0065\u0072S\u0061\u006d\u0070\u006c\u0065\u0020\u006e\u006f\u0074 \u0073\u0070\u0065c\u0069f\u0069\u0065\u0064");return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if *_bbcc !=1&&*_bbcc !=2&&*_bbcc !=4&&*_bbcc !=8&&*_bbcc !=12&&*_bbcc !=16&&*_bbcc !=24&&*_bbcc !=32{_bc .Log .Error ("\u0042\u0069\u0074s \u0070\u0065\u0072\u0020\u0073\u0061\u006d\u0070\u006ce\u0020o\u0075t\u0073i\u0064\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064\u0029",*_bbcc );
return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_gddf .BitsPerSample =int (*_bbcc );_gddf .Order =1;_ddaff ,_gdebf :=_bf .TraceToDirectObject (_dbbfe .Get ("\u004f\u0072\u0064e\u0072")).(*_bf .PdfObjectInteger );
if _gdebf {if *_ddaff !=1&&*_ddaff !=3{_bc .Log .Error ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u006fr\u0064\u0065r\u0020\u0028\u0025\u0064\u0029",*_ddaff );return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_gddf .Order =int (*_ddaff );
};_agdg ,_gdebf =_bf .TraceToDirectObject (_dbbfe .Get ("\u0045\u006e\u0063\u006f\u0064\u0065")).(*_bf .PdfObjectArray );if _gdebf {_bcaba ,_gbcef :=_agdg .ToFloat64Array ();if _gbcef !=nil {return nil ,_gbcef ;};_gddf .Encode =_bcaba ;};_agdg ,_gdebf =_bf .TraceToDirectObject (_dbbfe .Get ("\u0044\u0065\u0063\u006f\u0064\u0065")).(*_bf .PdfObjectArray );
if _gdebf {_caddc ,_befee :=_agdg .ToFloat64Array ();if _befee !=nil {return nil ,_befee ;};_gddf .Decode =_caddc ;};_dfagb ,_eccad :=_bf .DecodeStream (_ecbgce );if _eccad !=nil {return nil ,_eccad ;};_gddf ._dacc =_dfagb ;return _gddf ,nil ;};

// ParserMetadata gets the parser  metadata.
func (_geced *CompliancePdfReader )ParserMetadata ()_bf .ParserMetadata {if _geced ._dgefg ==(_bf .ParserMetadata {}){_geced ._dgefg ,_ =_geced ._gafdb .ParserMetadata ();};return _geced ._dgefg ;};

// PdfFieldSignature signature field represents digital signatures and optional data for authenticating
// the name of the signer and verifying document contents.
type PdfFieldSignature struct{*PdfField ;*PdfAnnotationWidget ;V *PdfSignature ;Lock *_bf .PdfIndirectObject ;SV *_bf .PdfIndirectObject ;};

// NewOutlineItem returns a new outline item instance.
func NewOutlineItem (title string ,dest OutlineDest )*OutlineItem {return &OutlineItem {Title :title ,Dest :dest };};

// ToPdfObject implements interface PdfModel.
func (_gab *PdfActionGoToR )ToPdfObject ()_bf .PdfObject {_gab .PdfAction .ToPdfObject ();_afdd :=_gab ._fda ;_cdee :=_afdd .PdfObject .(*_bf .PdfObjectDictionary );_cdee .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeGoToR )));if _gab .F !=nil {_cdee .Set ("\u0046",_gab .F .ToPdfObject ());
};_cdee .SetIfNotNil ("\u0044",_gab .D );_cdee .SetIfNotNil ("\u004ee\u0077\u0057\u0069\u006e\u0064\u006fw",_gab .NewWindow );return _afdd ;};

// PdfInfoTrapped specifies pdf trapped information.
type PdfInfoTrapped string ;

// PdfActionThread represents a thread action.
type PdfActionThread struct{*PdfAction ;F *PdfFilespec ;D _bf .PdfObject ;B _bf .PdfObject ;};func (_dbgc *PdfReader )newPdfAnnotationSquigglyFromDict (_cgcc *_bf .PdfObjectDictionary )(*PdfAnnotationSquiggly ,error ){_fdff :=PdfAnnotationSquiggly {};_fdb ,_ecec :=_dbgc .newPdfAnnotationMarkupFromDict (_cgcc );
if _ecec !=nil {return nil ,_ecec ;};_fdff .PdfAnnotationMarkup =_fdb ;_fdff .QuadPoints =_cgcc .Get ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073");return &_fdff ,nil ;};

// GetContainingPdfObject returns the container of the image object (indirect object).
func (_gegba *XObjectImage )GetContainingPdfObject ()_bf .PdfObject {return _gegba ._bccdb };

// PdfAnnotationSquiggly represents Squiggly annotations.
// (Section 12.5.6.10).
type PdfAnnotationSquiggly struct{*PdfAnnotation ;*PdfAnnotationMarkup ;QuadPoints _bf .PdfObject ;};

// GetNumComponents returns the number of color components.
func (_badae *PdfColorspaceICCBased )GetNumComponents ()int {return _badae .N };func (_gbagc *LTV )getOCSPs (_ccgg []*_d .Certificate ,_cbebg map[string ]*_d .Certificate )([][]byte ,error ){_babc :=make ([][]byte ,0,len (_ccgg ));for _ ,_bffee :=range _ccgg {for _ ,_fdfea :=range _bffee .OCSPServer {if _gbagc .CertClient .IsCA (_bffee ){continue ;
};_bgfc ,_afcg :=_cbebg [_bffee .Issuer .CommonName ];if !_afcg {_bc .Log .Debug ("\u0057\u0041\u0052\u004e:\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u004f\u0043\u0053\u0050\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u003a\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072t\u0069\u0066\u0069\u0063\u0061\u0074\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
continue ;};_ ,_bgbff ,_baea :=_gbagc .OCSPClient .MakeRequest (_fdfea ,_bffee ,_bgfc );if _baea !=nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e:\u0020\u004f\u0043\u0053\u0050\u0020\u0072\u0065\u0071\u0075e\u0073t\u0020\u0065\u0072\u0072\u006f\u0072\u003a \u0025\u0076",_baea );
continue ;};_babc =append (_babc ,_bgbff );};};return _babc ,nil ;};func (_cgbed Image )getBase ()_ff .ImageBase {return _ff .NewImageBase (int (_cgbed .Width ),int (_cgbed .Height ),int (_cgbed .BitsPerComponent ),_cgbed .ColorComponents ,_cgbed .Data ,_cgbed ._gfegf ,_cgbed ._dbcfb );
};

// Encoder returns the font's text encoder.
func (_cbfag *PdfFont )Encoder ()_faf .TextEncoder {_ececf :=_cbfag .actualFont ();if _ececf ==nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0045n\u0063\u006f\u0064er\u0020\u006e\u006f\u0074\u0020\u0069m\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0066o\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u003d%\u0023\u0054",_cbfag ._cacce );
return nil ;};return _ececf .Encoder ();};func (_fdbadg *PdfWriter )addObject (_dbfbb _bf .PdfObject )bool {_acccg :=_fdbadg .hasObject (_dbfbb );if !_acccg {_fbfc :=_bf .ResolveReferencesDeep (_dbfbb ,_fdbadg ._dacda );if _fbfc !=nil {_bc .Log .Debug ("E\u0052R\u004f\u0052\u003a\u0020\u0025\u0076\u0020\u002d \u0073\u006b\u0069\u0070pi\u006e\u0067",_fbfc );
};_fdbadg ._agfac =append (_fdbadg ._agfac ,_dbfbb );_fdbadg ._bcgbbe [_dbfbb ]=struct{}{};return true ;};return false ;};

// GetNumComponents returns the number of color components of the colorspace device.
// Returns 3 for a CalRGB device.
func (_cgec *PdfColorspaceCalRGB )GetNumComponents ()int {return 3};

// ToPdfObject implements interface PdfModel.
func (_cfefc *PdfAnnotationWatermark )ToPdfObject ()_bf .PdfObject {_cfefc .PdfAnnotation .ToPdfObject ();_gce :=_cfefc ._cdaf ;_fcag :=_gce .PdfObject .(*_bf .PdfObjectDictionary );_fcag .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0057a\u0074\u0065\u0072\u006d\u0061\u0072k"));
_fcag .SetIfNotNil ("\u0046\u0069\u0078\u0065\u0064\u0050\u0072\u0069\u006e\u0074",_cfefc .FixedPrint );return _gce ;};

// PdfColorspaceSpecialPattern is a Pattern colorspace.
// Can be defined either as /Pattern or with an underlying colorspace [/Pattern cs].
type PdfColorspaceSpecialPattern struct{UnderlyingCS PdfColorspace ;_fbed *_bf .PdfIndirectObject ;};

// DefaultImageHandler is the default implementation of the ImageHandler using the standard go library.
type DefaultImageHandler struct{};

// GetCustomInfo returns a custom info value for the specified name.
func (_cddc *PdfInfo )GetCustomInfo (name string )*_bf .PdfObjectString {var _gcfc *_bf .PdfObjectString ;if _cddc ._dbaa ==nil {return _gcfc ;};if _ecbgd ,_aeaee :=_cddc ._dbaa .Get (*_bf .MakeName (name )).(*_bf .PdfObjectString );_aeaee {_gcfc =_ecbgd ;
};return _gcfc ;};

// ToPdfObject converts the pdfFontSimple to its PDF representation for outputting.
func (_fabf *pdfFontSimple )ToPdfObject ()_bf .PdfObject {if _fabf ._cfcb ==nil {_fabf ._cfcb =&_bf .PdfIndirectObject {};};_cbfe :=_fabf .baseFields ().asPdfObjectDictionary ("");_fabf ._cfcb .PdfObject =_cbfe ;if _fabf .FirstChar !=nil {_cbfe .Set ("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r",_fabf .FirstChar );
};if _fabf .LastChar !=nil {_cbfe .Set ("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072",_fabf .LastChar );};if _fabf .Widths !=nil {_cbfe .Set ("\u0057\u0069\u0064\u0074\u0068\u0073",_fabf .Widths );};if _fabf .Encoding !=nil {_cbfe .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_fabf .Encoding );
}else if _fabf ._adbcf !=nil {_fcfd :=_fabf ._adbcf .ToPdfObject ();if _fcfd !=nil {_cbfe .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_fcfd );};};return _fabf ._cfcb ;};

// PdfActionGoToE represents a GoToE action.
type PdfActionGoToE struct{*PdfAction ;F *PdfFilespec ;D _bf .PdfObject ;NewWindow _bf .PdfObject ;T _bf .PdfObject ;};

// GetMediaBox gets the inheritable media box value, either from the page
// or a higher up page/pages struct.
func (_cgaad *PdfPage )GetMediaBox ()(*PdfRectangle ,error ){if _cgaad .MediaBox !=nil {return _cgaad .MediaBox ,nil ;};_ffgac :=_cgaad .Parent ;for _ffgac !=nil {_badb ,_dbaaa :=_bf .GetDict (_ffgac );if !_dbaaa {return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0072\u0065\u006e\u0074\u0020\u006f\u0062\u006a\u0065\u0063t\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _eegb :=_badb .Get ("\u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078");_eegb !=nil {_fcbgc ,_aedcd :=_bf .GetArray (_eegb );if !_aedcd {return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u0065\u0064\u0069a\u0020\u0062\u006f\u0078");
};_abfgac ,_fcfeda :=NewPdfRectangle (*_fcbgc );if _fcfeda !=nil {return nil ,_fcfeda ;};return _abfgac ,nil ;};_ffgac =_badb .Get ("\u0050\u0061\u0072\u0065\u006e\u0074");};return nil ,_eff .New ("m\u0065\u0064\u0069\u0061 b\u006fx\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};

// SetImageHandler sets the image handler used by the package.
func SetImageHandler (imgHandling ImageHandler ){ImageHandling =imgHandling };func (_aeegg *pdfFontType0 )getFontDescriptor ()*PdfFontDescriptor {if _aeegg ._cedfe ==nil &&_aeegg .DescendantFont !=nil {return _aeegg .DescendantFont .FontDescriptor ();};
return _aeegg ._cedfe ;};

// PdfActionRendition represents a Rendition action.
type PdfActionRendition struct{*PdfAction ;R _bf .PdfObject ;AN _bf .PdfObject ;OP _bf .PdfObject ;JS _bf .PdfObject ;};

// ToPdfObject implements interface PdfModel.
func (_fffb *PdfAnnotationSound )ToPdfObject ()_bf .PdfObject {_fffb .PdfAnnotation .ToPdfObject ();_eage :=_fffb ._cdaf ;_ebef :=_eage .PdfObject .(*_bf .PdfObjectDictionary );_fffb .PdfAnnotationMarkup .appendToPdfDictionary (_ebef );_ebef .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0053\u006f\u0075n\u0064"));
_ebef .SetIfNotNil ("\u0053\u006f\u0075n\u0064",_fffb .Sound );_ebef .SetIfNotNil ("\u004e\u0061\u006d\u0065",_fffb .Name );return _eage ;};

// Val returns the value of the color.
func (_decf *PdfColorCalGray )Val ()float64 {return float64 (*_decf )};var ErrColorOutOfRange =_eff .New ("\u0063o\u006co\u0072\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");func (_fafb *pdfFontSimple )updateStandard14Font (){_affca ,_bgbg :=_fafb .Encoder ().(_faf .SimpleEncoder );
if !_bgbg {_bc .Log .Error ("\u0057\u0072\u006f\u006e\u0067\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074y\u0070e\u003a\u0020\u0025\u0054\u002e\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073\u002e",_fafb .Encoder (),_fafb );return ;};_egbfe :=_affca .Charcodes ();
_fafb ._fabb =make (map[_faf .CharCode ]float64 ,len (_egbfe ));for _ ,_edceg :=range _egbfe {_bged ,_ :=_affca .CharcodeToRune (_edceg );_bbbb ,_ :=_fafb ._bdcde .Read (_bged );_fafb ._fabb [_edceg ]=_bbbb .Wx ;};};

// ButtonType represents the subtype of a button field, can be one of:
// - Checkbox (ButtonTypeCheckbox)
// - PushButton (ButtonTypePushButton)
// - RadioButton (ButtonTypeRadioButton)
type ButtonType int ;

// NewXObjectImageFromStream builds the image xobject from a stream object.
// An image dictionary is the dictionary portion of a stream object representing an image XObject.
func NewXObjectImageFromStream (stream *_bf .PdfObjectStream )(*XObjectImage ,error ){_daccf :=&XObjectImage {};_daccf ._bccdb =stream ;_cegbf :=*(stream .PdfObjectDictionary );_defde ,_agddca :=_bf .NewEncoderFromStream (stream );if _agddca !=nil {return nil ,_agddca ;
};_daccf .Filter =_defde ;if _eadd :=_bf .TraceToDirectObject (_cegbf .Get ("\u0057\u0069\u0064t\u0068"));_eadd !=nil {_ebabg ,_ddcgf :=_eadd .(*_bf .PdfObjectInteger );if !_ddcgf {return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0064\u0074\u0068\u0020\u006f\u0062j\u0065\u0063\u0074");
};_egbdf :=int64 (*_ebabg );_daccf .Width =&_egbdf ;}else {return nil ,_eff .New ("\u0077\u0069\u0064\u0074\u0068\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};if _gcdd :=_bf .TraceToDirectObject (_cegbf .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));
_gcdd !=nil {_cbbe ,_egfgf :=_gcdd .(*_bf .PdfObjectInteger );if !_egfgf {return nil ,_eff .New ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0069\u006d\u0061\u0067\u0065\u0020\u0068\u0065\u0069g\u0068\u0074\u0020o\u0062j\u0065\u0063\u0074");};_bgde :=int64 (*_cbbe );
_daccf .Height =&_bgde ;}else {return nil ,_eff .New ("\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};if _gcff :=_bf .TraceToDirectObject (_cegbf .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
_gcff !=nil {_bagc ,_gcfbg :=NewPdfColorspaceFromPdfObject (_gcff );if _gcfbg !=nil {return nil ,_gcfbg ;};_daccf .ColorSpace =_bagc ;}else {_bc .Log .Debug ("\u0058O\u0062\u006a\u0065c\u0074\u0020\u0049m\u0061ge\u0020\u0063\u006f\u006c\u006f\u0072\u0073p\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067 1\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065n\u0074\u0020\u002d\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0047r\u0061\u0079");
_daccf .ColorSpace =NewPdfColorspaceDeviceGray ();};if _ffeefb :=_bf .TraceToDirectObject (_cegbf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_ffeefb !=nil {_ddeeda ,_acaaa :=_ffeefb .(*_bf .PdfObjectInteger );
if !_acaaa {return nil ,_eff .New ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0069\u006d\u0061\u0067\u0065\u0020\u0068\u0065\u0069g\u0068\u0074\u0020o\u0062j\u0065\u0063\u0074");};_dfeab :=int64 (*_ddeeda );_daccf .BitsPerComponent =&_dfeab ;};_daccf .Intent =_cegbf .Get ("\u0049\u006e\u0074\u0065\u006e\u0074");
_daccf .ImageMask =_cegbf .Get ("\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k");_daccf .Mask =_cegbf .Get ("\u004d\u0061\u0073\u006b");_daccf .Decode =_cegbf .Get ("\u0044\u0065\u0063\u006f\u0064\u0065");_daccf .Interpolate =_cegbf .Get ("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065");
_daccf .Alternatives =_cegbf .Get ("\u0041\u006c\u0074e\u0072\u006e\u0061\u0074\u0069\u0076\u0065\u0073");_daccf .SMask =_cegbf .Get ("\u0053\u004d\u0061s\u006b");_daccf .SMaskInData =_cegbf .Get ("S\u004d\u0061\u0073\u006b\u0049\u006e\u0044\u0061\u0074\u0061");
_daccf .Matte =_cegbf .Get ("\u004d\u0061\u0074t\u0065");_daccf .Name =_cegbf .Get ("\u004e\u0061\u006d\u0065");_daccf .StructParent =_cegbf .Get ("\u0053\u0074\u0072u\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074");_daccf .ID =_cegbf .Get ("\u0049\u0044");
_daccf .OPI =_cegbf .Get ("\u004f\u0050\u0049");_daccf .Metadata =_cegbf .Get ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061");_daccf .OC =_cegbf .Get ("\u004f\u0043");_daccf .Stream =stream .Stream ;return _daccf ,nil ;};

// GetNumComponents returns the number of color components (1 for Indexed).
func (_ebafe *PdfColorspaceSpecialIndexed )GetNumComponents ()int {return 1};func _edffg (_baedf *XObjectImage )error {if _baedf .SMask ==nil {return nil ;};_ffbec ,_cbcc :=_baedf .SMask .(*_bf .PdfObjectStream );if !_cbcc {_bc .Log .Debug ("\u0053\u004da\u0073\u006b\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u002a\u0050\u0064\u0066\u004f\u0062\u006a\u0065\u0063\u0074\u0053\u0074re\u0061\u006d");
return _bf .ErrTypeError ;};_ccgbef :=_ffbec .PdfObjectDictionary ;_fcde :=_ccgbef .Get ("\u004d\u0061\u0074t\u0065");if _fcde ==nil {return nil ;};_gfbgc ,_eecgf :=_gfacg (_fcde .(*_bf .PdfObjectArray ));if _eecgf !=nil {return _eecgf ;};_ddgeb :=_bf .MakeArrayFromFloats ([]float64 {_gfbgc });
_ccgbef .SetIfNotNil ("\u004d\u0061\u0074t\u0065",_ddgeb );return nil ;};

// GetNumComponents returns the number of color components (3 for CalRGB).
func (_agcdf *PdfColorCalRGB )GetNumComponents ()int {return 3};func (_bcac *PdfReader )traverseObjectData (_fead _bf .PdfObject )error {return _bf .ResolveReferencesDeep (_fead ,_bcac ._eddf );};func (_caeb *PdfWriter )setDocumentIDs (_ccega ,_aegb string ){_caeb ._bdeaee =_bf .MakeArray (_bf .MakeHexString (_ccega ),_bf .MakeHexString (_aegb ));
};

// Insert adds an outline item as a child of the current outline item,
// at the specified index.
func (_geeb *OutlineItem )Insert (index uint ,item *OutlineItem ){_aaaba :=uint (len (_geeb .Entries ));if index > _aaaba {index =_aaaba ;};_geeb .Entries =append (_geeb .Entries [:index ],append ([]*OutlineItem {item },_geeb .Entries [index :]...)...);
};func (_eagggb *PdfWriter )mapObjectStreams (_cfdfe bool )(map[_bf .PdfObject ]bool ,bool ){_abgc :=make (map[_bf .PdfObject ]bool );for _ ,_dgcbgc :=range _eagggb ._agfac {if _ddeed ,_dagba :=_dgcbgc .(*_bf .PdfObjectStreams );_dagba {_cfdfe =true ;for _ ,_ebfce :=range _ddeed .Elements (){_abgc [_ebfce ]=true ;
if _gdeec ,_ddadb :=_ebfce .(*_bf .PdfIndirectObject );_ddadb {_abgc [_gdeec .PdfObject ]=true ;};};};};return _abgc ,_cfdfe ;};

// GetPageAsIndirectObject returns the page as a dictionary within an PdfIndirectObject.
func (_ddfa *PdfPage )GetPageAsIndirectObject ()*_bf .PdfIndirectObject {return _ddfa ._cddaa };func (_cbf *PdfField )inherit (_cefe func (*PdfField )bool )(bool ,error ){_dcfd :=map[*PdfField ]bool {};_ecbe :=false ;_cfdc :=_cbf ;for _cfdc !=nil {if _ ,_eefc :=_dcfd [_cfdc ];
_eefc {return false ,_eff .New ("\u0072\u0065\u0063\u0075rs\u0069\u0076\u0065\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0061\u006c");};_degce :=_cefe (_cfdc );if _degce {_ecbe =true ;break ;};_dcfd [_cfdc ]=true ;_cfdc =_cfdc .Parent ;};return _ecbe ,nil ;
};

// PdfColorDeviceCMYK is a CMYK32 color, where each component is defined in the range 0.0 - 1.0 where 1.0 is the primary intensity.
type PdfColorDeviceCMYK [4]float64 ;

// GetCatalogMarkInfo gets catalog MarkInfo object.
func (_egdef *PdfReader )GetCatalogMarkInfo ()(_bf .PdfObject ,bool ){if _egdef ._dbaea ==nil {return nil ,false ;};_dcfaf :=_egdef ._dbaea .Get ("\u004d\u0061\u0072\u006b\u0049\u006e\u0066\u006f");return _dcfaf ,_dcfaf !=nil ;};

// ToPdfObject implements interface PdfModel.
func (_becc *PdfAnnotationLink )ToPdfObject ()_bf .PdfObject {_becc .PdfAnnotation .ToPdfObject ();_abfgc :=_becc ._cdaf ;_fge :=_abfgc .PdfObject .(*_bf .PdfObjectDictionary );_fge .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u004c\u0069\u006e\u006b"));
if _becc ._fcfb !=nil &&_becc ._fcfb ._baf !=nil {_fge .Set ("\u0041",_becc ._fcfb ._baf .ToPdfObject ());}else if _becc .A !=nil {_fge .Set ("\u0041",_becc .A );};_fge .SetIfNotNil ("\u0044\u0065\u0073\u0074",_becc .Dest );_fge .SetIfNotNil ("\u0048",_becc .H );
_fge .SetIfNotNil ("\u0050\u0041",_becc .PA );_fge .SetIfNotNil ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073",_becc .QuadPoints );_fge .SetIfNotNil ("\u0042\u0053",_becc .BS );return _abfgc ;};func (_ceega *PdfWriter )writeObject (_dffac int ,_fcgbf _bf .PdfObject ){_bc .Log .Trace ("\u0057\u0072\u0069\u0074\u0065\u0020\u006f\u0062\u006a \u0023\u0025\u0064\u000a",_dffac );
if _abbba ,_gbcde :=_fcgbf .(*_bf .PdfIndirectObject );_gbcde {_ceega ._baadg [_dffac ]=crossReference {Type :1,Offset :_ceega ._feddc ,Generation :_abbba .GenerationNumber };_cddad :=_af .Sprintf ("\u0025d\u0020\u0030\u0020\u006f\u0062\u006a\n",_dffac );
if _cbgfb ,_ebbc :=_abbba .PdfObject .(*pdfSignDictionary );_ebbc {_cbgfb ._caeadf =_ceega ._feddc +int64 (len (_cddad ));};if _abbba .PdfObject ==nil {_bc .Log .Debug ("E\u0072\u0072\u006fr\u003a\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0027\u0073\u0020\u0050\u0064\u0066\u004f\u0062j\u0065\u0063\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065\u0072\u0020b\u0065\u0020\u006e\u0069l\u0020\u002d\u0020\u0073e\u0074\u0074\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0050\u0064\u0066\u004f\u0062\u006a\u0065\u0063t\u004e\u0075\u006c\u006c");
_abbba .PdfObject =_bf .MakeNull ();};_cddad +=_abbba .PdfObject .WriteString ();_cddad +="\u000a\u0065\u006e\u0064\u006f\u0062\u006a\u000a";_ceega .writeString (_cddad );return ;};if _beecf ,_edcff :=_fcgbf .(*_bf .PdfObjectStream );_edcff {_ceega ._baadg [_dffac ]=crossReference {Type :1,Offset :_ceega ._feddc ,Generation :_beecf .GenerationNumber };
_ffcga :=_af .Sprintf ("\u0025d\u0020\u0030\u0020\u006f\u0062\u006a\n",_dffac );_ffcga +=_beecf .PdfObjectDictionary .WriteString ();_ffcga +="\u000a\u0073\u0074\u0072\u0065\u0061\u006d\u000a";_ceega .writeString (_ffcga );_ceega .writeBytes (_beecf .Stream );
_ceega .writeString ("\u000ae\u006ed\u0073\u0074\u0072\u0065\u0061m\u000a\u0065n\u0064\u006f\u0062\u006a\u000a");return ;};if _edcfd ,_deffg :=_fcgbf .(*_bf .PdfObjectStreams );_deffg {_ceega ._baadg [_dffac ]=crossReference {Type :1,Offset :_ceega ._feddc ,Generation :_edcfd .GenerationNumber };
_aafcf :=_af .Sprintf ("\u0025d\u0020\u0030\u0020\u006f\u0062\u006a\n",_dffac );var _fcbfd []string ;var _agegaa string ;var _fdbdc int64 ;for _bdaeg ,_fgcabg :=range _edcfd .Elements (){_dbddg ,_afeed :=_fgcabg .(*_bf .PdfIndirectObject );if !_afeed {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0074\u0072\u0065am\u0073 \u004e\u0020\u0025\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006es\u0020\u006e\u006f\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u0070\u0064\u0066 \u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0025\u0076",_dffac ,_fgcabg );
continue ;};_agecg :=_dbddg .PdfObject .WriteString ()+"\u0020";_agegaa =_agegaa +_agecg ;_fcbfd =append (_fcbfd ,_af .Sprintf ("\u0025\u0064\u0020%\u0064",_dbddg .ObjectNumber ,_fdbdc ));_ceega ._baadg [int (_dbddg .ObjectNumber )]=crossReference {Type :2,ObjectNumber :_dffac ,Index :_bdaeg };
_fdbdc =_fdbdc +int64 (len ([]byte (_agecg )));};_beeb :=_gf .Join (_fcbfd ,"\u0020")+"\u0020";_befcd :=_bf .NewFlateEncoder ();_gaedd :=_befcd .MakeStreamDict ();_gaedd .Set (_bf .PdfObjectName ("\u0054\u0079\u0070\u0065"),_bf .MakeName ("\u004f\u0062\u006a\u0053\u0074\u006d"));
_ebbae :=int64 (_edcfd .Len ());_gaedd .Set (_bf .PdfObjectName ("\u004e"),_bf .MakeInteger (_ebbae ));_bbfdef :=int64 (len (_beeb ));_gaedd .Set (_bf .PdfObjectName ("\u0046\u0069\u0072s\u0074"),_bf .MakeInteger (_bbfdef ));_cbfaf ,_ :=_befcd .EncodeBytes ([]byte (_beeb +_agegaa ));
_fceff :=int64 (len (_cbfaf ));_gaedd .Set (_bf .PdfObjectName ("\u004c\u0065\u006e\u0067\u0074\u0068"),_bf .MakeInteger (_fceff ));_aafcf +=_gaedd .WriteString ();_aafcf +="\u000a\u0073\u0074\u0072\u0065\u0061\u006d\u000a";_ceega .writeString (_aafcf );
_ceega .writeBytes (_cbfaf );_ceega .writeString ("\u000ae\u006ed\u0073\u0074\u0072\u0065\u0061m\u000a\u0065n\u0064\u006f\u0062\u006a\u000a");return ;};_ceega .writeString (_fcgbf .WriteString ());};func _aefgc (_gcda *PdfField )[]*PdfField {_dbgef :=[]*PdfField {_gcda };
for _ ,_efeab :=range _gcda .Kids {_dbgef =append (_dbgef ,_aefgc (_efeab )...);};return _dbgef ;};

// IsPush returns true if the button field represents a push button, false otherwise.
func (_dgcbg *PdfFieldButton )IsPush ()bool {return _dgcbg .GetType ()==ButtonTypePush };

// IsRadio returns true if the button field represents a radio button, false otherwise.
func (_ddea *PdfFieldButton )IsRadio ()bool {return _ddea .GetType ()==ButtonTypeRadio };func (_afgde *PdfReader )newPdfAnnotationMovieFromDict (_cdg *_bf .PdfObjectDictionary )(*PdfAnnotationMovie ,error ){_cebbg :=PdfAnnotationMovie {};_cebbg .T =_cdg .Get ("\u0054");
_cebbg .Movie =_cdg .Get ("\u004d\u006f\u0076i\u0065");_cebbg .A =_cdg .Get ("\u0041");return &_cebbg ,nil ;};func (_befcf *PdfWriter )checkPendingObjects (){for _aabef ,_gfgfc :=range _befcf ._fdbad {if !_befcf .hasObject (_aabef ){_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u0020\u0050\u0065n\u0064\u0069\u006eg\u0020\u006f\u0062j\u0065\u0063t\u0020\u0025\u002b\u0076\u0020\u0025T\u0020(%\u0070\u0029\u0020\u006e\u0065\u0076\u0065\u0072\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0077\u0072\u0069\u0074\u0069\u006e\u0067",_aabef ,_aabef ,_aabef );
for _ ,_adfgdg :=range _gfgfc {for _ ,_aaffb :=range _adfgdg .Keys (){_acbaa :=_adfgdg .Get (_aaffb );if _acbaa ==_aabef {_bc .Log .Debug ("\u0050e\u006e\u0064i\u006e\u0067\u0020\u006fb\u006a\u0065\u0063t\u0020\u0066\u006f\u0075\u006e\u0064\u0021\u0020\u0061nd\u0020\u0072\u0065p\u006c\u0061c\u0065\u0064\u0020\u0077\u0069\u0074h\u0020\u006eu\u006c\u006c");
_adfgdg .Set (_aaffb ,_bf .MakeNull ());break ;};};};};};};func (_fdc *PdfReader )newPdfActionRenditionFromDict (_cdfg *_bf .PdfObjectDictionary )(*PdfActionRendition ,error ){return &PdfActionRendition {R :_cdfg .Get ("\u0052"),AN :_cdfg .Get ("\u0041\u004e"),OP :_cdfg .Get ("\u004f\u0050"),JS :_cdfg .Get ("\u004a\u0053")},nil ;
};

// ToPdfObject converts the pdfCIDFontType2 to a PDF representation.
func (_adee *pdfCIDFontType2 )ToPdfObject ()_bf .PdfObject {if _adee ._ddfc ==nil {_adee ._ddfc =&_bf .PdfIndirectObject {};};_gceg :=_adee .baseFields ().asPdfObjectDictionary ("\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032");_adee ._ddfc .PdfObject =_gceg ;
if _adee .CIDSystemInfo !=nil {_gceg .Set ("\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f",_adee .CIDSystemInfo );};if _adee .DW !=nil {_gceg .Set ("\u0044\u0057",_adee .DW );};if _adee .DW2 !=nil {_gceg .Set ("\u0044\u0057\u0032",_adee .DW2 );
};if _adee .W !=nil {_gceg .Set ("\u0057",_adee .W );};if _adee .W2 !=nil {_gceg .Set ("\u0057\u0032",_adee .W2 );};if _adee .CIDToGIDMap !=nil {_gceg .Set ("C\u0049\u0044\u0054\u006f\u0047\u0049\u0044\u004d\u0061\u0070",_adee .CIDToGIDMap );};return _adee ._ddfc ;
};type pdfFont interface{_eb .Font ;

// ToPdfObject returns a PDF representation of the font and implements interface Model.
ToPdfObject ()_bf .PdfObject ;getFontDescriptor ()*PdfFontDescriptor ;baseFields ()*fontCommon ;};func _affge (_agad _bf .PdfObject )(*PdfFontDescriptor ,error ){_afee :=&PdfFontDescriptor {};_agad =_bf .ResolveReference (_agad );if _dgea ,_fffee :=_agad .(*_bf .PdfIndirectObject );
_fffee {_afee ._cebg =_dgea ;_agad =_dgea .PdfObject ;};_aaged ,_ebad :=_bf .GetDict (_agad );if !_ebad {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0046o\u006e\u0074\u0044\u0065\u0073c\u0072\u0069\u0070\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0067\u0069\u0076\u0065\u006e\u0020\u0062\u0079\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0028\u0025\u0054\u0029",_agad );
return nil ,_bf .ErrTypeError ;};if _cfdfdg :=_aaged .Get ("\u0046\u006f\u006e\u0074\u004e\u0061\u006d\u0065");_cfdfdg !=nil {_afee .FontName =_cfdfdg ;}else {_bc .Log .Debug ("\u0049n\u0063\u006fm\u0070\u0061\u0074\u0069b\u0069\u006c\u0069t\u0079\u003a\u0020\u0046\u006f\u006e\u0074\u004e\u0061me\u0020\u0028\u0052e\u0071\u0075i\u0072\u0065\u0064\u0029\u0020\u006di\u0073\u0073i\u006e\u0067");
};_fdcag ,_ :=_bf .GetName (_afee .FontName );if _acfc :=_aaged .Get ("\u0054\u0079\u0070\u0065");_acfc !=nil {_gbge ,_edfea :=_acfc .(*_bf .PdfObjectName );if !_edfea ||string (*_gbge )!="\u0046\u006f\u006e\u0074\u0044\u0065\u0073\u0063\u0072i\u0070\u0074\u006f\u0072"{_bc .Log .Debug ("I\u006e\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u003a\u0020\u0046\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072i\u0070t\u006f\u0072\u0020\u0054y\u0070\u0065 \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0025\u0054\u0029\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0071\u0020\u0025\u0054",_acfc ,_fdcag ,_afee .FontName );
};}else {_bc .Log .Trace ("\u0049\u006ec\u006f\u006d\u0070\u0061\u0074i\u0062\u0069\u006c\u0069\u0074y\u003a\u0020\u0054\u0079\u0070\u0065\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u002e\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0071\u0020\u0025\u0054",_fdcag ,_afee .FontName );
};_afee .FontFamily =_aaged .Get ("\u0046\u006f\u006e\u0074\u0046\u0061\u006d\u0069\u006c\u0079");_afee .FontStretch =_aaged .Get ("F\u006f\u006e\u0074\u0053\u0074\u0072\u0065\u0074\u0063\u0068");_afee .FontWeight =_aaged .Get ("\u0046\u006f\u006e\u0074\u0057\u0065\u0069\u0067\u0068\u0074");
_afee .Flags =_aaged .Get ("\u0046\u006c\u0061g\u0073");_afee .FontBBox =_aaged .Get ("\u0046\u006f\u006e\u0074\u0042\u0042\u006f\u0078");_afee .ItalicAngle =_aaged .Get ("I\u0074\u0061\u006c\u0069\u0063\u0041\u006e\u0067\u006c\u0065");_afee .Ascent =_aaged .Get ("\u0041\u0073\u0063\u0065\u006e\u0074");
_afee .Descent =_aaged .Get ("\u0044e\u0073\u0063\u0065\u006e\u0074");_afee .Leading =_aaged .Get ("\u004ce\u0061\u0064\u0069\u006e\u0067");_afee .CapHeight =_aaged .Get ("\u0043a\u0070\u0048\u0065\u0069\u0067\u0068t");_afee .XHeight =_aaged .Get ("\u0058H\u0065\u0069\u0067\u0068\u0074");
_afee .StemV =_aaged .Get ("\u0053\u0074\u0065m\u0056");_afee .StemH =_aaged .Get ("\u0053\u0074\u0065m\u0048");_afee .AvgWidth =_aaged .Get ("\u0041\u0076\u0067\u0057\u0069\u0064\u0074\u0068");_afee .MaxWidth =_aaged .Get ("\u004d\u0061\u0078\u0057\u0069\u0064\u0074\u0068");
_afee .MissingWidth =_aaged .Get ("\u004d\u0069\u0073s\u0069\u006e\u0067\u0057\u0069\u0064\u0074\u0068");_afee .FontFile =_aaged .Get ("\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065");_afee .FontFile2 =_aaged .Get ("\u0046o\u006e\u0074\u0046\u0069\u006c\u00652");
_afee .FontFile3 =_aaged .Get ("\u0046o\u006e\u0074\u0046\u0069\u006c\u00653");_afee .CharSet =_aaged .Get ("\u0043h\u0061\u0072\u0053\u0065\u0074");_afee .Style =_aaged .Get ("\u0053\u0074\u0079l\u0065");_afee .Lang =_aaged .Get ("\u004c\u0061\u006e\u0067");
_afee .FD =_aaged .Get ("\u0046\u0044");_afee .CIDSet =_aaged .Get ("\u0043\u0049\u0044\u0053\u0065\u0074");if _afee .Flags !=nil {if _adbfd ,_eggb :=_bf .GetIntVal (_afee .Flags );_eggb {_afee ._edcaf =_adbfd ;};};if _afee .MissingWidth !=nil {if _fgbdg ,_gagf :=_bf .GetNumberAsFloat (_afee .MissingWidth );
_gagf ==nil {_afee ._dbdgeb =_fgbdg ;};};if _afee .FontFile !=nil {_dfebb ,_bgac :=_bbgd (_afee .FontFile );if _bgac !=nil {return _afee ,_bgac ;};_bc .Log .Trace ("f\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u003d\u0025\u0073",_dfebb );_afee .fontFile =_dfebb ;
};if _afee .FontFile2 !=nil {_bbfde ,_fafff :=_eb .NewFontFile2FromPdfObject (_afee .FontFile2 );if _fafff !=nil {return _afee ,_fafff ;};_bc .Log .Trace ("\u0066\u006f\u006et\u0046\u0069\u006c\u0065\u0032\u003d\u0025\u0073",_bbfde .String ());_afee ._geabf =&_bbfde ;
};return _afee ,nil ;};func _bbgdb (_eabbc *_bf .PdfObjectDictionary )(*PdfShadingType3 ,error ){_dcdb :=PdfShadingType3 {};_aabbe :=_eabbc .Get ("\u0043\u006f\u006f\u0072\u0064\u0073");if _aabbe ==nil {_bc .Log .Debug ("\u0052\u0065\u0071ui\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069b\u0075t\u0065 \u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0043\u006f\u006f\u0072\u0064\u0073");
return nil ,ErrRequiredAttributeMissing ;};_fbfdb ,_effab :=_aabbe .(*_bf .PdfObjectArray );if !_effab {_bc .Log .Debug ("\u0043\u006f\u006f\u0072d\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_aabbe );
return nil ,_bf .ErrTypeError ;};if _fbfdb .Len ()!=6{_bc .Log .Debug ("\u0043\u006f\u006f\u0072d\u0073\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074 \u0036\u0020\u0028\u0067\u006f\u0074\u0020%\u0064\u0029",_fbfdb .Len ());return nil ,ErrInvalidAttribute ;
};_dcdb .Coords =_fbfdb ;if _cffcb :=_eabbc .Get ("\u0044\u006f\u006d\u0061\u0069\u006e");_cffcb !=nil {_cffcb =_bf .TraceToDirectObject (_cffcb );_cdagg ,_dgacf :=_cffcb .(*_bf .PdfObjectArray );if !_dgacf {_bc .Log .Debug ("\u0044\u006f\u006d\u0061i\u006e\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_cffcb );
return nil ,_bf .ErrTypeError ;};_dcdb .Domain =_cdagg ;};_aabbe =_eabbc .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");if _aabbe ==nil {_bc .Log .Debug ("\u0052\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0020\u0046\u0075\u006ec\u0074\u0069\u006f\u006e");
return nil ,ErrRequiredAttributeMissing ;};_dcdb .Function =[]PdfFunction {};if _beae ,_gcdca :=_aabbe .(*_bf .PdfObjectArray );_gcdca {for _ ,_eefgbg :=range _beae .Elements (){_eefaa ,_accdd :=_bbbbd (_eefgbg );if _accdd !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_accdd );
return nil ,_accdd ;};_dcdb .Function =append (_dcdb .Function ,_eefaa );};}else {_ggfcbg ,_aaed :=_bbbbd (_aabbe );if _aaed !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_aaed );
return nil ,_aaed ;};_dcdb .Function =append (_dcdb .Function ,_ggfcbg );};if _abfdad :=_eabbc .Get ("\u0045\u0078\u0074\u0065\u006e\u0064");_abfdad !=nil {_abfdad =_bf .TraceToDirectObject (_abfdad );_fgedb ,_ebge :=_abfdad .(*_bf .PdfObjectArray );if !_ebge {_bc .Log .Debug ("\u004d\u0061\u0074\u0072i\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_abfdad );
return nil ,_bf .ErrTypeError ;};if _fgedb .Len ()!=2{_bc .Log .Debug ("\u0045\u0078\u0074\u0065n\u0064\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074 \u0032\u0020\u0028\u0067\u006f\u0074\u0020%\u0064\u0029",_fgedb .Len ());return nil ,ErrInvalidAttribute ;
};_dcdb .Extend =_fgedb ;};return &_dcdb ,nil ;};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components.
func (_dgcb *PdfColorspaceICCBased )ColorFromFloats (vals []float64 )(PdfColor ,error ){if _dgcb .Alternate ==nil {if _dgcb .N ==1{_aafe :=NewPdfColorspaceDeviceGray ();return _aafe .ColorFromFloats (vals );}else if _dgcb .N ==3{_efcgc :=NewPdfColorspaceDeviceRGB ();
return _efcgc .ColorFromFloats (vals );}else if _dgcb .N ==4{_ddfb :=NewPdfColorspaceDeviceCMYK ();return _ddfb .ColorFromFloats (vals );}else {return nil ,_eff .New ("I\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061lt\u0065\u0072\u006ea\u0074i\u0076\u0065");
};};return _dgcb .Alternate .ColorFromFloats (vals );};func _cbaac ()string {_ggeae .Lock ();defer _ggeae .Unlock ();if len (_afadd )> 0{return _afadd ;};return "\u0055n\u0069\u0044\u006f\u0063 \u002d\u0020\u0068\u0074\u0074p\u003a/\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069o";
};

// ToPdfObject implements interface PdfModel.
func (_bcfb *PdfAnnotationSquiggly )ToPdfObject ()_bf .PdfObject {_bcfb .PdfAnnotation .ToPdfObject ();_dbbab :=_bcfb ._cdaf ;_deec :=_dbbab .PdfObject .(*_bf .PdfObjectDictionary );_bcfb .PdfAnnotationMarkup .appendToPdfDictionary (_deec );_deec .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0053\u0071\u0075\u0069\u0067\u0067\u006c\u0079"));
_deec .SetIfNotNil ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073",_bcfb .QuadPoints );return _dbbab ;};func _agdcc (_ddcf *PdfAnnotation )(*XObjectForm ,*PdfRectangle ,error ){_gefb ,_adgd :=_bf .GetDict (_ddcf .AP );if !_adgd {return nil ,nil ,_eff .New ("f\u0069\u0065\u006c\u0064\u0020\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0041\u0050\u0020d\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079");
};if _gefb ==nil {return nil ,nil ,nil ;};_gbbc ,_adgd :=_bf .GetArray (_ddcf .Rect );if !_adgd ||_gbbc .Len ()!=4{return nil ,nil ,_eff .New ("\u0072\u0065\u0063t\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_febdb ,_fcfba :=NewPdfRectangle (*_gbbc );
if _fcfba !=nil {return nil ,nil ,_fcfba ;};_cbfa :=_bf .TraceToDirectObject (_gefb .Get ("\u004e"));switch _bcea :=_cbfa .(type ){case *_bf .PdfObjectStream :_dgeeg :=_bcea ;_eacag ,_bedg :=NewXObjectFormFromStream (_dgeeg );return _eacag ,_febdb ,_bedg ;
case *_bf .PdfObjectDictionary :_gebfa :=_bcea ;_dfecc ,_gfcc :=_bf .GetName (_ddcf .AS );if !_gfcc {return nil ,nil ,nil ;};if _gebfa .Get (*_dfecc )==nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0041\u0053\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u006e\u006f\u0074 \u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0069\u006e\u0020\u0041\u0050\u0020\u0064\u0069\u0063\u0074\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006eg");
return nil ,nil ,nil ;};_begf ,_gfcc :=_bf .GetStream (_gebfa .Get (*_dfecc ));if !_gfcc {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055n\u0061\u0062\u006ce \u0074\u006f\u0020\u0061\u0063\u0063e\u0073\u0073\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073t\u0072\u0065\u0061\u006d\u0020\u0066\u006f\u0072 \u0025\u0076",_dfecc );
return nil ,nil ,_eff .New ("\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_ececa ,_fbfef :=NewXObjectFormFromStream (_begf );return _ececa ,_febdb ,_fbfef ;};_bc .Log .Debug ("\u0049\u006e\u0076\u0061li\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0066\u006f\u0072\u0020\u004e\u003a\u0020%\u0054",_cbfa );
return nil ,nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};

// AddExtGState add External Graphics State (GState). The gsDict can be specified
// either directly as a dictionary or an indirect object containing a dictionary.
func (_gfade *PdfPageResources )AddExtGState (gsName _bf .PdfObjectName ,gsDict _bf .PdfObject )error {if _gfade .ExtGState ==nil {_gfade .ExtGState =_bf .MakeDict ();};_fadgc :=_gfade .ExtGState ;_bdfga ,_ccccf :=_bf .TraceToDirectObject (_fadgc ).(*_bf .PdfObjectDictionary );
if !_ccccf {_bc .Log .Debug ("\u0045\u0078\u0074\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u0074\u0079\u0070\u0065\u0020e\u0072r\u006f\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u002f\u0025\u0054\u0029",_fadgc ,_bf .TraceToDirectObject (_fadgc ));
return _bf .ErrTypeError ;};_bdfga .Set (gsName ,gsDict );return nil ;};func _abff (_cgfaa *_bf .PdfObjectDictionary )(*PdfShadingType5 ,error ){_eeffb :=PdfShadingType5 {};_caggbg :=_cgfaa .Get ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065");
if _caggbg ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064 \u0061\u0074\u0074\u0072\u0069\u0062\u0075t\u0065\u0020\u006d\u0069\u0073\u0073i\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072C\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065");
return nil ,ErrRequiredAttributeMissing ;};_cdafc ,_ebfgf :=_caggbg .(*_bf .PdfObjectInteger );if !_ebfgf {_bc .Log .Debug ("\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065\u0020\u006eo\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_caggbg );
return nil ,_bf .ErrTypeError ;};_eeffb .BitsPerCoordinate =_cdafc ;_caggbg =_cgfaa .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _caggbg ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064\u0020a\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073in\u0067\u003a\u0020B\u0069\u0074s\u0050\u0065\u0072\u0043\u006f\u006dp\u006f\u006ee\u006e\u0074");
return nil ,ErrRequiredAttributeMissing ;};_cdafc ,_ebfgf =_caggbg .(*_bf .PdfObjectInteger );if !_ebfgf {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065r \u0028\u0067\u006ft\u0020%\u0054\u0029",_caggbg );
return nil ,_bf .ErrTypeError ;};_eeffb .BitsPerComponent =_cdafc ;_caggbg =_cgfaa .Get ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073\u0050e\u0072\u0052\u006f\u0077");if _caggbg ==nil {_bc .Log .Debug ("\u0052\u0065\u0071u\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0056\u0065\u0072\u0074\u0069c\u0065\u0073\u0050\u0065\u0072\u0052\u006f\u0077");
return nil ,ErrRequiredAttributeMissing ;};_cdafc ,_ebfgf =_caggbg .(*_bf .PdfObjectInteger );if !_ebfgf {_bc .Log .Debug ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073\u0050\u0065\u0072\u0052\u006f\u0077\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006et\u0065\u0067\u0065\u0072\u0020(\u0067\u006ft\u0020\u0025\u0054\u0029",_caggbg );
return nil ,_bf .ErrTypeError ;};_eeffb .VerticesPerRow =_cdafc ;_caggbg =_cgfaa .Get ("\u0044\u0065\u0063\u006f\u0064\u0065");if _caggbg ==nil {_bc .Log .Debug ("\u0052\u0065\u0071ui\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069b\u0075t\u0065 \u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065");
return nil ,ErrRequiredAttributeMissing ;};_bggge ,_ebfgf :=_caggbg .(*_bf .PdfObjectArray );if !_ebfgf {_bc .Log .Debug ("\u0044\u0065\u0063\u006fd\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_caggbg );
return nil ,_bf .ErrTypeError ;};_eeffb .Decode =_bggge ;if _adbd :=_cgfaa .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_adbd !=nil {_eeffb .Function =[]PdfFunction {};if _debfc ,_cccfe :=_adbd .(*_bf .PdfObjectArray );_cccfe {for _ ,_aegcc :=range _debfc .Elements (){_acabe ,_gfaag :=_bbbbd (_aegcc );
if _gfaag !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_gfaag );return nil ,_gfaag ;};_eeffb .Function =append (_eeffb .Function ,_acabe );
};}else {_fgggd ,_bcfca :=_bbbbd (_adbd );if _bcfca !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_bcfca );return nil ,_bcfca ;
};_eeffb .Function =append (_eeffb .Function ,_fgggd );};};return &_eeffb ,nil ;};

// NewPdfAcroForm returns a new PdfAcroForm with an intialized container (indirect object).
func NewPdfAcroForm ()*PdfAcroForm {return &PdfAcroForm {Fields :&[]*PdfField {},_ccfccd :_bf .MakeIndirectObject (_bf .MakeDict ())};};

// GetNumComponents returns the number of color components (1 for CalGray).
func (_ada *PdfColorCalGray )GetNumComponents ()int {return 1};func _decaa (_egaf _bf .PdfObject ,_ffdfe bool )(*PdfFont ,error ){_fcbg ,_afbed ,_fged :=_ccegc (_egaf );if _fcbg !=nil {_cafbc (_fcbg );};if _fged !=nil {if _fged ==ErrType1CFontNotSupported {_fdbd ,_edaa :=_ffgf (_fcbg ,_afbed ,nil );
if _edaa !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0057h\u0069\u006c\u0065 l\u006f\u0061\u0064\u0069\u006e\u0067 \u0073\u0069\u006d\u0070\u006c\u0065\u0020\u0066\u006f\u006e\u0074\u003a\u0020\u0066\u006fn\u0074\u003d\u0025\u0073\u0020\u0065\u0072\u0072=\u0025\u0076",_afbed ,_edaa );
return nil ,_fged ;};return &PdfFont {_cacce :_fdbd },_fged ;};return nil ,_fged ;};_aecd :=&PdfFont {};switch _afbed ._fdfb {case "\u0054\u0079\u0070e\u0030":if !_ffdfe {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u004c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0079\u0070\u00650\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064\u002e\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_afbed );
return nil ,_eff .New ("\u0063\u0079\u0063\u006cic\u0061\u006c\u0020\u0074\u0079\u0070\u0065\u0030\u0020\u006c\u006f\u0061\u0064\u0069n\u0067");};_fcafc ,_fbfd :=_fccg (_fcbg ,_afbed );if _fbfd !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0057\u0068\u0069l\u0065\u0020\u006c\u006f\u0061\u0064\u0069ng\u0020\u0054\u0079\u0070e\u0030\u0020\u0066\u006f\u006e\u0074\u002e\u0020\u0066on\u0074\u003d%\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_afbed ,_fbfd );
return nil ,_fbfd ;};_aecd ._cacce =_fcafc ;case "\u0054\u0079\u0070e\u0031","\u004dM\u0054\u0079\u0070\u0065\u0031","\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065":var _cgbcb *pdfFontSimple ;_eabe ,_edaga :=_eb .NewStdFontByName (_eb .StdFontName (_afbed ._adccf ));
if _edaga {_gfdb :=_dbeg (_eabe );_aecd ._cacce =&_gfdb ;_gefec :=_bf .TraceToDirectObject (_gfdb .ToPdfObject ());_agdf ,_ffeef ,_fbedb :=_ccegc (_gefec );if _fbedb !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0042\u0061\u0064\u0020\u0053\u0074a\u006e\u0064\u0061\u0072\u0064\u00314\u000a\u0009\u0066\u006f\u006e\u0074\u003d\u0025\u0073\u000a\u0009\u0073\u0074d\u003d\u0025\u002b\u0076",_afbed ,_gfdb );
return nil ,_fbedb ;};for _ ,_cegda :=range _fcbg .Keys (){_agdf .Set (_cegda ,_fcbg .Get (_cegda ));};_cgbcb ,_fbedb =_ffgf (_agdf ,_ffeef ,_gfdb ._ddgcg );if _fbedb !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0042\u0061\u0064\u0020\u0053\u0074a\u006e\u0064\u0061\u0072\u0064\u00314\u000a\u0009\u0066\u006f\u006e\u0074\u003d\u0025\u0073\u000a\u0009\u0073\u0074d\u003d\u0025\u002b\u0076",_afbed ,_gfdb );
return nil ,_fbedb ;};_cgbcb ._fabb =_gfdb ._fabb ;_cgbcb ._bdcde =_gfdb ._bdcde ;if _cgbcb ._acgd ==nil {_cgbcb ._acgd =_gfdb ._acgd ;};}else {_cgbcb ,_fged =_ffgf (_fcbg ,_afbed ,nil );if _fged !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0057h\u0069\u006c\u0065 l\u006f\u0061\u0064\u0069\u006e\u0067 \u0073\u0069\u006d\u0070\u006c\u0065\u0020\u0066\u006f\u006e\u0074\u003a\u0020\u0066\u006fn\u0074\u003d\u0025\u0073\u0020\u0065\u0072\u0072=\u0025\u0076",_afbed ,_fged );
return nil ,_fged ;};};_fged =_cgbcb .addEncoding ();if _fged !=nil {return nil ,_fged ;};if _edaga {_cgbcb .updateStandard14Font ();};if _edaga &&_cgbcb ._adbcf ==nil &&_cgbcb ._ddgcg ==nil {_bc .Log .Error ("\u0073\u0069\u006d\u0070\u006c\u0065\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_cgbcb );
_bc .Log .Error ("\u0066n\u0074\u003d\u0025\u002b\u0076",_eabe );};if len (_cgbcb ._fabb )==0{_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u004e\u006f\u0020\u0077\u0069d\u0074h\u0073.\u0020\u0066\u006f\u006e\u0074\u003d\u0025s",_cgbcb );};_aecd ._cacce =_cgbcb ;
case "\u0054\u0079\u0070e\u0033":_gcca ,_cebac :=_cbfd (_fcbg ,_afbed );if _cebac !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020W\u0068\u0069\u006c\u0065\u0020\u006co\u0061\u0064\u0069\u006e\u0067\u0020\u0074y\u0070\u0065\u0033\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cebac );
return nil ,_cebac ;};_aecd ._cacce =_gcca ;case "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030":_edab ,_gcgaf :=_eecac (_fcbg ,_afbed );if _gcgaf !=nil {_bc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0057\u0068i\u006c\u0065\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0063\u0069d \u0066\u006f\u006et\u0020\u0074y\u0070\u0065\u0030\u0020\u0066\u006fn\u0074\u003a \u0025\u0076",_gcgaf );
return nil ,_gcgaf ;};_aecd ._cacce =_edab ;case "\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032":_bede ,_bedea :=_efef (_fcbg ,_afbed );if _bedea !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0057\u0068\u0069l\u0065\u0020\u006co\u0061\u0064\u0069\u006e\u0067\u0020\u0063\u0069\u0064\u0020f\u006f\u006e\u0074\u0020\u0074yp\u0065\u0032\u0020\u0066\u006f\u006e\u0074\u002e\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_afbed ,_bedea );
return nil ,_bedea ;};_aecd ._cacce =_bede ;default:_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020U\u006e\u0073u\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020f\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0066\u006fn\u0074\u003d\u0025\u0073",_afbed );
return nil ,_af .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0066\u006f\u006e\u0074\u0020\u0074y\u0070\u0065\u003a\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_afbed );};return _aecd ,nil ;};func _efef (_gbfaa *_bf .PdfObjectDictionary ,_gfadcf *fontCommon )(*pdfCIDFontType2 ,error ){if _gfadcf ._fdfb !="\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032"{_bc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0046\u006fn\u0074\u0020\u0053u\u0062\u0054\u0079\u0070\u0065\u0020\u0021\u003d\u0020CI\u0044\u0046\u006fn\u0074\u0054y\u0070\u0065\u0032\u002e\u0020\u0066o\u006e\u0074=\u0025\u0073",_gfadcf );
return nil ,_bf .ErrRangeError ;};_cfcc :=_fbbd (_gfadcf );_dcba ,_acga :=_bf .GetDict (_gbfaa .Get ("\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f"));if !_acga {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043I\u0044\u0053\u0079st\u0065\u006d\u0049\u006e\u0066\u006f \u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029\u0020\u006d\u0069\u0073\u0073i\u006e\u0067\u002e\u0020\u0066\u006f\u006e\u0074=\u0025\u0073",_gfadcf );
return nil ,ErrRequiredAttributeMissing ;};_cfcc .CIDSystemInfo =_dcba ;_cfcc .DW =_gbfaa .Get ("\u0044\u0057");_cfcc .W =_gbfaa .Get ("\u0057");_cfcc .DW2 =_gbfaa .Get ("\u0044\u0057\u0032");_cfcc .W2 =_gbfaa .Get ("\u0057\u0032");_cfcc .CIDToGIDMap =_gbfaa .Get ("C\u0049\u0044\u0054\u006f\u0047\u0049\u0044\u004d\u0061\u0070");
_cfcc ._cecce =1000.0;if _cfdg ,_dedc :=_bf .GetNumberAsFloat (_cfcc .DW );_dedc ==nil {_cfcc ._cecce =_cfdg ;};_beeag ,_cgfcg :=_ebdfb (_cfcc .W );if _cgfcg !=nil {return nil ,_cgfcg ;};if _beeag ==nil {_beeag =map[_faf .CharCode ]float64 {};};_cfcc ._deadg =_beeag ;
return _cfcc ,nil ;};func (_dfdad *PdfShading )getShadingDict ()(*_bf .PdfObjectDictionary ,error ){_cfafe :=_dfdad ._daaad ;if _eecc ,_fdbc :=_cfafe .(*_bf .PdfIndirectObject );_fdbc {_gbgbc ,_eeefb :=_eecc .PdfObject .(*_bf .PdfObjectDictionary );if !_eeefb {return nil ,_bf .ErrTypeError ;
};return _gbgbc ,nil ;}else if _cagd ,_dfdf :=_cfafe .(*_bf .PdfObjectStream );_dfdf {return _cagd .PdfObjectDictionary ,nil ;}else if _ffebg ,_ceabf :=_cfafe .(*_bf .PdfObjectDictionary );_ceabf {return _ffebg ,nil ;}else {_bc .Log .Debug ("U\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0063\u0063\u0065s\u0073\u0020\u0073\u0068\u0061\u0064\u0069n\u0067\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079");
return nil ,_bf .ErrTypeError ;};};func (_dagg *fontFile )loadFromSegments (_efbcd ,_gedc []byte )error {_bc .Log .Trace ("\u006c\u006f\u0061dF\u0072\u006f\u006d\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0064\u0020\u0025\u0064",len (_efbcd ),len (_gedc ));
_aegaf :=_dagg .parseASCIIPart (_efbcd );if _aegaf !=nil {return _aegaf ;};_bc .Log .Trace ("f\u006f\u006e\u0074\u0066\u0069\u006c\u0065\u003d\u0025\u0073",_dagg );if len (_gedc )==0{return nil ;};_bc .Log .Trace ("f\u006f\u006e\u0074\u0066\u0069\u006c\u0065\u003d\u0025\u0073",_dagg );
return nil ;};func _gffb (_fdg _bf .PdfObject )(*PdfColorspaceLab ,error ){_ceeg :=NewPdfColorspaceLab ();if _fefg ,_eefb :=_fdg .(*_bf .PdfIndirectObject );_eefb {_ceeg ._bggg =_fefg ;};_fdg =_bf .TraceToDirectObject (_fdg );_faeg ,_gdcd :=_fdg .(*_bf .PdfObjectArray );
if !_gdcd {return nil ,_af .Errorf ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};if _faeg .Len ()!=2{return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u0043\u0061\u006c\u0052G\u0042 \u0063o\u006c\u006f\u0072\u0073\u0070\u0061\u0063e");
};_fdg =_bf .TraceToDirectObject (_faeg .Get (0));_bfbee ,_gdcd :=_fdg .(*_bf .PdfObjectName );if !_gdcd {return nil ,_af .Errorf ("\u006c\u0061\u0062\u0020\u006e\u0061\u006d\u0065\u0020\u006e\u006ft\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0062j\u0065\u0063\u0074");
};if *_bfbee !="\u004c\u0061\u0062"{return nil ,_af .Errorf ("n\u006ft\u0020\u0061\u0020\u004c\u0061\u0062\u0020\u0063o\u006c\u006f\u0072\u0073pa\u0063\u0065");};_fdg =_bf .TraceToDirectObject (_faeg .Get (1));_fggdc ,_gdcd :=_fdg .(*_bf .PdfObjectDictionary );
if !_gdcd {return nil ,_af .Errorf ("c\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020or\u0020\u0069\u006ev\u0061l\u0069\u0064");};
_fdg =_fggdc .Get ("\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074");_fdg =_bf .TraceToDirectObject (_fdg );_fbga ,_gdcd :=_fdg .(*_bf .PdfObjectArray );if !_gdcd {return nil ,_af .Errorf ("\u004c\u0061\u0062\u0020In\u0076\u0061\u006c\u0069\u0064\u0020\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069n\u0074");
};if _fbga .Len ()!=3{return nil ,_af .Errorf ("\u004c\u0061b\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074\u0020\u0061rr\u0061\u0079");};_cddfa ,_cfabf :=_fbga .GetAsFloat64Slice ();
if _cfabf !=nil {return nil ,_cfabf ;};_ceeg .WhitePoint =_cddfa ;_fdg =_fggdc .Get ("\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074");if _fdg !=nil {_fdg =_bf .TraceToDirectObject (_fdg );_ccbg ,_bcdb :=_fdg .(*_bf .PdfObjectArray );if !_bcdb {return nil ,_af .Errorf ("\u004c\u0061\u0062: \u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074");
};if _ccbg .Len ()!=3{return nil ,_af .Errorf ("\u004c\u0061b\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074\u0020\u0061rr\u0061\u0079");};_ebdca ,_ddafe :=_ccbg .GetAsFloat64Slice ();
if _ddafe !=nil {return nil ,_ddafe ;};_ceeg .BlackPoint =_ebdca ;};_fdg =_fggdc .Get ("\u0052\u0061\u006eg\u0065");if _fdg !=nil {_fdg =_bf .TraceToDirectObject (_fdg );_effe ,_beac :=_fdg .(*_bf .PdfObjectArray );if !_beac {_bc .Log .Error ("\u0052\u0061n\u0067\u0065\u0020t\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
return nil ,_af .Errorf ("\u004ca\u0062:\u0020\u0054\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};if _effe .Len ()!=4{_bc .Log .Error ("\u0052\u0061\u006e\u0067\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020e\u0072\u0072\u006f\u0072");return nil ,_af .Errorf ("\u004c\u0061b\u003a\u0020\u0052a\u006e\u0067\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
};_aagb ,_bgbce :=_effe .GetAsFloat64Slice ();if _bgbce !=nil {return nil ,_bgbce ;};_ceeg .Range =_aagb ;};return _ceeg ,nil ;};

// NewPdfReaderWithOpts creates a new PdfReader for an input io.ReadSeeker interface
// with a ReaderOpts.
// If ReaderOpts is nil it will be set to default value from NewReaderOpts.
func NewPdfReaderWithOpts (rs _ag .ReadSeeker ,opts *ReaderOpts )(*PdfReader ,error ){const _gfcgg ="\u006d\u006f\u0064\u0065\u006c\u003a\u004e\u0065\u0077\u0050\u0064f\u0052\u0065\u0061\u0064\u0065\u0072\u0057\u0069\u0074\u0068O\u0070\u0074\u0073";return _bfaag (rs ,opts ,true ,_gfcgg );
};

// PdfColorDeviceRGB represents a color in DeviceRGB colorspace with R, G, B components, where component is
// defined in the range 0.0 - 1.0 where 1.0 is the primary intensity.
type PdfColorDeviceRGB [3]float64 ;func (_cgaac *PdfWriter )optimize ()error {if _cgaac ._geaaa ==nil {return nil ;};var _gfcec error ;_cgaac ._agfac ,_gfcec =_cgaac ._geaaa .Optimize (_cgaac ._agfac );if _gfcec !=nil {return _gfcec ;};_edabf :=make (map[_bf .PdfObject ]struct{},len (_cgaac ._agfac ));
for _ ,_aabeg :=range _cgaac ._agfac {_edabf [_aabeg ]=struct{}{};};_cgaac ._bcgbbe =_edabf ;return nil ;};

// DecodeArray returns the component range values for the DeviceN colorspace.
// [0 1.0 0 1.0 ...] for each color component.
func (_dcbb *PdfColorspaceDeviceN )DecodeArray ()[]float64 {var _bcgd []float64 ;for _daac :=0;_daac < _dcbb .GetNumComponents ();_daac ++{_bcgd =append (_bcgd ,0.0,1.0);};return _bcgd ;};func (_dcgfb *PdfReader )loadForms ()(*PdfAcroForm ,error ){if _dcgfb ._gafdb .GetCrypter ()!=nil &&!_dcgfb ._gafdb .IsAuthenticated (){return nil ,_af .Errorf ("\u0066\u0069\u006ce\u0020\u006e\u0065\u0065d\u0020\u0074\u006f\u0020\u0062\u0065\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");
};_fcfad :=_dcgfb ._dbaea ;_cdaed :=_fcfad .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d");if _cdaed ==nil {return nil ,nil ;};_eegfe ,_ :=_bf .GetIndirect (_cdaed );_cdaed =_bf .TraceToDirectObject (_cdaed );if _bf .IsNullObject (_cdaed ){_bc .Log .Trace ("\u0041\u0063\u0072of\u006f\u0072\u006d\u0020\u0069\u0073\u0020\u0061\u0020n\u0075l\u006c \u006fb\u006a\u0065\u0063\u0074\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029\u000a");
return nil ,nil ;};_eceee ,_ccfd :=_bf .GetDict (_cdaed );if !_ccfd {_bc .Log .Debug ("\u0049n\u0076\u0061\u006c\u0069d\u0020\u0041\u0063\u0072\u006fF\u006fr\u006d \u0065\u006e\u0074\u0072\u0079\u0020\u0025T",_cdaed );_bc .Log .Debug ("\u0044\u006f\u0065\u0073 n\u006f\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0066\u006f\u0072\u006d\u0073");
return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u0061\u0063\u0072\u006ff\u006fr\u006d \u0065\u006e\u0074\u0072\u0079\u0020\u0025T",_cdaed );};_bc .Log .Trace ("\u0048\u0061\u0073\u0020\u0041\u0063\u0072\u006f\u0020f\u006f\u0072\u006d\u0073");
_bc .Log .Trace ("\u0054\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u0074\u0068\u0065\u0020\u0041\u0063r\u006ff\u006f\u0072\u006d\u0073\u0020\u0073\u0074\u0072\u0075\u0063\u0074\u0075\u0072\u0065");if !_dcgfb ._aggga {_fcfdae :=_dcgfb .traverseObjectData (_eceee );
if _fcfdae !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0074\u0072a\u0076\u0065\u0072\u0073\u0065\u0020\u0041\u0063\u0072\u006fFo\u0072\u006d\u0073 \u0028%\u0073\u0029",_fcfdae );
return nil ,_fcfdae ;};};_cffa ,_bbbbda :=_dcgfb .newPdfAcroFormFromDict (_eegfe ,_eceee );if _bbbbda !=nil {return nil ,_bbbbda ;};return _cffa ,nil ;};

// DecodeArray returns the range of color component values in CalGray colorspace.
func (_bfgdc *PdfColorspaceCalGray )DecodeArray ()[]float64 {return []float64 {0.0,1.0}};

// NewPdfOutputIntentFromPdfObject creates a new PdfOutputIntent from the input core.PdfObject.
func NewPdfOutputIntentFromPdfObject (object _bf .PdfObject )(*PdfOutputIntent ,error ){_egfag :=&PdfOutputIntent {};if _edbcd :=_egfag .ParsePdfObject (object );_edbcd !=nil {return nil ,_edbcd ;};return _egfag ,nil ;};

// SetVersion sets the PDF version of the output file.
func (_dcadd *PdfWriter )SetVersion (majorVersion ,minorVersion int ){_dcadd ._abccg .Major =majorVersion ;_dcadd ._abccg .Minor =minorVersion ;};const (BorderStyleSolid BorderStyle =iota ;BorderStyleDashed BorderStyle =iota ;BorderStyleBeveled BorderStyle =iota ;
BorderStyleInset BorderStyle =iota ;BorderStyleUnderline BorderStyle =iota ;);

// GetModelFromPrimitive returns the model corresponding to the `primitive` PdfObject.
func (_aegdb *modelManager )GetModelFromPrimitive (primitive _bf .PdfObject )PdfModel {model ,_dcbcg :=_aegdb ._deade [primitive ];if !_dcbcg {return nil ;};return model ;};func (_dbab *PdfReader )newPdfActionResetFormFromDict (_gadd *_bf .PdfObjectDictionary )(*PdfActionResetForm ,error ){return &PdfActionResetForm {Fields :_gadd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"),Flags :_gadd .Get ("\u0046\u006c\u0061g\u0073")},nil ;
};

// IsEncrypted returns true if the PDF file is encrypted.
func (_edef *PdfReader )IsEncrypted ()(bool ,error ){return _edef ._gafdb .IsEncrypted ()};func (_febca *PdfColorspaceSpecialPattern )String ()string {return "\u0050a\u0074\u0074\u0065\u0072\u006e";};

// IsColored specifies if the pattern is colored.
func (_ffdfd *PdfTilingPattern )IsColored ()bool {if _ffdfd .PaintType !=nil &&*_ffdfd .PaintType ==1{return true ;};return false ;};

// NewCompositePdfFontFromTTFFile loads a composite font from a TTF font file. Composite fonts can
// be used to represent unicode fonts which can have multi-byte character codes, representing a wide
// range of values. They are often used for symbolic languages, including Chinese, Japanese and Korean.
// It is represented by a Type0 Font with an underlying CIDFontType2 and an Identity-H encoding map.
// TODO: May be extended in the future to support a larger variety of CMaps and vertical fonts.
// NOTE: For simple fonts, use NewPdfFontFromTTFFile.
func NewCompositePdfFontFromTTFFile (filePath string )(*PdfFont ,error ){_bbdgg ,_gdeg :=_db .Open (filePath );if _gdeg !=nil {_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u006f\u0070\u0065\u006e\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0076",_gdeg );
return nil ,_gdeg ;};defer _bbdgg .Close ();return NewCompositePdfFontFromTTF (_bbdgg );};

// DecodeArray returns an empty slice as there are no components associated with pattern colorspace.
func (_ecbcb *PdfColorspaceSpecialPattern )DecodeArray ()[]float64 {return []float64 {}};

// NewLTV returns a new LTV client.
func NewLTV (appender *PdfAppender )(*LTV ,error ){_cabfb :=appender .Reader .DSS ;if _cabfb ==nil {_cabfb =NewDSS ();};if _dbaac :=_cabfb .generateHashMaps ();_dbaac !=nil {return nil ,_dbaac ;};return &LTV {CertClient :_fag .NewCertClient (),OCSPClient :_fag .NewOCSPClient (),CRLClient :_fag .NewCRLClient (),SkipExisting :true ,_ceaaf :appender ,_gcgg :_cabfb },nil ;
};

// EnableChain adds the specified certificate chain and validation data (OCSP
// and CRL information) for it to the global scope of the document DSS. The
// added data is used for validating any of the signatures present in the
// document. The LTV client attempts to build the certificate chain up to a
// trusted root by downloading any missing certificates.
func (_cbac *LTV )EnableChain (chain []*_d .Certificate )error {return _cbac .enable (nil ,chain ,"")};

// GetContainingPdfObject returns the container of the outline (indirect object).
func (_bebcb *PdfOutline )GetContainingPdfObject ()_bf .PdfObject {return _bebcb ._ecfae };

// IsCID returns true if the underlying font is CID.
func (_ceadga *PdfFont )IsCID ()bool {return _ceadga .baseFields ().isCIDFont ()};

// SetPdfTitle sets the Title attribute of the output PDF.
func SetPdfTitle (title string ){_ggeae .Lock ();defer _ggeae .Unlock ();_dagbe =title };

// GetNumPages returns the number of pages in the document.
func (_aaee *PdfReader )GetNumPages ()(int ,error ){if _aaee ._gafdb .GetCrypter ()!=nil &&!_aaee ._gafdb .IsAuthenticated (){return 0,_af .Errorf ("\u0066\u0069\u006ce\u0020\u006e\u0065\u0065d\u0020\u0074\u006f\u0020\u0062\u0065\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");
};return len (_aaee ._ggdg ),nil ;};

// Height returns the height of `rect`.
func (_dedgc *PdfRectangle )Height ()float64 {return _fg .Abs (_dedgc .Ury -_dedgc .Lly )};

// EnableAll LTV enables all signatures in the PDF document.
// The signing certificate chain is extracted from each signature dictionary.
// Optionally, additional certificates can be specified through the
// `extraCerts` parameter. The LTV client attempts to build the certificate
// chain up to a trusted root by downloading any missing certificates.
func (_egcb *LTV )EnableAll (extraCerts []*_d .Certificate )error {_cafdb :=_egcb ._ceaaf ._abac .AcroForm ;for _ ,_aaaa :=range _cafdb .AllFields (){_afdf ,_ :=_aaaa .GetContext ().(*PdfFieldSignature );if _afdf ==nil {continue ;};_facg :=_afdf .V ;if _ggfcd :=_egcb .validateSig (_facg );
_ggfcd !=nil {_bc .Log .Debug ("\u0057\u0041\u0052N\u003a\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0076",_ggfcd );
};if _eeecf :=_egcb .Enable (_facg ,extraCerts );_eeecf !=nil {return _eeecf ;};};return nil ;};

// NewPdfDateFromTime will create a PdfDate based on the given time
func NewPdfDateFromTime (timeObj _g .Time )(PdfDate ,error ){_ccba :=timeObj .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_fcfg ,_ :=_ef .ParseInt (_ccba [1:3],10,32);_dcdac ,_ :=_ef .ParseInt (_ccba [4:6],10,32);return PdfDate {_ddgda :int64 (timeObj .Year ()),_eeaeb :int64 (timeObj .Month ()),_fcdcc :int64 (timeObj .Day ()),_bbbc :int64 (timeObj .Hour ()),_gddgc :int64 (timeObj .Minute ()),_bdgge :int64 (timeObj .Second ()),_fdffd :_ccba [0],_bgfda :_fcfg ,_egbag :_dcdac },nil ;
};

// AddImageResource adds an image to the XObject resources.
func (_cdecf *PdfPage )AddImageResource (name _bf .PdfObjectName ,ximg *XObjectImage )error {var _abed *_bf .PdfObjectDictionary ;if _cdecf .Resources .XObject ==nil {_abed =_bf .MakeDict ();_cdecf .Resources .XObject =_abed ;}else {var _gdaf bool ;_abed ,_gdaf =(_cdecf .Resources .XObject ).(*_bf .PdfObjectDictionary );
if !_gdaf {return _eff .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0078\u0072\u0065\u0073\u0020\u0064\u0069\u0063\u0074\u0020\u0074\u0079p\u0065");};};_abed .Set (name ,ximg .ToPdfObject ());return nil ;};

// PdfShadingType1 is a Function-based shading.
type PdfShadingType1 struct{*PdfShading ;Domain *_bf .PdfObjectArray ;Matrix *_bf .PdfObjectArray ;Function []PdfFunction ;};

// ToPdfObject implements interface PdfModel.
func (_egbg *PdfAnnotationRedact )ToPdfObject ()_bf .PdfObject {_egbg .PdfAnnotation .ToPdfObject ();_dagc :=_egbg ._cdaf ;_fcgb :=_dagc .PdfObject .(*_bf .PdfObjectDictionary );_egbg .PdfAnnotationMarkup .appendToPdfDictionary (_fcgb );_fcgb .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0052\u0065\u0064\u0061\u0063\u0074"));
_fcgb .SetIfNotNil ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073",_egbg .QuadPoints );_fcgb .SetIfNotNil ("\u0049\u0043",_egbg .IC );_fcgb .SetIfNotNil ("\u0052\u004f",_egbg .RO );_fcgb .SetIfNotNil ("O\u0076\u0065\u0072\u006c\u0061\u0079\u0054\u0065\u0078\u0074",_egbg .OverlayText );
_fcgb .SetIfNotNil ("\u0052\u0065\u0070\u0065\u0061\u0074",_egbg .Repeat );_fcgb .SetIfNotNil ("\u0044\u0041",_egbg .DA );_fcgb .SetIfNotNil ("\u0051",_egbg .Q );return _dagc ;};

// NewPdfColorspaceSpecialIndexed returns a new Indexed color.
func NewPdfColorspaceSpecialIndexed ()*PdfColorspaceSpecialIndexed {return &PdfColorspaceSpecialIndexed {HiVal :255};};

// ToPdfOutline returns a low level PdfOutline object, based on the current
// instance.
func (_eeaa *Outline )ToPdfOutline ()*PdfOutline {_dcfg :=NewPdfOutline ();var _febfg []*PdfOutlineItem ;var _eagdg int64 ;var _cedff *PdfOutlineItem ;for _ ,_ceecg :=range _eeaa .Entries {_dafaf ,_dbfea :=_ceecg .ToPdfOutlineItem ();_dafaf .Parent =&_dcfg .PdfOutlineTreeNode ;
if _cedff !=nil {_cedff .Next =&_dafaf .PdfOutlineTreeNode ;_dafaf .Prev =&_cedff .PdfOutlineTreeNode ;};_febfg =append (_febfg ,_dafaf );_eagdg +=_dbfea ;_cedff =_dafaf ;};_edabe :=int64 (len (_febfg ));_eagdg +=_edabe ;if _edabe > 0{_dcfg .First =&_febfg [0].PdfOutlineTreeNode ;
_dcfg .Last =&_febfg [_edabe -1].PdfOutlineTreeNode ;_dcfg .Count =&_eagdg ;};return _dcfg ;};func _cafbc (_fbedeg *_bf .PdfObjectDictionary ){_fgbc ,_cefac :=_bf .GetArray (_fbedeg .Get ("\u0057\u0069\u0064\u0074\u0068\u0073"));_gagd ,_aagf :=_bf .GetIntVal (_fbedeg .Get ("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r"));
_eecgba ,_aebd :=_bf .GetIntVal (_fbedeg .Get ("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072"));if _cefac &&_aagf &&_aebd {_afde :=_fgbc .Len ();if _afde !=_eecgba -_gagd +1{_bc .Log .Debug ("\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0057\u0069\u0064\u0074\u0068\u0073\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0025\u0076\u002c\u0020\u004c\u0061\u0073t\u0043\u0068\u0061\u0072\u003a\u0020\u0025\u0076",_afde ,_eecgba );
_dgbd :=_bf .PdfObjectInteger (_gagd +_afde -1);_fbedeg .Set ("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072",&_dgbd );};};};

// ToPdfObject returns the PDF representation of the DSS dictionary.
func (_acee *DSS )ToPdfObject ()_bf .PdfObject {_cgfd :=_acee ._agagg .PdfObject .(*_bf .PdfObjectDictionary );_cgfd .Clear ();_gcdgc :=_bf .MakeDict ();for _gcdgf ,_eafgf :=range _acee .VRI {_gcdgc .Set (*_bf .MakeName (_gcdgf ),_eafgf .ToPdfObject ());
};_cgfd .SetIfNotNil ("\u0043\u0065\u0072t\u0073",_gbagcc (_acee .Certs ));_cgfd .SetIfNotNil ("\u004f\u0043\u0053P\u0073",_gbagcc (_acee .OCSPs ));_cgfd .SetIfNotNil ("\u0043\u0052\u004c\u0073",_gbagcc (_acee .CRLs ));_cgfd .Set ("\u0056\u0052\u0049",_gcdgc );
return _acee ._agagg ;};

// ToPdfObject returns the button field dictionary within an indirect object.
func (_dbgf *PdfFieldButton )ToPdfObject ()_bf .PdfObject {_dbgf .PdfField .ToPdfObject ();_dfag :=_dbgf ._fgcdf ;_cdaad :=_dfag .PdfObject .(*_bf .PdfObjectDictionary );_cdaad .Set ("\u0046\u0054",_bf .MakeName ("\u0042\u0074\u006e"));if _dbgf .Opt !=nil {_cdaad .Set ("\u004f\u0070\u0074",_dbgf .Opt );
};return _dfag ;};

// M returns the value of the magenta component of the color.
func (_bfc *PdfColorDeviceCMYK )M ()float64 {return _bfc [1]};func _dcde (_aaead []byte )(_ecfa ,_fgbdf string ,_gddgf error ){_bc .Log .Trace ("g\u0065\u0074\u0041\u0053CI\u0049S\u0065\u0063\u0074\u0069\u006fn\u0073\u003a\u0020\u0025\u0064\u0020",len (_aaead ));
_gffd :=_dgbc .FindIndex (_aaead );if _gffd ==nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0067\u0065\u0074\u0041\u0053\u0043\u0049\u0049\u0053\u0065\u0063\u0074\u0069o\u006e\u0073\u002e\u0020\u004e\u006f\u0020d\u0069\u0063\u0074\u002e");
return "","",_bf .ErrTypeError ;};_fgbg :=_gffd [1];_edfg :=_gf .Index (string (_aaead [_fgbg :]),_bcdea );if _edfg < 0{_ecfa =string (_aaead [_fgbg :]);return _ecfa ,"",nil ;};_eagg :=_fgbg +_edfg ;_ecfa =string (_aaead [_fgbg :_eagg ]);_ffdd :=_eagg ;
_edfg =_gf .Index (string (_aaead [_ffdd :]),_bbfa );if _edfg < 0{_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0067e\u0074\u0041\u0053\u0043\u0049\u0049\u0053e\u0063\u0074\u0069\u006f\u006e\u0073\u002e\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gddgf );
return "","",_bf .ErrTypeError ;};_cecd :=_ffdd +_edfg ;_fgbdf =string (_aaead [_ffdd :_cecd ]);return _ecfa ,_fgbdf ,nil ;};

// PdfShadingType5 is a Lattice-form Gouraud-shaded triangle mesh.
type PdfShadingType5 struct{*PdfShading ;BitsPerCoordinate *_bf .PdfObjectInteger ;BitsPerComponent *_bf .PdfObjectInteger ;VerticesPerRow *_bf .PdfObjectInteger ;Decode *_bf .PdfObjectArray ;Function []PdfFunction ;};

// PdfActionTrans represents a trans action.
type PdfActionTrans struct{*PdfAction ;Trans _bf .PdfObject ;};

// PdfActionResetForm represents a resetForm action.
type PdfActionResetForm struct{*PdfAction ;Fields _bf .PdfObject ;Flags _bf .PdfObject ;};

// Encoder returns the font's text encoder.
func (_debb *pdfFontSimple )Encoder ()_faf .TextEncoder {if _debb ._adbcf !=nil {return _debb ._adbcf ;};if _debb ._ddgcg !=nil {return _debb ._ddgcg ;};_fdeg ,_ :=_faf .NewSimpleTextEncoder ("\u0053\u0074a\u006e\u0064\u0061r\u0064\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",nil );
return _fdeg ;};

// GetRotate gets the inheritable rotate value, either from the page
// or a higher up page/pages struct.
func (_cfced *PdfPage )GetRotate ()(int64 ,error ){if _cfced .Rotate !=nil {return *_cfced .Rotate ,nil ;};_egec :=_cfced .Parent ;for _egec !=nil {_ebffd ,_gdgbc :=_bf .GetDict (_egec );if !_gdgbc {return 0,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0072\u0065\u006e\u0074\u0020\u006f\u0062\u006a\u0065\u0063t\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _egece :=_ebffd .Get ("\u0052\u006f\u0074\u0061\u0074\u0065");_egece !=nil {_ggfg ,_cdcf :=_bf .GetInt (_egece );if !_cdcf {return 0,_eff .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u006f\u0074a\u0074\u0065\u0020\u0076al\u0075\u0065");};if _ggfg !=nil {return int64 (*_ggfg ),nil ;
};return 0,_eff .New ("\u0072\u006f\u0074\u0061te\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};_egec =_ebffd .Get ("\u0050\u0061\u0072\u0065\u006e\u0074");};return 0,_eff .New ("\u0072o\u0074a\u0074\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};

// NewPdfColorspaceCalRGB returns a new CalRGB colorspace object.
func NewPdfColorspaceCalRGB ()*PdfColorspaceCalRGB {_feafd :=&PdfColorspaceCalRGB {};_feafd .BlackPoint =[]float64 {0.0,0.0,0.0};_feafd .Gamma =[]float64 {1.0,1.0,1.0};_feafd .Matrix =[]float64 {1,0,0,0,1,0,0,0,1};return _feafd ;};

// PdfColorLab represents a color in the L*, a*, b* 3 component colorspace.
// Each component is defined in the range 0.0 - 1.0 where 1.0 is the primary intensity.
type PdfColorLab [3]float64 ;func _fccg (_bfbed *_bf .PdfObjectDictionary ,_ffgab *fontCommon )(*pdfFontType0 ,error ){_bbggg ,_eaadc :=_bf .GetArray (_bfbed .Get ("\u0044e\u0073c\u0065\u006e\u0064\u0061\u006e\u0074\u0046\u006f\u006e\u0074\u0073"));if !_eaadc {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049n\u0076\u0061\u006cid\u0020\u0044\u0065\u0073\u0063\u0065n\u0064\u0061\u006e\u0074\u0046\u006f\u006e\u0074\u0073\u0020\u002d\u0020\u006e\u006f\u0074 \u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079 \u0025\u0073",_ffgab );
return nil ,_bf .ErrRangeError ;};if _bbggg .Len ()!=1{_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0041\u0072\u0072\u0061\u0079\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0031\u0020(%\u0064\u0029",_bbggg .Len ());return nil ,_bf .ErrRangeError ;
};_ggff ,_bffg :=_decaa (_bbggg .Get (0),false );if _bffg !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046a\u0069\u006c\u0065d \u006c\u006f\u0061\u0064\u0069\u006eg\u0020\u0064\u0065\u0073\u0063\u0065\u006e\u0064\u0061\u006e\u0074\u0020\u0066\u006f\u006et\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076 \u0025\u0073",_bffg ,_ffgab );
return nil ,_bffg ;};_ggce :=_cegfa (_ffgab );_ggce .DescendantFont =_ggff ;_agefd ,_eaadc :=_bf .GetNameVal (_bfbed .Get ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"));if _eaadc {if _agefd =="\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048"||_agefd =="\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0056"{_ggce ._aecc =_faf .NewIdentityTextEncoder (_agefd );
}else if _cf .IsPredefinedCMap (_agefd ){_ggce ._caceg ,_bffg =_cf .LoadPredefinedCMap (_agefd );if _bffg !=nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063o\u0075\u006c\u0064 \u006e\u006f\u0074\u0020l\u006f\u0061\u0064\u0020\u0070\u0072\u0065\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0043\u004d\u0061\u0070\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_agefd ,_bffg );
};}else {_bc .Log .Debug ("\u0055\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0063\u006da\u0070\u0020\u0025\u0071",_agefd );};};if _bdce :=_ggff .baseFields ()._ggcb ;_bdce !=nil {if _egcf :=_bdce .Name ();_egcf =="\u0041d\u006fb\u0065\u002d\u0043\u004e\u0053\u0031\u002d\u0055\u0043\u0053\u0032"||_egcf =="\u0041\u0064\u006f\u0062\u0065\u002d\u0047\u0042\u0031-\u0055\u0043\u0053\u0032"||_egcf =="\u0041\u0064\u006f\u0062\u0065\u002d\u004a\u0061\u0070\u0061\u006e\u0031-\u0055\u0043\u0053\u0032"||_egcf =="\u0041\u0064\u006f\u0062\u0065\u002d\u004b\u006f\u0072\u0065\u0061\u0031-\u0055\u0043\u0053\u0032"{_ggce ._aecc =_faf .NewCMapEncoder (_agefd ,_ggce ._caceg ,_bdce );
};};return _ggce ,nil ;};

// PdfColorDeviceGray represents a grayscale color value that shall be represented by a single number in the
// range 0.0 to 1.0 where 0.0 corresponds to black and 1.0 to white.
type PdfColorDeviceGray float64 ;

// PdfActionHide represents a hide action.
type PdfActionHide struct{*PdfAction ;T _bf .PdfObject ;H _bf .PdfObject ;};

// DecodeArray returns the range of color component values in DeviceRGB colorspace.
func (_ebdd *PdfColorspaceDeviceRGB )DecodeArray ()[]float64 {return []float64 {0.0,1.0,0.0,1.0,0.0,1.0};};

// PdfAnnotationLink represents Link annotations.
// (Section 12.5.6.5 p. 403).
type PdfAnnotationLink struct{*PdfAnnotation ;A _bf .PdfObject ;Dest _bf .PdfObject ;H _bf .PdfObject ;PA _bf .PdfObject ;QuadPoints _bf .PdfObject ;BS _bf .PdfObject ;_fcfb *PdfAction ;_abg *PdfReader ;};

// String returns a string that describes `base`.
func (_abce fontCommon )String ()string {return _af .Sprintf ("\u0046\u004f\u004e\u0054\u007b\u0025\u0073\u007d",_abce .coreString ());};

// PdfAppender appends new PDF content to an existing PDF document via incremental updates.
type PdfAppender struct{_fab _ag .ReadSeeker ;_gaed *_bf .PdfParser ;_abac *PdfReader ;Reader *PdfReader ;_bagg []*PdfPage ;_ccab *PdfAcroForm ;_abecf *DSS ;_fcgf *Permissions ;_bfb _bf .XrefTable ;_dafc int64 ;_dcgcc int ;_cbab []_bf .PdfObject ;_ceaf map[_bf .PdfObject ]struct{};
_bgfg map[_bf .PdfObject ]int64 ;_gcbg map[_bf .PdfObject ]struct{};_ebed map[_bf .PdfObject ]struct{};_eac int64 ;_bfbe bool ;_fggd string ;_abgb *EncryptOptions ;_bgd *PdfInfo ;};

// PdfActionSound represents a sound action.
type PdfActionSound struct{*PdfAction ;Sound _bf .PdfObject ;Volume _bf .PdfObject ;Synchronous _bf .PdfObject ;Repeat _bf .PdfObject ;Mix _bf .PdfObject ;};

// NewPdfColorspaceSpecialPattern returns a new pattern color.
func NewPdfColorspaceSpecialPattern ()*PdfColorspaceSpecialPattern {return &PdfColorspaceSpecialPattern {};};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain a single element between 0 and 1.
func (_ccfb *PdfColorspaceCalGray )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_cded :=vals [0];if _cded < 0.0||_cded > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_cded );
return nil ,ErrColorOutOfRange ;};_dfbfc :=NewPdfColorCalGray (_cded );return _dfbfc ,nil ;};func (_daade *PdfReader )loadAnnotations (_faebf _bf .PdfObject )([]*PdfAnnotation ,error ){_dfba ,_febfdf :=_bf .GetArray (_faebf );if !_febfdf {return nil ,_af .Errorf ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};var _dfbgb []*PdfAnnotation ;for _ ,_egcaba :=range _dfba .Elements (){_egcaba =_bf .ResolveReference (_egcaba );if _ ,_fbdeg :=_egcaba .(*_bf .PdfObjectNull );_fbdeg {continue ;};_dbebg ,_cece :=_egcaba .(*_bf .PdfObjectDictionary );_cdffd ,_efbee :=_egcaba .(*_bf .PdfIndirectObject );
if _cece {_cdffd =&_bf .PdfIndirectObject {};_cdffd .PdfObject =_dbebg ;}else {if !_efbee {return nil ,_af .Errorf ("\u0061\u006eno\u0074\u0061\u0074i\u006f\u006e\u0020\u006eot \u0069n \u0061\u006e\u0020\u0069\u006e\u0064\u0069re\u0063\u0074\u0020\u006f\u0062\u006a\u0065c\u0074");
};};_dacba ,_cdgga :=_daade .newPdfAnnotationFromIndirectObject (_cdffd );if _cdgga !=nil {return nil ,_cdgga ;};switch _eecae :=_dacba .GetContext ().(type ){case *PdfAnnotationWidget :for _ ,_aeead :=range _daade .AcroForm .AllFields (){if _aeead ._fgcdf ==_eecae .Parent {_eecae ._adf =_aeead ;
break ;};};};if _dacba !=nil {_dfbgb =append (_dfbgb ,_dacba );};};return _dfbgb ,nil ;};

// NewPdfWriter initializes a new PdfWriter.
func NewPdfWriter ()PdfWriter {_gaagd :=PdfWriter {};_gaagd ._bcgbbe =map[_bf .PdfObject ]struct{}{};_gaagd ._agfac =[]_bf .PdfObject {};_gaagd ._fdbad =map[_bf .PdfObject ][]*_bf .PdfObjectDictionary {};_gaagd ._dacda =map[_bf .PdfObject ]struct{}{};_gaagd ._abccg .Major =1;
_gaagd ._abccg .Minor =3;_ddbgg :=_bf .MakeDict ();_dbgac :=[]struct{_egdb _bf .PdfObjectName ;_ffadeg string ;}{{"\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072",_degff ()},{"\u0043r\u0065\u0061\u0074\u006f\u0072",_cbaac ()},{"\u0041\u0075\u0074\u0068\u006f\u0072",_bcegce ()},{"\u0053u\u0062\u006a\u0065\u0063\u0074",_geebb ()},{"\u0054\u0069\u0074l\u0065",_dgdfb ()},{"\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073",_cgdfb ()}};
for _ ,_gdgaf :=range _dbgac {if _gdgaf ._ffadeg !=""{_ddbgg .Set (_gdgaf ._egdb ,_bf .MakeString (_gdgaf ._ffadeg ));};};if _fadde :=_faafd ();!_fadde .IsZero (){if _cffbc ,_egaaa :=NewPdfDateFromTime (_fadde );_egaaa ==nil {_ddbgg .Set ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_cffbc .ToPdfObject ());
};};if _dcff :=_fadd ();!_dcff .IsZero (){if _gceff ,_dggb :=NewPdfDateFromTime (_dcff );_dggb ==nil {_ddbgg .Set ("\u004do\u0064\u0044\u0061\u0074\u0065",_gceff .ToPdfObject ());};};_cgega :=_bf .PdfIndirectObject {};_cgega .PdfObject =_ddbgg ;_gaagd ._efddb =&_cgega ;
_gaagd .addObject (&_cgega );_ffedg :=_bf .PdfIndirectObject {};_ebbed :=_bf .MakeDict ();_ebbed .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0043a\u0074\u0061\u006c\u006f\u0067"));_ffedg .PdfObject =_ebbed ;_gaagd ._eacbc =&_ffedg ;_gaagd .addObject (_gaagd ._eacbc );
_bbdd ,_acfd :=_eggcb ("\u0077");if _acfd !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_acfd );};_gaagd ._efcfa =_bbdd ;_dbbgae :=_bf .PdfIndirectObject {};_fcdcf :=_bf .MakeDict ();_fcdcf .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0050\u0061\u0067e\u0073"));
_ccbb :=_bf .PdfObjectArray {};_fcdcf .Set ("\u004b\u0069\u0064\u0073",&_ccbb );_fcdcf .Set ("\u0043\u006f\u0075n\u0074",_bf .MakeInteger (0));_dbbgae .PdfObject =_fcdcf ;_gaagd ._bfgbf =&_dbbgae ;_gaagd ._ecabe =map[_bf .PdfObject ]struct{}{};_gaagd .addObject (_gaagd ._bfgbf );
_ebbed .Set ("\u0050\u0061\u0067e\u0073",&_dbbgae );_gaagd ._cecba =_ebbed ;_bc .Log .Trace ("\u0043\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u0025\u0073",_ffedg );return _gaagd ;};func (_gfb *PdfReader )newPdfActionImportDataFromDict (_cbb *_bf .PdfObjectDictionary )(*PdfActionImportData ,error ){_dac ,_bcb :=_aac (_cbb .Get ("\u0046"));
if _bcb !=nil {return nil ,_bcb ;};return &PdfActionImportData {F :_dac },nil ;};

// Outline represents a PDF outline dictionary (Table 152 - p. 376).
// Currently, the Outline object can only be used to construct PDF outlines.
type Outline struct{Entries []*OutlineItem `json:"entries,omitempty"`;};

// NewPdfColorDeviceGray returns a new grayscale color based on an input grayscale float value in range [0-1].
func NewPdfColorDeviceGray (grayVal float64 )*PdfColorDeviceGray {_egdg :=PdfColorDeviceGray (grayVal );return &_egdg ;};func _bgbba (_eaae *fontCommon )*pdfFontSimple {return &pdfFontSimple {fontCommon :*_eaae }};func (_ecgf *PdfWriter )writeXRefStreams (_dced int ,_cfcaf int64 )error {_affdd :=_dced +1;
_ecgf ._baadg [_affdd ]=crossReference {Type :1,ObjectNumber :_affdd ,Offset :_cfcaf };_ddee :=_cdc .NewBuffer (nil );_efbbcc :=_bf .MakeArray ();for _fgaea :=0;_fgaea <=_dced ;{for ;_fgaea <=_dced ;_fgaea ++{_febfe ,_fgggb :=_ecgf ._baadg [_fgaea ];if _fgggb &&(!_ecgf ._dgbga ||_ecgf ._dgbga &&(_febfe .Type ==1&&_febfe .Offset >=_ecgf ._gdgdd ||_febfe .Type ==0)){break ;
};};var _ddfaa int ;for _ddfaa =_fgaea +1;_ddfaa <=_dced ;_ddfaa ++{_eecgd ,_cbedab :=_ecgf ._baadg [_ddfaa ];if _cbedab &&(!_ecgf ._dgbga ||_ecgf ._dgbga &&(_eecgd .Type ==1&&_eecgd .Offset > _ecgf ._gdgdd )){continue ;};break ;};_efbbcc .Append (_bf .MakeInteger (int64 (_fgaea )),_bf .MakeInteger (int64 (_ddfaa -_fgaea )));
for _bffgf :=_fgaea ;_bffgf < _ddfaa ;_bffgf ++{_fgagc :=_ecgf ._baadg [_bffgf ];switch _fgagc .Type {case 0:_c .Write (_ddee ,_c .BigEndian ,byte (0));_c .Write (_ddee ,_c .BigEndian ,uint32 (0));_c .Write (_ddee ,_c .BigEndian ,uint16 (0xFFFF));case 1:_c .Write (_ddee ,_c .BigEndian ,byte (1));
_c .Write (_ddee ,_c .BigEndian ,uint32 (_fgagc .Offset ));_c .Write (_ddee ,_c .BigEndian ,uint16 (_fgagc .Generation ));case 2:_c .Write (_ddee ,_c .BigEndian ,byte (2));_c .Write (_ddee ,_c .BigEndian ,uint32 (_fgagc .ObjectNumber ));_c .Write (_ddee ,_c .BigEndian ,uint16 (_fgagc .Index ));
};};_fgaea =_ddfaa +1;};_gfgd ,_afcfg :=_bf .MakeStream (_ddee .Bytes (),_bf .NewFlateEncoder ());if _afcfg !=nil {return _afcfg ;};_gfgd .ObjectNumber =int64 (_affdd );_gfgd .PdfObjectDictionary .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0058\u0052\u0065\u0066"));
_gfgd .PdfObjectDictionary .Set ("\u0057",_bf .MakeArray (_bf .MakeInteger (1),_bf .MakeInteger (4),_bf .MakeInteger (2)));_gfgd .PdfObjectDictionary .Set ("\u0049\u006e\u0064e\u0078",_efbbcc );_gfgd .PdfObjectDictionary .Set ("\u0053\u0069\u007a\u0065",_bf .MakeInteger (int64 (_affdd +1)));
_gfgd .PdfObjectDictionary .Set ("\u0049\u006e\u0066\u006f",_ecgf ._efddb );_gfgd .PdfObjectDictionary .Set ("\u0052\u006f\u006f\u0074",_ecgf ._eacbc );if _ecgf ._dgbga &&_ecgf ._dbdff > 0{_gfgd .PdfObjectDictionary .Set ("\u0050\u0072\u0065\u0076",_bf .MakeInteger (_ecgf ._dbdff ));
};if _ecgf ._ebefb !=nil {_gfgd .Set ("\u0045n\u0063\u0072\u0079\u0070\u0074",_ecgf ._caacf );};if _ecgf ._bdeaee ==nil &&_ecgf ._ggfdb !=""&&_ecgf ._ebecb !=""{_ecgf ._bdeaee =_bf .MakeArray (_bf .MakeHexString (_ecgf ._ggfdb ),_bf .MakeHexString (_ecgf ._ebecb ));
};if _ecgf ._bdeaee !=nil {_bc .Log .Trace ("\u0049d\u0073\u003a\u0020\u0025\u0073",_ecgf ._bdeaee );_gfgd .Set ("\u0049\u0044",_ecgf ._bdeaee );};_ecgf .writeObject (int (_gfgd .ObjectNumber ),_gfgd );return nil ;};

// CharcodeBytesToUnicode converts PDF character codes `data` to a Go unicode string.
//
// 9.10 Extraction of Text Content (page 292)
// The process of finding glyph descriptions in OpenType fonts by a conforming reader shall be the following:
// • For Type 1 fonts using “CFF” tables, the process shall be as described in 9.6.6.2, "Encodings
//   for Type 1 Fonts".
// • For TrueType fonts using “glyf” tables, the process shall be as described in 9.6.6.4,
//   "Encodings for TrueType Fonts". Since this process sometimes produces ambiguous results,
//   conforming writers, instead of using a simple font, shall use a Type 0 font with an Identity-H
//   encoding and use the glyph indices as character codes, as described following Table 118.
func (_gcea *PdfFont )CharcodeBytesToUnicode (data []byte )(string ,int ,int ){_fcbfb ,_ ,_fcegg :=_gcea .CharcodesToUnicodeWithStats (_gcea .BytesToCharcodes (data ));_gega :=_faf .ExpandLigatures (_fcbfb );return _gega ,_gb .RuneCountInString (_gega ),_fcegg ;
};func (_ceb *PdfReader )newPdfActionNamedFromDict (_fef *_bf .PdfObjectDictionary )(*PdfActionNamed ,error ){return &PdfActionNamed {N :_fef .Get ("\u004e")},nil ;};func (_ebfa *PdfReader )newPdfFieldSignatureFromDict (_ebgf *_bf .PdfObjectDictionary )(*PdfFieldSignature ,error ){_dbedf :=&PdfFieldSignature {};
_ecbff ,_egfb :=_bf .GetIndirect (_ebgf .Get ("\u0056"));if _egfb {var _ebdfc error ;_dbedf .V ,_ebdfc =_ebfa .newPdfSignatureFromIndirect (_ecbff );if _ebdfc !=nil {return nil ,_ebdfc ;};};_dbedf .Lock ,_ =_bf .GetIndirect (_ebgf .Get ("\u004c\u006f\u0063\u006b"));
_dbedf .SV ,_ =_bf .GetIndirect (_ebgf .Get ("\u0053\u0056"));return _dbedf ,nil ;};

// NewPdfColorCalRGB returns a new CalRBG color.
func NewPdfColorCalRGB (a ,b ,c float64 )*PdfColorCalRGB {_bgaeg :=PdfColorCalRGB {a ,b ,c };return &_bgaeg ;};

// PdfColorspaceSpecialIndexed is an indexed color space is a lookup table, where the input element
// is an index to the lookup table and the output is a color defined in the lookup table in the Base
// colorspace.
// [/Indexed base hival lookup]
type PdfColorspaceSpecialIndexed struct{Base PdfColorspace ;HiVal int ;Lookup _bf .PdfObject ;_fddea []byte ;_gbfc *_bf .PdfIndirectObject ;};

// ToPdfObject returns the PDF representation of the colorspace.
func (_eade *PdfColorspaceDeviceGray )ToPdfObject ()_bf .PdfObject {return _bf .MakeName ("\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079");};

// ToPdfObject implements interface PdfModel.
func (_dccg *PdfAnnotationProjection )ToPdfObject ()_bf .PdfObject {_dccg .PdfAnnotation .ToPdfObject ();_ddf :=_dccg ._cdaf ;_beg :=_ddf .PdfObject .(*_bf .PdfObjectDictionary );_dccg .PdfAnnotationMarkup .appendToPdfDictionary (_beg );return _ddf ;};


// AllFields returns a flattened list of all fields in the form.
func (_febcb *PdfAcroForm )AllFields ()[]*PdfField {if _febcb ==nil {return nil ;};var _aead []*PdfField ;if _febcb .Fields !=nil {for _ ,_aegcb :=range *_febcb .Fields {_aead =append (_aead ,_aefgc (_aegcb )...);};};return _aead ;};const (ActionTypeGoTo PdfActionType ="\u0047\u006f\u0054\u006f";
ActionTypeGoTo3DView PdfActionType ="\u0047\u006f\u0054\u006f\u0033\u0044\u0056\u0069\u0065\u0077";ActionTypeGoToE PdfActionType ="\u0047\u006f\u0054o\u0045";ActionTypeGoToR PdfActionType ="\u0047\u006f\u0054o\u0052";ActionTypeHide PdfActionType ="\u0048\u0069\u0064\u0065";
ActionTypeImportData PdfActionType ="\u0049\u006d\u0070\u006f\u0072\u0074\u0044\u0061\u0074\u0061";ActionTypeJavaScript PdfActionType ="\u004a\u0061\u0076\u0061\u0053\u0063\u0072\u0069\u0070\u0074";ActionTypeLaunch PdfActionType ="\u004c\u0061\u0075\u006e\u0063\u0068";
ActionTypeMovie PdfActionType ="\u004d\u006f\u0076i\u0065";ActionTypeNamed PdfActionType ="\u004e\u0061\u006de\u0064";ActionTypeRendition PdfActionType ="\u0052e\u006e\u0064\u0069\u0074\u0069\u006fn";ActionTypeResetForm PdfActionType ="\u0052e\u0073\u0065\u0074\u0046\u006f\u0072m";
ActionTypeSetOCGState PdfActionType ="S\u0065\u0074\u004f\u0043\u0047\u0053\u0074\u0061\u0074\u0065";ActionTypeSound PdfActionType ="\u0053\u006f\u0075n\u0064";ActionTypeSubmitForm PdfActionType ="\u0053\u0075\u0062\u006d\u0069\u0074\u0046\u006f\u0072\u006d";
ActionTypeThread PdfActionType ="\u0054\u0068\u0072\u0065\u0061\u0064";ActionTypeTrans PdfActionType ="\u0054\u0072\u0061n\u0073";ActionTypeURI PdfActionType ="\u0055\u0052\u0049";);

// ImageToRGB converts an image with samples in Separation CS to an image with samples specified in
// DeviceRGB CS.
func (_gbdb *PdfColorspaceSpecialSeparation )ImageToRGB (img Image )(Image ,error ){_efdec :=_de .NewReader (img .getBase ());_dgcec :=_ff .NewImageBase (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),_gbdb .AlternateSpace .GetNumComponents (),nil ,img ._gfegf ,nil );
_befc :=_de .NewWriter (_dgcec );_aacd :=_fg .Pow (2,float64 (img .BitsPerComponent ))-1;_bc .Log .Trace ("\u0053\u0065\u0070a\u0072\u0061\u0074\u0069\u006f\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u002d\u003e\u0020\u0054\u006f\u0052\u0047\u0042\u0020\u0063o\u006e\u0076\u0065\u0072\u0073\u0069\u006f\u006e");
_bc .Log .Trace ("\u0054i\u006et\u0054\u0072\u0061\u006e\u0073f\u006f\u0072m\u003a\u0020\u0025\u002b\u0076",_gbdb .TintTransform );_fgdab :=_gbdb .AlternateSpace .DecodeArray ();var (_geeg uint32 ;_fdgd error ;);for {_geeg ,_fdgd =_efdec .ReadSample ();
if _fdgd ==_ag .EOF {break ;};if _fdgd !=nil {return img ,_fdgd ;};_egca :=float64 (_geeg )/_aacd ;_gcge ,_adeg :=_gbdb .TintTransform .Evaluate ([]float64 {_egca });if _adeg !=nil {return img ,_adeg ;};for _bbaa ,_egeb :=range _gcge {_fgdbe :=_ff .LinearInterpolate (_egeb ,_fgdab [_bbaa *2],_fgdab [_bbaa *2+1],0,1);
if _adeg =_befc .WriteSample (uint32 (_fgdbe *_aacd ));_adeg !=nil {return img ,_adeg ;};};};return _gbdb .AlternateSpace .ImageToRGB (_cgfba (&_dgcec ));};func (_afagb fontCommon )fontFlags ()int {if _afagb ._cedfe ==nil {return 0;};return _afagb ._cedfe ._edcaf ;
};func _ebaa (_abfca _bf .PdfObject )(*PdfColorspaceCalRGB ,error ){_acdeg :=NewPdfColorspaceCalRGB ();if _bcgb ,_bage :=_abfca .(*_bf .PdfIndirectObject );_bage {_acdeg ._gafc =_bcgb ;};_abfca =_bf .TraceToDirectObject (_abfca );_gfe ,_cbbf :=_abfca .(*_bf .PdfObjectArray );
if !_cbbf {return nil ,_af .Errorf ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};if _gfe .Len ()!=2{return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u0043\u0061\u006c\u0052G\u0042 \u0063o\u006c\u006f\u0072\u0073\u0070\u0061\u0063e");
};_abfca =_bf .TraceToDirectObject (_gfe .Get (0));_ecba ,_cbbf :=_abfca .(*_bf .PdfObjectName );if !_cbbf {return nil ,_af .Errorf ("\u0043\u0061l\u0052\u0047\u0042\u0020\u006e\u0061\u006d\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0062je\u0063\u0074");
};if *_ecba !="\u0043\u0061\u006c\u0052\u0047\u0042"{return nil ,_af .Errorf ("\u006e\u006f\u0074 a\u0020\u0043\u0061\u006c\u0052\u0047\u0042\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065");};_abfca =_bf .TraceToDirectObject (_gfe .Get (1));
_cgga ,_cbbf :=_abfca .(*_bf .PdfObjectDictionary );if !_cbbf {return nil ,_af .Errorf ("\u0043\u0061l\u0052\u0047\u0042\u0020\u006e\u0061\u006d\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0062je\u0063\u0074");};
_abfca =_cgga .Get ("\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074");_abfca =_bf .TraceToDirectObject (_abfca );_ggac ,_cbbf :=_abfca .(*_bf .PdfObjectArray );if !_cbbf {return nil ,_af .Errorf ("\u0043\u0061\u006c\u0052\u0047\u0042\u003a\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0057\u0068\u0069\u0074\u0065\u0050o\u0069\u006e\u0074");
};if _ggac .Len ()!=3{return nil ,_af .Errorf ("\u0043\u0061\u006c\u0052\u0047\u0042\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u0057h\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074\u0020\u0061\u0072\u0072\u0061\u0079");};_gegf ,_degc :=_ggac .GetAsFloat64Slice ();
if _degc !=nil {return nil ,_degc ;};_acdeg .WhitePoint =_gegf ;_abfca =_cgga .Get ("\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074");if _abfca !=nil {_abfca =_bf .TraceToDirectObject (_abfca );_cebe ,_fegf :=_abfca .(*_bf .PdfObjectArray );
if !_fegf {return nil ,_af .Errorf ("\u0043\u0061\u006c\u0052\u0047\u0042\u003a\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0042\u006c\u0061\u0063\u006b\u0050o\u0069\u006e\u0074");};if _cebe .Len ()!=3{return nil ,_af .Errorf ("\u0043\u0061\u006c\u0052\u0047\u0042\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u0042l\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074\u0020\u0061\u0072\u0072\u0061\u0079");
};_dbgg ,_cgd :=_cebe .GetAsFloat64Slice ();if _cgd !=nil {return nil ,_cgd ;};_acdeg .BlackPoint =_dbgg ;};_abfca =_cgga .Get ("\u0047\u0061\u006dm\u0061");if _abfca !=nil {_abfca =_bf .TraceToDirectObject (_abfca );_fegfb ,_ddabf :=_abfca .(*_bf .PdfObjectArray );
if !_ddabf {return nil ,_af .Errorf ("C\u0061\u006c\u0052\u0047B:\u0020I\u006e\u0076\u0061\u006c\u0069d\u0020\u0047\u0061\u006d\u006d\u0061");};if _fegfb .Len ()!=3{return nil ,_af .Errorf ("C\u0061\u006c\u0052\u0047\u0042\u003a \u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0047a\u006d\u006d\u0061 \u0061r\u0072\u0061\u0079");
};_gfaf ,_bebe :=_fegfb .GetAsFloat64Slice ();if _bebe !=nil {return nil ,_bebe ;};_acdeg .Gamma =_gfaf ;};_abfca =_cgga .Get ("\u004d\u0061\u0074\u0072\u0069\u0078");if _abfca !=nil {_abfca =_bf .TraceToDirectObject (_abfca );_eagf ,_degcf :=_abfca .(*_bf .PdfObjectArray );
if !_degcf {return nil ,_af .Errorf ("\u0043\u0061\u006c\u0052GB\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u004d\u0061\u0074\u0072i\u0078");};if _eagf .Len ()!=9{_bc .Log .Error ("\u004d\u0061t\u0072\u0069\u0078 \u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0073",_eagf .String ());
return nil ,_af .Errorf ("\u0043\u0061\u006c\u0052G\u0042\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u004da\u0074\u0072\u0069\u0078\u0020\u0061\u0072r\u0061\u0079");};_cadd ,_dfbd :=_eagf .GetAsFloat64Slice ();if _dfbd !=nil {return nil ,_dfbd ;
};_acdeg .Matrix =_cadd ;};return _acdeg ,nil ;};

// PdfPage represents a page in a PDF document. (7.7.3.3 - Table 30).
type PdfPage struct{Parent _bf .PdfObject ;LastModified *PdfDate ;Resources *PdfPageResources ;CropBox *PdfRectangle ;MediaBox *PdfRectangle ;BleedBox *PdfRectangle ;TrimBox *PdfRectangle ;ArtBox *PdfRectangle ;BoxColorInfo _bf .PdfObject ;Contents _bf .PdfObject ;
Rotate *int64 ;Group _bf .PdfObject ;Thumb _bf .PdfObject ;B _bf .PdfObject ;Dur _bf .PdfObject ;Trans _bf .PdfObject ;AA _bf .PdfObject ;Metadata _bf .PdfObject ;PieceInfo _bf .PdfObject ;StructParents _bf .PdfObject ;ID _bf .PdfObject ;PZ _bf .PdfObject ;
SeparationInfo _bf .PdfObject ;Tabs _bf .PdfObject ;TemplateInstantiated _bf .PdfObject ;PresSteps _bf .PdfObject ;UserUnit _bf .PdfObject ;VP _bf .PdfObject ;Annots _bf .PdfObject ;_gbcab []*PdfAnnotation ;_dfcbc *_bf .PdfObjectDictionary ;_cddaa *_bf .PdfIndirectObject ;
_eegf *PdfReader ;};

// Encoder returns the font's text encoder.
func (_gfadc pdfCIDFontType0 )Encoder ()_faf .TextEncoder {return _gfadc ._gbca };

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_ffbe *PdfShadingType4 )ToPdfObject ()_bf .PdfObject {_ffbe .PdfShading .ToPdfObject ();_dbgcf ,_gabfg :=_ffbe .getShadingDict ();if _gabfg !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _ffbe .BitsPerCoordinate !=nil {_dbgcf .Set ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065",_ffbe .BitsPerCoordinate );};if _ffbe .BitsPerComponent !=nil {_dbgcf .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_ffbe .BitsPerComponent );
};if _ffbe .BitsPerFlag !=nil {_dbgcf .Set ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0046\u006c\u0061\u0067",_ffbe .BitsPerFlag );};if _ffbe .Decode !=nil {_dbgcf .Set ("\u0044\u0065\u0063\u006f\u0064\u0065",_ffbe .Decode );};if _ffbe .Function !=nil {if len (_ffbe .Function )==1{_dbgcf .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_ffbe .Function [0].ToPdfObject ());
}else {_ebgab :=_bf .MakeArray ();for _ ,_addf :=range _ffbe .Function {_ebgab .Append (_addf .ToPdfObject ());};_dbgcf .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_ebgab );};};return _ffbe ._daaad ;};

// GetContentStreamObjs returns a slice of PDF objects containing the content
// streams of the page.
func (_adabd *PdfPage )GetContentStreamObjs ()[]_bf .PdfObject {if _adabd .Contents ==nil {return nil ;};_cfcac :=_bf .TraceToDirectObject (_adabd .Contents );if _eafc ,_eadec :=_cfcac .(*_bf .PdfObjectArray );_eadec {return _eafc .Elements ();};return []_bf .PdfObject {_cfcac };
};func _ceccb (_dbeeg *_bf .PdfIndirectObject )(*PdfOutline ,error ){_ggeb ,_ggab :=_dbeeg .PdfObject .(*_bf .PdfObjectDictionary );if !_ggab {return nil ,_af .Errorf ("\u006f\u0075\u0074l\u0069\u006e\u0065\u0020o\u0062\u006a\u0065\u0063\u0074\u0020\u006eo\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_bdccg :=NewPdfOutline ();if _eaedd :=_ggeb .Get ("\u0054\u0079\u0070\u0065");_eaedd !=nil {_bgcfb ,_defbcf :=_eaedd .(*_bf .PdfObjectName );if _defbcf {if *_bgcfb !="\u004f\u0075\u0074\u006c\u0069\u006e\u0065\u0073"{_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0054y\u0070\u0065\u0020\u0021\u003d\u0020\u004f\u0075\u0074l\u0069\u006e\u0065s\u0020(\u0025\u0073\u0029",*_bgcfb );
};};};if _aeaae :=_ggeb .Get ("\u0043\u006f\u0075n\u0074");_aeaae !=nil {_cfdeb ,_gddcg :=_bf .GetNumberAsInt64 (_aeaae );if _gddcg !=nil {return nil ,_gddcg ;};_bdccg .Count =&_cfdeb ;};return _bdccg ,nil ;};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain a single element.
func (_ceebb *PdfColorspaceSpecialIndexed )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};N :=_ceebb .Base .GetNumComponents ();_edcf :=int (vals [0])*N ;
if _edcf < 0||(_edcf +N -1)>=len (_ceebb ._fddea ){_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_edcf );return nil ,ErrColorOutOfRange ;};_deda :=_ceebb ._fddea [_edcf :_edcf +N ];
var _acfb []float64 ;for _ ,_ccbe :=range _deda {_acfb =append (_acfb ,float64 (_ccbe )/255.0);};_gddcc ,_eaeab :=_ceebb .Base .ColorFromFloats (_acfb );if _eaeab !=nil {return nil ,_eaeab ;};return _gddcc ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_cef *PdfActionSubmitForm )ToPdfObject ()_bf .PdfObject {_cef .PdfAction .ToPdfObject ();_geec :=_cef ._fda ;_eaf :=_geec .PdfObject .(*_bf .PdfObjectDictionary );_eaf .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeSubmitForm )));if _cef .F !=nil {_eaf .Set ("\u0046",_cef .F .ToPdfObject ());
};_eaf .SetIfNotNil ("\u0046\u0069\u0065\u006c\u0064\u0073",_cef .Fields );_eaf .SetIfNotNil ("\u0046\u006c\u0061g\u0073",_cef .Flags );return _geec ;};

// ToPdfObject returns a stream object.
func (_fgcfg *XObjectForm )ToPdfObject ()_bf .PdfObject {_gfefb :=_fgcfg ._cdaggd ;_egfad :=_gfefb .PdfObjectDictionary ;if _fgcfg .Filter !=nil {_egfad =_fgcfg .Filter .MakeStreamDict ();_gfefb .PdfObjectDictionary =_egfad ;};_egfad .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
_egfad .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0046\u006f\u0072\u006d"));_egfad .SetIfNotNil ("\u0046\u006f\u0072\u006d\u0054\u0079\u0070\u0065",_fgcfg .FormType );_egfad .SetIfNotNil ("\u0042\u0042\u006f\u0078",_fgcfg .BBox );_egfad .SetIfNotNil ("\u004d\u0061\u0074\u0072\u0069\u0078",_fgcfg .Matrix );
if _fgcfg .Resources !=nil {_egfad .SetIfNotNil ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s",_fgcfg .Resources .ToPdfObject ());};_egfad .SetIfNotNil ("\u0047\u0072\u006fu\u0070",_fgcfg .Group );_egfad .SetIfNotNil ("\u0052\u0065\u0066",_fgcfg .Ref );
_egfad .SetIfNotNil ("\u004d\u0065\u0074\u0061\u0044\u0061\u0074\u0061",_fgcfg .MetaData );_egfad .SetIfNotNil ("\u0050i\u0065\u0063\u0065\u0049\u006e\u0066o",_fgcfg .PieceInfo );_egfad .SetIfNotNil ("\u004c\u0061\u0073t\u004d\u006f\u0064\u0069\u0066\u0069\u0065\u0064",_fgcfg .LastModified );
_egfad .SetIfNotNil ("\u0053\u0074\u0072u\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074",_fgcfg .StructParent );_egfad .SetIfNotNil ("\u0053\u0074\u0072\u0075\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074\u0073",_fgcfg .StructParents );_egfad .SetIfNotNil ("\u004f\u0050\u0049",_fgcfg .OPI );
_egfad .SetIfNotNil ("\u004f\u0043",_fgcfg .OC );_egfad .SetIfNotNil ("\u004e\u0061\u006d\u0065",_fgcfg .Name );_egfad .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_fgcfg .Stream ))));_gfefb .Stream =_fgcfg .Stream ;return _gfefb ;
};func (_febc *PdfColorspaceCalRGB )String ()string {return "\u0043\u0061\u006c\u0052\u0047\u0042"};

// Enable LTV enables the specified signature. The signing certificate
// chain is extracted from the signature dictionary. Optionally, additional
// certificates can be specified through the `extraCerts` parameter.
// The LTV client attempts to build the certificate chain up to a trusted root
// by downloading any missing certificates.
func (_fadcg *LTV )Enable (sig *PdfSignature ,extraCerts []*_d .Certificate )error {if _eacge :=_fadcg .validateSig (sig );_eacge !=nil {return _eacge ;};_egdge ,_gbgb :=_fadcg .generateVRIKey (sig );if _gbgb !=nil {return _gbgb ;};if _ ,_fabc :=_fadcg ._gcgg .VRI [_egdge ];
_fabc &&_fadcg .SkipExisting {return nil ;};_gbacc ,_gbgb :=sig .GetCerts ();if _gbgb !=nil {return _gbgb ;};return _fadcg .enable (_gbacc ,extraCerts ,_egdge );};var _ pdfFont =(*pdfFontType0 )(nil );

// Clear clears flag fl from the flag and returns the resulting flag.
func (_ebde FieldFlag )Clear (fl FieldFlag )FieldFlag {return FieldFlag (_ebde .Mask ()&^fl .Mask ())};

// CompliancePdfReader is a wrapper over PdfReader that is used for verifying if the input Pdf document matches the
// compliance rules of standards like PDF/A.
// NOTE: This implementation is in experimental development state.
// 	Keep in mind that it might change in the subsequent minor versions.
type CompliancePdfReader struct{*PdfReader ;_dgefg _bf .ParserMetadata ;};

// ImageToGray returns a new grayscale image based on the passed in RGB image.
func (_bdedg *PdfColorspaceDeviceRGB )ImageToGray (img Image )(Image ,error ){if img .ColorComponents !=3{return img ,_eff .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0069\u0073\u0020\u006e\u006ft\u0020\u0061\u0020\u0044\u0065\u0076\u0069c\u0065\u0052\u0047\u0042");
};_aega ,_dbdgb :=_ff .NewImage (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),img .ColorComponents ,img .Data ,img ._gfegf ,img ._dbcfb );if _dbdgb !=nil {return img ,_dbdgb ;};_acf ,_dbdgb :=_ff .GrayConverter .Convert (_aega );if _dbdgb !=nil {return img ,_dbdgb ;
};return _cgfba (_acf .Base ()),nil ;};

// PdfActionType represents an action type in PDF (section 12.6.4 p. 417).
type PdfActionType string ;

// AnnotFilterFunc represents a PDF annotation filtering function. If the function
// returns true, the annotation is kept, otherwise it is discarded.
type AnnotFilterFunc func (*PdfAnnotation )bool ;func (_fgde *pdfFontType0 )baseFields ()*fontCommon {return &_fgde .fontCommon };

// NewXObjectForm creates a brand new XObject Form. Creates a new underlying PDF object stream primitive.
func NewXObjectForm ()*XObjectForm {_ceafd :=&XObjectForm {};_egee :=&_bf .PdfObjectStream {};_egee .PdfObjectDictionary =_bf .MakeDict ();_ceafd ._cdaggd =_egee ;return _ceafd ;};

// SetRotation sets the rotation of all pages added to writer. The rotation is
// specified in degrees and must be a multiple of 90.
// The Rotate field of individual pages has priority over the global rotation.
func (_dbcfg *PdfWriter )SetRotation (rotate int64 )error {_cedgc ,_gdgae :=_bf .GetDict (_dbcfg ._bfgbf );if !_gdgae {return ErrTypeCheck ;};_cedgc .Set ("\u0052\u006f\u0074\u0061\u0074\u0065",_bf .MakeInteger (rotate ));return nil ;};

// NewPdfFieldSignature returns an initialized signature field.
func NewPdfFieldSignature (signature *PdfSignature )*PdfFieldSignature {_ggfa :=&PdfFieldSignature {};_ggfa .PdfField =NewPdfField ();_ggfa .PdfField .SetContext (_ggfa );_ggfa .PdfAnnotationWidget =NewPdfAnnotationWidget ();_ggfa .PdfAnnotationWidget .SetContext (_ggfa );
_ggfa .PdfAnnotationWidget ._cdaf =_ggfa .PdfField ._fgcdf ;_ggfa .T =_bf .MakeString ("");_ggfa .F =_bf .MakeInteger (132);_ggfa .V =signature ;return _ggfa ;};func (_ceggg fontCommon )asPdfObjectDictionary (_cfec string )*_bf .PdfObjectDictionary {if _cfec !=""&&_ceggg ._fdfb !=""&&_cfec !=_ceggg ._fdfb {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0061\u0073\u0050\u0064\u0066\u004f\u0062\u006a\u0065\u0063\u0074\u0044\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020O\u0076\u0065\u0072\u0072\u0069\u0064\u0069\u006e\u0067\u0020\u0073\u0075\u0062t\u0079\u0070\u0065\u0020\u0074\u006f \u0025\u0023\u0071 \u0025\u0073",_cfec ,_ceggg );
}else if _cfec ==""&&_ceggg ._fdfb ==""{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0061s\u0050\u0064\u0066Ob\u006a\u0065\u0063\u0074\u0044\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0020\u0073\u0075\u0062\u0074y\u0070\u0065\u002e\u0020\u0066\u006f\u006e\u0074=\u0025\u0073",_ceggg );
}else if _ceggg ._fdfb ==""{_ceggg ._fdfb =_cfec ;};_dgeg :=_bf .MakeDict ();_dgeg .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0046\u006f\u006e\u0074"));_dgeg .Set ("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074",_bf .MakeName (_ceggg ._adccf ));
_dgeg .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName (_ceggg ._fdfb ));if _ceggg ._cedfe !=nil {_dgeg .Set ("\u0046\u006f\u006e\u0074\u0044\u0065\u0073\u0063\u0072i\u0070\u0074\u006f\u0072",_ceggg ._cedfe .ToPdfObject ());};if _ceggg ._bcdc !=nil {_dgeg .Set ("\u0054o\u0055\u006e\u0069\u0063\u006f\u0064e",_ceggg ._bcdc );
}else if _ceggg ._ggcb !=nil {_bbde ,_fbcd :=_ceggg ._ggcb .Stream ();if _fbcd !=nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006eo\u0074\u0020\u0067\u0065\u0074\u0020C\u004d\u0061\u0070\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e\u0020\u0065r\u0072\u003d\u0025\u0076",_fbcd );
}else {_dgeg .Set ("\u0054o\u0055\u006e\u0069\u0063\u006f\u0064e",_bbde );};};return _dgeg ;};

// ToPdfObject returns the PDF representation of the colorspace.
func (_adfb *PdfColorspaceSpecialSeparation )ToPdfObject ()_bf .PdfObject {_afef :=_bf .MakeArray (_bf .MakeName ("\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006f\u006e"));_afef .Append (_adfb .ColorantName );_afef .Append (_adfb .AlternateSpace .ToPdfObject ());
_afef .Append (_adfb .TintTransform .ToPdfObject ());if _adfb ._dade !=nil {_adfb ._dade .PdfObject =_afef ;return _adfb ._dade ;};return _afef ;};

// SetFilter sets compression filter. Decodes with current filter sets and
// encodes the data with the new filter.
func (_cddb *XObjectImage )SetFilter (encoder _bf .StreamEncoder )error {_afcae :=_cddb .Stream ;_eabbd ,_bddgc :=_cddb .Filter .DecodeBytes (_afcae );if _bddgc !=nil {return _bddgc ;};_cddb .Filter =encoder ;encoder .UpdateParams (_cddb .getParamsDict ());
_afcae ,_bddgc =encoder .EncodeBytes (_eabbd );if _bddgc !=nil {return _bddgc ;};_cddb .Stream =_afcae ;return nil ;};var _afab =map[string ]string {"\u0053\u0079\u006d\u0062\u006f\u006c":"\u0053\u0079\u006d\u0062\u006f\u006c\u0045\u006e\u0063o\u0064\u0069\u006e\u0067","\u005a\u0061\u0070f\u0044\u0069\u006e\u0067\u0062\u0061\u0074\u0073":"Z\u0061p\u0066\u0044\u0069\u006e\u0067\u0062\u0061\u0074s\u0045\u006e\u0063\u006fdi\u006e\u0067"};


// NewPdfAnnotationUnderline returns a new text underline annotation.
func NewPdfAnnotationUnderline ()*PdfAnnotationUnderline {_fbag :=NewPdfAnnotation ();_aag :=&PdfAnnotationUnderline {};_aag .PdfAnnotation =_fbag ;_aag .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_fbag .SetContext (_aag );return _aag ;};func (_aggc *PdfColorspaceDeviceGray )String ()string {return "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
};

// AcroFormRepairOptions contains options for rebuilding the AcroForm.
type AcroFormRepairOptions struct{};func _cdagb (_bfgb _bf .PdfObject ,_daca *fontCommon )(*_cf .CMap ,error ){_bgeeb ,_afagd :=_bf .GetStream (_bfgb );if !_afagd {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0074\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u0054\u006f\u0043m\u0061\u0070\u003a\u0020\u004e\u006f\u0074\u0020\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0054\u0029",_bfgb );
return nil ,_bf .ErrTypeError ;};_ccgbe ,_gdgf :=_bf .DecodeStream (_bgeeb );if _gdgf !=nil {return nil ,_gdgf ;};_ffcaf ,_gdgf :=_cf .LoadCmapFromData (_ccgbe ,!_daca .isCIDFont ());if _gdgf !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004f\u0062\u006a\u0065\u0063\u0074\u004e\u0075\u006d\u0062\u0065\u0072\u003d\u0025\u0064\u0020\u0065\u0072r=\u0025\u0076",_bgeeb .ObjectNumber ,_gdgf );
};return _ffcaf ,_gdgf ;};func _eecac (_dgedc *_bf .PdfObjectDictionary ,_fegg *fontCommon )(*pdfCIDFontType0 ,error ){if _fegg ._fdfb !="\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030"{_bc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0046\u006fn\u0074\u0020\u0053u\u0062\u0054\u0079\u0070\u0065\u0020\u0021\u003d\u0020CI\u0044\u0046\u006fn\u0074\u0054y\u0070\u0065\u0030\u002e\u0020\u0066o\u006e\u0074=\u0025\u0073",_fegg );
return nil ,_bf .ErrRangeError ;};_gcba :=_fcaa (_fegg );_gbdbd ,_gfbgg :=_bf .GetDict (_dgedc .Get ("\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f"));if !_gfbgg {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043I\u0044\u0053\u0079st\u0065\u006d\u0049\u006e\u0066\u006f \u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029\u0020\u006d\u0069\u0073\u0073i\u006e\u0067\u002e\u0020\u0066\u006f\u006e\u0074=\u0025\u0073",_fegg );
return nil ,ErrRequiredAttributeMissing ;};_gcba .CIDSystemInfo =_gbdbd ;_gcba .DW =_dgedc .Get ("\u0044\u0057");_gcba .W =_dgedc .Get ("\u0057");_gcba .DW2 =_dgedc .Get ("\u0044\u0057\u0032");_gcba .W2 =_dgedc .Get ("\u0057\u0032");_gcba ._ededd =1000.0;
if _geag ,_aafgb :=_bf .GetNumberAsFloat (_gcba .DW );_aafgb ==nil {_gcba ._ededd =_geag ;};_cfgg ,_eceb :=_ebdfb (_gcba .W );if _eceb !=nil {return nil ,_eceb ;};if _cfgg ==nil {_cfgg =map[_faf .CharCode ]float64 {};};_gcba ._decg =_cfgg ;return _gcba ,nil ;
};

// PdfShadingType7 is a Tensor-product patch mesh.
type PdfShadingType7 struct{*PdfShading ;BitsPerCoordinate *_bf .PdfObjectInteger ;BitsPerComponent *_bf .PdfObjectInteger ;BitsPerFlag *_bf .PdfObjectInteger ;Decode *_bf .PdfObjectArray ;Function []PdfFunction ;};

// ToPdfOutlineItem returns a low level PdfOutlineItem object,
// based on the current instance.
func (_dadc *OutlineItem )ToPdfOutlineItem ()(*PdfOutlineItem ,int64 ){_fcff :=NewPdfOutlineItem ();_fcff .Title =_bf .MakeEncodedString (_dadc .Title ,true );_fcff .Dest =_dadc .Dest .ToPdfObject ();var _ggcd []*PdfOutlineItem ;var _dfgfb int64 ;var _deeac *PdfOutlineItem ;
for _ ,_cacf :=range _dadc .Entries {_dfcdg ,_fcgbe :=_cacf .ToPdfOutlineItem ();_dfcdg .Parent =&_fcff .PdfOutlineTreeNode ;if _deeac !=nil {_deeac .Next =&_dfcdg .PdfOutlineTreeNode ;_dfcdg .Prev =&_deeac .PdfOutlineTreeNode ;};_ggcd =append (_ggcd ,_dfcdg );
_dfgfb +=_fcgbe ;_deeac =_dfcdg ;};_accga :=len (_ggcd );_dfgfb +=int64 (_accga );if _accga > 0{_fcff .First =&_ggcd [0].PdfOutlineTreeNode ;_fcff .Last =&_ggcd [_accga -1].PdfOutlineTreeNode ;_fcff .Count =&_dfgfb ;};return _fcff ,_dfgfb ;};func _eggcb (_bbcg string )(string ,error ){var _dcef _cdc .Buffer ;
_dcef .WriteString (_bbcg );_geagga :=make ([]byte ,8+16);_cggf :=_g .Now ().UTC ().UnixNano ();_c .BigEndian .PutUint64 (_geagga ,uint64 (_cggf ));_ ,_egabg :=_ccb .Read (_geagga [8:]);if _egabg !=nil {return "",_egabg ;};_dcef .WriteString (_fa .EncodeToString (_geagga ));
return _dcef .String (),nil ;};func (_bdgc *PdfReader )newPdfAnnotationInkFromDict (_afaf *_bf .PdfObjectDictionary )(*PdfAnnotationInk ,error ){_cbgd :=PdfAnnotationInk {};_aeae ,_dea :=_bdgc .newPdfAnnotationMarkupFromDict (_afaf );if _dea !=nil {return nil ,_dea ;
};_cbgd .PdfAnnotationMarkup =_aeae ;_cbgd .InkList =_afaf .Get ("\u0049n\u006b\u004c\u0069\u0073\u0074");_cbgd .BS =_afaf .Get ("\u0042\u0053");return &_cbgd ,nil ;};

// Normalize swaps (Llx,Urx) if Urx < Llx, and (Lly,Ury) if Ury < Lly.
func (_dbbga *PdfRectangle )Normalize (){if _dbbga .Llx > _dbbga .Urx {_dbbga .Llx ,_dbbga .Urx =_dbbga .Urx ,_dbbga .Llx ;};if _dbbga .Lly > _dbbga .Ury {_dbbga .Lly ,_dbbga .Ury =_dbbga .Ury ,_dbbga .Lly ;};};

// Evaluate runs the function on the passed in slice and returns the results.
func (_gafgc *PdfFunctionType2 )Evaluate (x []float64 )([]float64 ,error ){if len (x )!=1{_bc .Log .Error ("\u004f\u006e\u006c\u0079 o\u006e\u0065\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0061\u006c\u006c\u006f\u0077e\u0064");return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");
};_gdbdg :=[]float64 {0.0};if _gafgc .C0 !=nil {_gdbdg =_gafgc .C0 ;};_ebedaa :=[]float64 {1.0};if _gafgc .C1 !=nil {_ebedaa =_gafgc .C1 ;};var _begfc []float64 ;for _adcb :=0;_adcb < len (_gdbdg );_adcb ++{_daecc :=_gdbdg [_adcb ]+_fg .Pow (x [0],_gafgc .N )*(_ebedaa [_adcb ]-_gdbdg [_adcb ]);
_begfc =append (_begfc ,_daecc );};return _begfc ,nil ;};

// SetContentStream updates the content stream with specified encoding.
// If encoding is null, will use the xform.Filter object or Raw encoding if not set.
func (_egafg *XObjectForm )SetContentStream (content []byte ,encoder _bf .StreamEncoder )error {_abdca :=content ;if encoder ==nil {if _egafg .Filter !=nil {encoder =_egafg .Filter ;}else {encoder =_bf .NewRawEncoder ();};};_cdage ,_gffgf :=encoder .EncodeBytes (_abdca );
if _gffgf !=nil {return _gffgf ;};_abdca =_cdage ;_egafg .Stream =_abdca ;_egafg .Filter =encoder ;return nil ;};

// NewPdfColorspaceLab returns a new Lab colorspace object.
func NewPdfColorspaceLab ()*PdfColorspaceLab {_adff :=&PdfColorspaceLab {};_adff .BlackPoint =[]float64 {0.0,0.0,0.0};_adff .Range =[]float64 {-100,100,-100,100};return _adff ;};

// EncryptionAlgorithm is used in EncryptOptions to change the default algorithm used to encrypt the document.
type EncryptionAlgorithm int ;var _fbaad =map[string ]struct{}{"\u0054\u0069\u0074l\u0065":{},"\u0041\u0075\u0074\u0068\u006f\u0072":{},"\u0053u\u0062\u006a\u0065\u0063\u0074":{},"\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073":{},"\u0043r\u0065\u0061\u0074\u006f\u0072":{},"\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072":{},"\u0054r\u0061\u0070\u0070\u0065\u0064":{},"\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065":{},"\u004do\u0064\u0044\u0061\u0074\u0065":{}};


// GetContainingPdfObject implements interface PdfModel.
func (_deeg *PdfFilespec )GetContainingPdfObject ()_bf .PdfObject {return _deeg ._fbbg };

// PdfBorderEffect represents a PDF border effect.
type PdfBorderEffect struct{S *BorderEffect ;I *float64 ;};

// Inspect inspects the object types, subtypes and content in the PDF file returning a map of
// object type to number of instances of each.
func (_ggedd *PdfReader )Inspect ()(map[string ]int ,error ){return _ggedd ._gafdb .Inspect ()};

// GetIndirectObjectByNumber retrieves and returns a specific PdfObject by object number.
func (_bdccc *PdfReader )GetIndirectObjectByNumber (number int )(_bf .PdfObject ,error ){_ceefe ,_gfdbae :=_bdccc ._gafdb .LookupByNumber (number );return _ceefe ,_gfdbae ;};func _bfaag (_eedbe _ag .ReadSeeker ,_bddaa *ReaderOpts ,_aafed bool ,_dcbab string )(*PdfReader ,error ){if _bddaa ==nil {_bddaa =NewReaderOpts ();
};_fbaf :=*_bddaa ;_dfgcf :=&PdfReader {_geeda :_eedbe ,_eddf :map[_bf .PdfObject ]struct{}{},_fgac :_bbebd (),_aggga :_bddaa .LazyLoad ,_fbcfb :_bddaa .ComplianceMode ,_becd :_aafed ,_fbagdf :&_fbaf };_cdggge ,_gacd :=_eggcb ("\u0072");if _gacd !=nil {return nil ,_gacd ;
};_gacd =_bad .Track (_cdggge ,_dcbab );if _gacd !=nil {return nil ,_gacd ;};_dfgcf ._ffade =_cdggge ;var _aecgd *_bf .PdfParser ;if !_dfgcf ._fbcfb {_aecgd ,_gacd =_bf .NewParser (_eedbe );}else {_aecgd ,_gacd =_bf .NewCompliancePdfParser (_eedbe );};
if _gacd !=nil {return nil ,_gacd ;};_dfgcf ._gafdb =_aecgd ;_fgae ,_gacd :=_dfgcf .IsEncrypted ();if _gacd !=nil {return nil ,_gacd ;};if !_fgae {_gacd =_dfgcf .loadStructure ();if _gacd !=nil {return nil ,_gacd ;};}else if _aafed {_dagde ,_dddag :=_dfgcf .Decrypt ([]byte (_bddaa .Password ));
if _dddag !=nil {return nil ,_dddag ;};if !_dagde {return nil ,_eff .New ("\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f \u0064\u0065c\u0072\u0079\u0070\u0074\u0020\u0070\u0061\u0073\u0073w\u006f\u0072\u0064\u0020p\u0072\u006f\u0074\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u006c\u0065\u0020\u002d\u0020\u006e\u0065\u0065\u0064\u0020\u0074\u006f\u0020\u0073\u0070\u0065\u0063\u0069\u0066y\u0020\u0070\u0061s\u0073\u0020\u0074\u006f\u0020\u0044\u0065\u0063\u0072\u0079\u0070\u0074");
};};_dfgcf ._gbbcb =make (map[*PdfReader ]*PdfReader );_dfgcf ._dede =make ([]*PdfReader ,_aecgd .GetRevisionNumber ());return _dfgcf ,nil ;};

// NewPdfAnnotationScreen returns a new screen annotation.
func NewPdfAnnotationScreen ()*PdfAnnotationScreen {_aedcc :=NewPdfAnnotation ();_bac :=&PdfAnnotationScreen {};_bac .PdfAnnotation =_aedcc ;_aedcc .SetContext (_bac );return _bac ;};

// C returns the value of the C component of the color.
func (_fffe *PdfColorCalRGB )C ()float64 {return _fffe [2]};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// components. The slice should contain three PdfObjectFloat elements representing
// the L, A and B components of the color.
func (_gffe *PdfColorspaceLab )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=3{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_dbgb ,_fgee :=_bf .GetNumbersAsFloat (objects );
if _fgee !=nil {return nil ,_fgee ;};return _gffe .ColorFromFloats (_dbgb );};

// NewBorderStyle returns an initialized PdfBorderStyle.
func NewBorderStyle ()*PdfBorderStyle {_debe :=&PdfBorderStyle {};return _debe };

// PdfActionSetOCGState represents a SetOCGState action.
type PdfActionSetOCGState struct{*PdfAction ;State _bf .PdfObject ;PreserveRB _bf .PdfObject ;};

// ToGray returns a PdfColorDeviceGray color based on the current RGB color.
func (_bgbc *PdfColorDeviceRGB )ToGray ()*PdfColorDeviceGray {_aab :=0.3*_bgbc .R ()+0.59*_bgbc .G ()+0.11*_bgbc .B ();_aab =_fg .Min (_fg .Max (_aab ,0.0),1.0);return NewPdfColorDeviceGray (_aab );};

// PdfShading represents a shading dictionary. There are 7 types of shading,
// indicatedby the shading type variable:
// 1: Function-based shading.
// 2: Axial shading.
// 3: Radial shading.
// 4: Free-form Gouraud-shaded triangle mesh.
// 5: Lattice-form Gouraud-shaded triangle mesh.
// 6: Coons patch mesh.
// 7: Tensor-product patch mesh.
// types 4-7 are contained in a stream object, where the dictionary is given by the stream dictionary.
type PdfShading struct{ShadingType *_bf .PdfObjectInteger ;ColorSpace PdfColorspace ;Background *_bf .PdfObjectArray ;BBox *PdfRectangle ;AntiAlias *_bf .PdfObjectBool ;_bcgbde PdfModel ;_daaad _bf .PdfObject ;};

// SetFontByName sets the font specified by keyName to the given object.
func (_bfba *PdfPageResources )SetFontByName (keyName _bf .PdfObjectName ,obj _bf .PdfObject )error {if _bfba .Font ==nil {_bfba .Font =_bf .MakeDict ();};_bcdgeg ,_dgede :=_bf .TraceToDirectObject (_bfba .Font ).(*_bf .PdfObjectDictionary );if !_dgede {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u006f\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u0021\u0020(\u0067\u006ft\u0020\u0025\u0054\u0029",_bf .TraceToDirectObject (_bfba .Font ));
return _bf .ErrTypeError ;};_bcdgeg .Set (keyName ,obj );return nil ;};func (_fcab *PdfReader )newPdfAnnotationPolyLineFromDict (_bcf *_bf .PdfObjectDictionary )(*PdfAnnotationPolyLine ,error ){_ffea :=PdfAnnotationPolyLine {};_cga ,_cacd :=_fcab .newPdfAnnotationMarkupFromDict (_bcf );
if _cacd !=nil {return nil ,_cacd ;};_ffea .PdfAnnotationMarkup =_cga ;_ffea .Vertices =_bcf .Get ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073");_ffea .LE =_bcf .Get ("\u004c\u0045");_ffea .BS =_bcf .Get ("\u0042\u0053");_ffea .IC =_bcf .Get ("\u0049\u0043");
_ffea .BE =_bcf .Get ("\u0042\u0045");_ffea .IT =_bcf .Get ("\u0049\u0054");_ffea .Measure =_bcf .Get ("\u004de\u0061\u0073\u0075\u0072\u0065");return &_ffea ,nil ;};

// SetType sets the field button's type.  Can be one of:
// - PdfFieldButtonPush for push button fields
// - PdfFieldButtonCheckbox for checkbox fields
// - PdfFieldButtonRadio for radio button fields
// This sets the field's flag appropriately.
func (_edaee *PdfFieldButton )SetType (btype ButtonType ){_dcbd :=uint32 (0);if _edaee .Ff !=nil {_dcbd =uint32 (*_edaee .Ff );};switch btype {case ButtonTypePush :_dcbd |=FieldFlagPushbutton .Mask ();case ButtonTypeRadio :_dcbd |=FieldFlagRadio .Mask ();
};_edaee .Ff =_bf .MakeInteger (int64 (_dcbd ));};

// NewOutline returns a new outline instance.
func NewOutline ()*Outline {return &Outline {}};func (_eggbg *PdfReader )buildOutlineTree (_fbgec _bf .PdfObject ,_aebag *PdfOutlineTreeNode ,_gaafc *PdfOutlineTreeNode ,_eggabf map[_bf .PdfObject ]struct{})(*PdfOutlineTreeNode ,*PdfOutlineTreeNode ,error ){if _eggabf ==nil {_eggabf =map[_bf .PdfObject ]struct{}{};
};_eggabf [_fbgec ]=struct{}{};_bced ,_fceee :=_fbgec .(*_bf .PdfIndirectObject );if !_fceee {return nil ,nil ,_af .Errorf ("\u006f\u0075\u0074\u006c\u0069\u006e\u0065 \u0063\u006f\u006et\u0061\u0069\u006e\u0065r\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0025\u0054",_fbgec );
};_gadec ,_fgge :=_bced .PdfObject .(*_bf .PdfObjectDictionary );if !_fgge {return nil ,nil ,_eff .New ("\u006e\u006f\u0074 a\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_bc .Log .Trace ("\u0062\u0075\u0069\u006c\u0064\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065 \u0074\u0072\u0065\u0065\u003a\u0020d\u0069\u0063\u0074\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0076\u0029\u0020p\u003a\u0020\u0025\u0070",_gadec ,_bced ,_bced );
if _fccb :=_gadec .Get ("\u0054\u0069\u0074l\u0065");_fccb !=nil {_cbbca ,_aacea :=_eggbg .newPdfOutlineItemFromIndirectObject (_bced );if _aacea !=nil {return nil ,nil ,_aacea ;};_cbbca .Parent =_aebag ;_cbbca .Prev =_gaafc ;_gcbf :=_bf .ResolveReference (_gadec .Get ("\u0046\u0069\u0072s\u0074"));
if _ ,_cgefa :=_eggabf [_gcbf ];_gcbf !=nil &&_gcbf !=_bced &&!_cgefa {if !_bf .IsNullObject (_gcbf ){_fbac ,_ggecc ,_bbdc :=_eggbg .buildOutlineTree (_gcbf ,&_cbbca .PdfOutlineTreeNode ,nil ,_eggabf );if _bbdc !=nil {_bc .Log .Debug ("D\u0045\u0042U\u0047\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0062\u0075\u0069\u006c\u0064\u0020\u006fu\u0074\u006c\u0069\u006e\u0065\u0020\u0069\u0074\u0065\u006d\u0020\u0074\u0072\u0065\u0065\u003a \u0025\u0076\u002e\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020n\u006f\u0064\u0065\u0020\u0063\u0068\u0069\u006c\u0064\u0072\u0065n\u002e",_bbdc );
}else {_cbbca .First =_fbac ;_cbbca .Last =_ggecc ;};};};_dfgd :=_bf .ResolveReference (_gadec .Get ("\u004e\u0065\u0078\u0074"));if _ ,_cacee :=_eggabf [_dfgd ];_dfgd !=nil &&_dfgd !=_bced &&!_cacee {if !_bf .IsNullObject (_dfgd ){_dbgea ,_afdge ,_ffedb :=_eggbg .buildOutlineTree (_dfgd ,_aebag ,&_cbbca .PdfOutlineTreeNode ,_eggabf );
if _ffedb !=nil {_bc .Log .Debug ("D\u0045\u0042U\u0047\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0062\u0075\u0069\u006c\u0064\u0020\u006fu\u0074\u006c\u0069\u006e\u0065\u0020\u0074\u0072\u0065\u0065\u0020\u0066\u006f\u0072\u0020\u004ee\u0078\u0074\u0020\u006e\u006f\u0064\u0065\u003a\u0020\u0025\u0076\u002e\u0020S\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006e\u006f\u0064e\u002e",_ffedb );
}else {_cbbca .Next =_dbgea ;return &_cbbca .PdfOutlineTreeNode ,_afdge ,nil ;};};};return &_cbbca .PdfOutlineTreeNode ,&_cbbca .PdfOutlineTreeNode ,nil ;};_dfede ,_bfeaa :=_ceccb (_bced );if _bfeaa !=nil {return nil ,nil ,_bfeaa ;};_dfede .Parent =_aebag ;
if _gdfefd :=_gadec .Get ("\u0046\u0069\u0072s\u0074");_gdfefd !=nil {_gdfefd =_bf .ResolveReference (_gdfefd );if _ ,_fgabe :=_eggabf [_gdfefd ];_gdfefd !=nil &&_gdfefd !=_bced &&!_fgabe {_gdbbg :=_bf .TraceToDirectObject (_gdfefd );if _ ,_dadee :=_gdbbg .(*_bf .PdfObjectNull );
!_dadee &&_gdbbg !=nil {_caed ,_aabdf ,_abef :=_eggbg .buildOutlineTree (_gdfefd ,&_dfede .PdfOutlineTreeNode ,nil ,_eggabf );if _abef !=nil {_bc .Log .Debug ("\u0044\u0045\u0042\u0055\u0047\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020b\u0075\u0069\u006c\u0064\u0020\u006f\u0075\u0074\u006c\u0069n\u0065\u0020\u0074\u0072\u0065\u0065\u003a\u0020\u0025\u0076\u002e\u0020\u0053\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u006e\u006f\u0064\u0065 \u0063\u0068i\u006c\u0064r\u0065n\u002e",_abef );
}else {_dfede .First =_caed ;_dfede .Last =_aabdf ;};};};};return &_dfede .PdfOutlineTreeNode ,&_dfede .PdfOutlineTreeNode ,nil ;};

// NewPdfActionGoTo3DView returns a new "goTo3DView" action.
func NewPdfActionGoTo3DView ()*PdfActionGoTo3DView {_cff :=NewPdfAction ();_dec :=&PdfActionGoTo3DView {};_dec .PdfAction =_cff ;_cff .SetContext (_dec );return _dec ;};

// PdfColorPattern represents a pattern color.
type PdfColorPattern struct{Color PdfColor ;PatternName _bf .PdfObjectName ;};

// CharcodesToUnicodeWithStats is identical to CharcodesToUnicode except it returns more statistical
// information about hits and misses from the reverse mapping process.
// NOTE: The number of runes returned may be greater than the number of charcodes.
// TODO(peterwilliams97): Deprecate in v4 and use only CharcodesToStrings()
func (_gacfc *PdfFont )CharcodesToUnicodeWithStats (charcodes []_faf .CharCode )(_dcbe []rune ,_eefag ,_ggcg int ){_eedg ,_eefag ,_ggcg :=_gacfc .CharcodesToStrings (charcodes );return []rune (_gf .Join (_eedg ,"")),_eefag ,_ggcg ;};func (_cbdfa *fontFile )parseASCIIPart (_bcgbd []byte )error {if len (_bcgbd )< 2||string (_bcgbd [:2])!="\u0025\u0021"{return _eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0074a\u0072\u0074\u0020\u006f\u0066\u0020\u0041S\u0043\u0049\u0049\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074");
};_cbdcf ,_cfdbb ,_agge :=_dcde (_bcgbd );if _agge !=nil {return _agge ;};_baee :=_abeba (_cbdcf );_cbdfa ._cgbb =_baee ["\u0046\u006f\u006e\u0074\u004e\u0061\u006d\u0065"];if _cbdfa ._cgbb ==""{_bc .Log .Debug ("\u0020\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u0020\u0068a\u0073\u0020\u006e\u006f\u0020\u002f\u0046\u006f\u006e\u0074N\u0061\u006d\u0065");
};if _cfdbb !=""{_cebca ,_gcefb :=_feeae (_cfdbb );if _gcefb !=nil {return _gcefb ;};_eccbd ,_gcefb :=_faf .NewCustomSimpleTextEncoder (_cebca ,nil );if _gcefb !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004fR\u0020\u003a\u0055\u004e\u004b\u004e\u004f\u0057\u004e\u0020G\u004cY\u0050\u0048\u003a\u0020\u0065\u0072\u0072=\u0025\u0076",_gcefb );
return nil ;};_cbdfa ._bdbe =_eccbd ;};return nil ;};

// PdfActionGoTo3DView represents a GoTo3DView action.
type PdfActionGoTo3DView struct{*PdfAction ;TA _bf .PdfObject ;V _bf .PdfObject ;};

// ColorFromFloats returns a new PdfColorDevice based on the input slice of
// color components. The slice should contain four elements representing the
// cyan, magenta, yellow and key components of the color. The values of the
// elements should be between 0 and 1.
func (_fdab *PdfColorspaceDeviceCMYK )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=4{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_geafe :=vals [0];if _geafe < 0.0||_geafe > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_geafe );
return nil ,ErrColorOutOfRange ;};_efcc :=vals [1];if _efcc < 0.0||_efcc > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_efcc );return nil ,ErrColorOutOfRange ;
};_eccab :=vals [2];if _eccab < 0.0||_eccab > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_eccab );return nil ,ErrColorOutOfRange ;};_gcec :=vals [3];
if _gcec < 0.0||_gcec > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_gcec );return nil ,ErrColorOutOfRange ;};_deee :=NewPdfColorDeviceCMYK (_geafe ,_efcc ,_eccab ,_gcec );
return _deee ,nil ;};

// NewCustomPdfOutputIntent creates a new custom PdfOutputIntent.
func NewCustomPdfOutputIntent (outputCondition ,outputConditionIdentifier ,info string ,destOutputProfile []byte ,colorComponents int )*PdfOutputIntent {return &PdfOutputIntent {Type :"\u004f\u0075\u0074p\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074",OutputCondition :outputCondition ,OutputConditionIdentifier :outputConditionIdentifier ,Info :info ,DestOutputProfile :destOutputProfile ,_dacca :_bf .MakeDict (),ColorComponents :colorComponents };
};

// GetNumComponents returns the number of color components of the colorspace device.
// Returns 3 for an RGB device.
func (_dfbf *PdfColorspaceDeviceRGB )GetNumComponents ()int {return 3};const (_dcfbb =0x00001;_edga =0x00002;_daebg =0x00004;_gdgg =0x00008;_dfbc =0x00020;_dfge =0x00040;_cdgc =0x10000;_bebdf =0x20000;_fede =0x40000;);

// ToPdfObject returns the PDF representation of the colorspace.
func (_eddae *PdfColorspaceDeviceCMYK )ToPdfObject ()_bf .PdfObject {return _bf .MakeName ("\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b");};

// PdfAnnotationPolyLine represents PolyLine annotations.
// (Section 12.5.6.9).
type PdfAnnotationPolyLine struct{*PdfAnnotation ;*PdfAnnotationMarkup ;Vertices _bf .PdfObject ;LE _bf .PdfObject ;BS _bf .PdfObject ;IC _bf .PdfObject ;BE _bf .PdfObject ;IT _bf .PdfObject ;Measure _bf .PdfObject ;};

// ToPdfObject convert PdfInfo to pdf object.
func (_deae *PdfInfo )ToPdfObject ()_bf .PdfObject {_fcfed :=_bf .MakeDict ();_fcfed .SetIfNotNil ("\u0054\u0069\u0074l\u0065",_deae .Title );_fcfed .SetIfNotNil ("\u0041\u0075\u0074\u0068\u006f\u0072",_deae .Author );_fcfed .SetIfNotNil ("\u0053u\u0062\u006a\u0065\u0063\u0074",_deae .Subject );
_fcfed .SetIfNotNil ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073",_deae .Keywords );_fcfed .SetIfNotNil ("\u0043r\u0065\u0061\u0074\u006f\u0072",_deae .Creator );_fcfed .SetIfNotNil ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072",_deae .Producer );
_fcfed .SetIfNotNil ("\u0054r\u0061\u0070\u0070\u0065\u0064",_deae .Trapped );if _deae .CreationDate !=nil {_fcfed .SetIfNotNil ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_deae .CreationDate .ToPdfObject ());};if _deae .ModifiedDate !=nil {_fcfed .SetIfNotNil ("\u004do\u0064\u0044\u0061\u0074\u0065",_deae .ModifiedDate .ToPdfObject ());
};for _ ,_gcfge :=range _deae ._dbaa .Keys (){_fcfed .SetIfNotNil (_gcfge ,_deae ._dbaa .Get (_gcfge ));};return _fcfed ;};func (_gdb *PdfReader )newPdfActionSetOCGStateFromDict (_bce *_bf .PdfObjectDictionary )(*PdfActionSetOCGState ,error ){return &PdfActionSetOCGState {State :_bce .Get ("\u0053\u0074\u0061t\u0065"),PreserveRB :_bce .Get ("\u0050\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0052\u0042")},nil ;
};

// CustomKeys returns all custom info keys as list.
func (_adbf *PdfInfo )CustomKeys ()[]string {if _adbf ._dbaa ==nil {return nil ;};_ggf :=make ([]string ,len (_adbf ._dbaa .Keys ()));for _ ,_fbgcf :=range _adbf ._dbaa .Keys (){_ggf =append (_ggf ,_fbgcf .String ());};return _ggf ;};func (_cegac fontCommon )isCIDFont ()bool {if _cegac ._fdfb ==""{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0069\u0073\u0043\u0049\u0044\u0046\u006f\u006e\u0074\u002e\u0020\u0063o\u006e\u0074\u0065\u0078\u0074\u0020\u0069\u0073\u0020\u006e\u0069\u006c\u002e\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_cegac );
};_gbae :=false ;switch _cegac ._fdfb {case "\u0054\u0079\u0070e\u0030","\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030","\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032":_gbae =true ;};_bc .Log .Trace ("i\u0073\u0043\u0049\u0044\u0046\u006fn\u0074\u003a\u0020\u0069\u0073\u0043\u0049\u0044\u003d%\u0074\u0020\u0066o\u006et\u003d\u0025\u0073",_gbae ,_cegac );
return _gbae ;};

// ToPdfObject implements interface PdfModel.
func (_afg *PdfActionThread )ToPdfObject ()_bf .PdfObject {_afg .PdfAction .ToPdfObject ();_bba :=_afg ._fda ;_fgf :=_bba .PdfObject .(*_bf .PdfObjectDictionary );_fgf .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeThread )));if _afg .F !=nil {_fgf .Set ("\u0046",_afg .F .ToPdfObject ());
};_fgf .SetIfNotNil ("\u0044",_afg .D );_fgf .SetIfNotNil ("\u0042",_afg .B );return _bba ;};func (_bcbd *PdfFunctionType0 )processSamples ()error {_eaggg :=_de .ResampleBytes (_bcbd ._dacc ,_bcbd .BitsPerSample );_bcbd ._dacb =_eaggg ;return nil ;};

// NewCompositePdfFontFromTTF loads a composite TTF font. Composite fonts can
// be used to represent unicode fonts which can have multi-byte character codes, representing a wide
// range of values. They are often used for symbolic languages, including Chinese, Japanese and Korean.
// It is represented by a Type0 Font with an underlying CIDFontType2 and an Identity-H encoding map.
// TODO: May be extended in the future to support a larger variety of CMaps and vertical fonts.
// NOTE: For simple fonts, use NewPdfFontFromTTF.
func NewCompositePdfFontFromTTF (r _ag .ReadSeeker )(*PdfFont ,error ){_ebgcf ,_gcebg :=_fe .ReadAll (r );if _gcebg !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0072\u0065\u0061d\u0020\u0066\u006f\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_gcebg );
return nil ,_gcebg ;};_abbfa ,_gcebg :=_eb .TtfParse (_cdc .NewReader (_ebgcf ));if _gcebg !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0077\u0068\u0069\u006c\u0065\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067 \u0074\u0074\u0066\u0020\u0066\u006f\u006et\u003a\u0020\u0025\u0076",_gcebg );
return nil ,_gcebg ;};_cdfcf :=&pdfCIDFontType2 {fontCommon :fontCommon {_fdfb :"\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032"},CIDToGIDMap :_bf .MakeName ("\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079")};if len (_abbfa .Widths )<=0{return nil ,_eff .New ("\u0045\u0052\u0052O\u0052\u003a\u0020\u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065 \u0028\u0057\u0069\u0064\u0074\u0068\u0073\u0029");
};_efgb :=1000.0/float64 (_abbfa .UnitsPerEm );_ddcfd :=_efgb *float64 (_abbfa .Widths [0]);_dbefbe :=make (map[rune ]int );_eaed :=make (map[_eb .GID ]int );_dgdf :=_eb .GID (len (_abbfa .Widths ));for _debeab ,_bccge :=range _abbfa .Chars {if _bccge > _dgdf -1{continue ;
};_daagdd :=int (_efgb *float64 (_abbfa .Widths [_bccge ]));_dbefbe [_debeab ]=_daagdd ;_eaed [_bccge ]=_daagdd ;};_cdfcf ._ceae =_dbefbe ;_cdfcf .DW =_bf .MakeInteger (int64 (_ddcfd ));_dddfc :=_begc (_eaed ,uint16 (_dgdf ));_cdfcf .W =_bf .MakeIndirectObject (_dddfc );
_defab :=_bf .MakeDict ();_defab .Set ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067",_bf .MakeString ("\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079"));_defab .Set ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079",_bf .MakeString ("\u0041\u0064\u006fb\u0065"));
_defab .Set ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074",_bf .MakeInteger (0));_cdfcf .CIDSystemInfo =_defab ;_gefeg :=&PdfFontDescriptor {FontName :_bf .MakeName (_abbfa .PostScriptName ),Ascent :_bf .MakeFloat (_efgb *float64 (_abbfa .TypoAscender )),Descent :_bf .MakeFloat (_efgb *float64 (_abbfa .TypoDescender )),CapHeight :_bf .MakeFloat (_efgb *float64 (_abbfa .CapHeight )),FontBBox :_bf .MakeArrayFromFloats ([]float64 {_efgb *float64 (_abbfa .Xmin ),_efgb *float64 (_abbfa .Ymin ),_efgb *float64 (_abbfa .Xmax ),_efgb *float64 (_abbfa .Ymax )}),ItalicAngle :_bf .MakeFloat (_abbfa .ItalicAngle ),MissingWidth :_bf .MakeFloat (_ddcfd )};
_decgf ,_gcebg :=_bf .MakeStream (_ebgcf ,_bf .NewFlateEncoder ());if _gcebg !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074o\u0020m\u0061\u006b\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_gcebg );
return nil ,_gcebg ;};_decgf .PdfObjectDictionary .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bf .MakeInteger (int64 (len (_ebgcf ))));_gefeg .FontFile2 =_decgf ;if _abbfa .Bold {_gefeg .StemV =_bf .MakeInteger (120);}else {_gefeg .StemV =_bf .MakeInteger (70);
};_eebee :=_daebg ;if _abbfa .IsFixedPitch {_eebee |=_dcfbb ;};if _abbfa .ItalicAngle !=0{_eebee |=_dfge ;};_gefeg .Flags =_bf .MakeInteger (int64 (_eebee ));_cdfcf ._adccf =_abbfa .PostScriptName ;_cdfcf ._cedfe =_gefeg ;_edcd :=pdfFontType0 {fontCommon :fontCommon {_fdfb :"\u0054\u0079\u0070e\u0030",_adccf :_abbfa .PostScriptName },DescendantFont :&PdfFont {_cacce :_cdfcf },Encoding :_bf .MakeName ("\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048"),_aecc :_abbfa .NewEncoder ()};
if len (_abbfa .Chars )> 0{_dbcae :=make (map[_cf .CharCode ]rune ,len (_abbfa .Chars ));for _adga ,_fcefa :=range _abbfa .Chars {_gdcc :=_cf .CharCode (_fcefa );if _cgbe ,_gdddg :=_dbcae [_gdcc ];!_gdddg ||(_gdddg &&_cgbe > _adga ){_dbcae [_gdcc ]=_adga ;
};};_edcd ._ggcb =_cf .NewToUnicodeCMap (_dbcae );};_eeff :=PdfFont {_cacce :&_edcd };return &_eeff ,nil ;};

// NewPdfColorspaceDeviceRGB returns a new RGB colorspace object.
func NewPdfColorspaceDeviceRGB ()*PdfColorspaceDeviceRGB {return &PdfColorspaceDeviceRGB {}};

// GetPreviousRevision returns the previous revision of PdfReader for the Pdf document
func (_fcce *PdfReader )GetPreviousRevision ()(*PdfReader ,error ){if _fcce ._gafdb .GetRevisionNumber ()==0{return nil ,_eff .New ("\u0070\u0072e\u0076\u0069\u006f\u0075\u0073\u0020\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065xi\u0073\u0074");
};if _faabf ,_edgfb :=_fcce ._gbbcb [_fcce ];_edgfb {return _faabf ,nil ;};_dfea ,_gfbef :=_fcce ._gafdb .GetPreviousRevisionReadSeeker ();if _gfbef !=nil {return nil ,_gfbef ;};_baegf ,_gfbef :=_bfaag (_dfea ,_fcce ._fbagdf ,_fcce ._becd ,"\u006do\u0064\u0065\u006c\u003aG\u0065\u0074\u0050\u0072\u0065v\u0069o\u0075s\u0052\u0065\u0076\u0069\u0073\u0069\u006fn");
if _gfbef !=nil {return nil ,_gfbef ;};_fcce ._dede [_fcce ._gafdb .GetRevisionNumber ()-1]=_baegf ;_fcce ._gbbcb [_fcce ]=_baegf ;_baegf ._gbbcb =_fcce ._gbbcb ;return _baegf ,nil ;};

// GetCapHeight returns the CapHeight of the font `descriptor`.
func (_efcce *PdfFontDescriptor )GetCapHeight ()(float64 ,error ){return _bf .GetNumberAsFloat (_efcce .CapHeight );};

// HasFontByName checks whether a font is defined by the specified keyName.
func (_dbbgd *PdfPageResources )HasFontByName (keyName _bf .PdfObjectName )bool {_ ,_aeaga :=_dbbgd .GetFontByName (keyName );return _aeaga ;};func (_acbc *pdfFontSimple )getFontEncoding ()(_daafa string ,_bfdfc map[_faf .CharCode ]_faf .GlyphName ,_facf error ){_daafa ="\u0053\u0074a\u006e\u0064\u0061r\u0064\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067";
if _ffcb ,_dfaad :=_afab [_acbc ._adccf ];_dfaad {_daafa =_ffcb ;}else if _acbc .fontFlags ()&_daebg !=0{for _ecbgf ,_bgdaf :=range _afab {if _gf .Contains (_acbc ._adccf ,_ecbgf ){_daafa =_bgdaf ;break ;};};};if _acbc .Encoding ==nil {return _daafa ,nil ,nil ;
};switch _eggdf :=_acbc .Encoding .(type ){case *_bf .PdfObjectName :return string (*_eggdf ),nil ,nil ;case *_bf .PdfObjectDictionary :_ffdc ,_afad :=_bf .GetName (_eggdf .Get ("\u0042\u0061\u0073e\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"));if _afad {_daafa =_ffdc .String ();
};if _cbced :=_eggdf .Get ("D\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0073");_cbced !=nil {_acfe ,_aacdf :=_bf .GetArray (_cbced );if !_aacdf {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0042a\u0064\u0020\u0066on\u0074\u0020\u0065\u006e\u0063\u006fd\u0069\u006e\u0067\u0020\u0064\u0069\u0063\u0074\u003d\u0025\u002b\u0076\u0020\u0044\u0069f\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0073=\u0025\u0054",_eggdf ,_eggdf .Get ("D\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0073"));
return "",nil ,_bf .ErrTypeError ;};_bfdfc ,_facf =_faf .FromFontDifferences (_acfe );};return _daafa ,_bfdfc ,_facf ;default:_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u006f\u0072\u0020\u0064\u0069\u0063t\u0020\u0028\u0025\u0054\u0029\u0020\u0025\u0073",_acbc .Encoding ,_acbc .Encoding );
return "",nil ,_bf .ErrTypeError ;};};

// Items returns all children outline items.
func (_beged *OutlineItem )Items ()[]*OutlineItem {return _beged .Entries };

// ToPdfObject returns the PDF representation of the VRI dictionary.
func (_bbgac *VRI )ToPdfObject ()*_bf .PdfObjectDictionary {_gfad :=_bf .MakeDict ();_gfad .SetIfNotNil (_bf .PdfObjectName ("\u0043\u0065\u0072\u0074"),_gbagcc (_bbgac .Cert ));_gfad .SetIfNotNil (_bf .PdfObjectName ("\u004f\u0043\u0053\u0050"),_gbagcc (_bbgac .OCSP ));
_gfad .SetIfNotNil (_bf .PdfObjectName ("\u0043\u0052\u004c"),_gbagcc (_bbgac .CRL ));_gfad .SetIfNotNil ("\u0054\u0055",_bbgac .TU );_gfad .SetIfNotNil ("\u0054\u0053",_bbgac .TS );return _gfad ;};func (_fcd *PdfReader )newPdfActionMovieFromDict (_egg *_bf .PdfObjectDictionary )(*PdfActionMovie ,error ){return &PdfActionMovie {Annotation :_egg .Get ("\u0041\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e"),T :_egg .Get ("\u0054"),Operation :_egg .Get ("\u004fp\u0065\u0072\u0061\u0074\u0069\u006fn")},nil ;
};

// NewPdfPage returns a new PDF page.
func NewPdfPage ()*PdfPage {_gbgg :=PdfPage {};_gbgg ._dfcbc =_bf .MakeDict ();_gbgg .Resources =NewPdfPageResources ();_fdcffa :=_bf .PdfIndirectObject {};_fdcffa .PdfObject =_gbgg ._dfcbc ;_gbgg ._cddaa =&_fdcffa ;return &_gbgg ;};

// ToPdfObject converts the font to a PDF representation.
func (_cfbea *pdfFontType0 )ToPdfObject ()_bf .PdfObject {if _cfbea ._edabb ==nil {_cfbea ._edabb =&_bf .PdfIndirectObject {};};_edfeg :=_cfbea .baseFields ().asPdfObjectDictionary ("\u0054\u0079\u0070e\u0030");_cfbea ._edabb .PdfObject =_edfeg ;if _cfbea .Encoding !=nil {_edfeg .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_cfbea .Encoding );
}else if _cfbea ._aecc !=nil {_edfeg .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_cfbea ._aecc .ToPdfObject ());};if _cfbea .DescendantFont !=nil {_edfeg .Set ("\u0044e\u0073c\u0065\u006e\u0064\u0061\u006e\u0074\u0046\u006f\u006e\u0074\u0073",_bf .MakeArray (_cfbea .DescendantFont .ToPdfObject ()));
};return _cfbea ._edabb ;};

// GetAscent returns the Ascent of the font `descriptor`.
func (_gagcc *PdfFontDescriptor )GetAscent ()(float64 ,error ){return _bf .GetNumberAsFloat (_gagcc .Ascent );};

// GetCerts returns the signature certificate chain.
func (_cacgf *PdfSignature )GetCerts ()([]*_d .Certificate ,error ){var _ffcbg []func ()([]*_d .Certificate ,error );switch _efaec ,_ :=_bf .GetNameVal (_cacgf .SubFilter );_efaec {case "\u0061\u0064\u0062\u0065.p\u006b\u0063\u0073\u0037\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064","\u0045\u0054\u0053\u0049.C\u0041\u0064\u0045\u0053\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064":_ffcbg =append (_ffcbg ,_cacgf .extractChainFromPKCS7 ,_cacgf .extractChainFromCert );
case "\u0061d\u0062e\u002e\u0078\u0035\u0030\u0039.\u0072\u0073a\u005f\u0073\u0068\u0061\u0031":_ffcbg =append (_ffcbg ,_cacgf .extractChainFromCert );case "\u0045\u0054\u0053I\u002e\u0052\u0046\u0043\u0033\u0031\u0036\u0031":_ffcbg =append (_ffcbg ,_cacgf .extractChainFromPKCS7 );
default:return nil ,_af .Errorf ("\u0075n\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020S\u0075b\u0046i\u006c\u0074\u0065\u0072\u003a\u0020\u0025s",_efaec );};for _ ,_cbdac :=range _ffcbg {_bcba ,_dfcba :=_cbdac ();if _dfcba !=nil {return nil ,_dfcba ;
};if len (_bcba )> 0{return _bcba ,nil ;};};return nil ,ErrSignNoCertificates ;};func (_egagf *LTV )getCRLs (_gfab []*_d .Certificate )([][]byte ,error ){_edaac :=make ([][]byte ,0,len (_gfab ));for _ ,_dcgfd :=range _gfab {for _ ,_befea :=range _dcgfd .CRLDistributionPoints {if _egagf .CertClient .IsCA (_dcgfd ){continue ;
};_fgega ,_bdca :=_egagf .CRLClient .MakeRequest (_befea ,_dcgfd );if _bdca !=nil {_bc .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043R\u004c\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_bdca );continue ;
};_edaac =append (_edaac ,_fgega );};};return _edaac ,nil ;};func _cbfd (_dbfeb *_bf .PdfObjectDictionary ,_dbafe *fontCommon )(*pdfFontType3 ,error ){_cgfgd :=_gaada (_dbafe );_gfbad :=_dbfeb .Get ("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r");if _gfbad ==nil {_gfbad =_bf .MakeInteger (0);
};_cgfgd .FirstChar =_gfbad ;_agaf ,_abaab :=_bf .GetIntVal (_gfbad );if !_abaab {_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u0046i\u0072s\u0074C\u0068\u0061\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u0029",_gfbad );
return nil ,_bf .ErrTypeError ;};_dgfg :=_faf .CharCode (_agaf );_gfbad =_dbfeb .Get ("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072");if _gfbad ==nil {_gfbad =_bf .MakeInteger (255);};_cgfgd .LastChar =_gfbad ;_agaf ,_abaab =_bf .GetIntVal (_gfbad );
if !_abaab {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u004c\u0061\u0073\u0074\u0043h\u0061\u0072\u0020\u0074\u0079\u0070\u0065 \u0028\u0025\u0054\u0029",_gfbad );return nil ,_bf .ErrTypeError ;
};_bfae :=_faf .CharCode (_agaf );_gfbad =_dbfeb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s");if _gfbad !=nil {_cgfgd .Resources =_gfbad ;};_gfbad =_dbfeb .Get ("\u0043h\u0061\u0072\u0050\u0072\u006f\u0063s");if _gfbad ==nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0068\u0061\u0072\u0050\u0072\u006f\u0063\u0073\u0020(%\u0076\u0029",_gfbad );
return nil ,_bf .ErrNotSupported ;};_cgfgd .CharProcs =_gfbad ;_gfbad =_dbfeb .Get ("\u0046\u006f\u006e\u0074\u004d\u0061\u0074\u0072\u0069\u0078");if _gfbad ==nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0046\u006f\u006et\u004d\u0061\u0074\u0072\u0069\u0078\u0020\u0028\u0025\u0076\u0029",_gfbad );
return nil ,_bf .ErrNotSupported ;};_cgfgd .FontMatrix =_gfbad ;_cgfgd ._cbgba =make (map[_faf .CharCode ]float64 );_gfbad =_dbfeb .Get ("\u0057\u0069\u0064\u0074\u0068\u0073");if _gfbad !=nil {_cgfgd .Widths =_gfbad ;_baccf ,_acbg :=_bf .GetArray (_gfbad );
if !_acbg {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020W\u0069\u0064t\u0068\u0073\u0020\u0061\u0074\u0074\u0072\u0069b\u0075\u0074\u0065\u0020\u0021\u003d\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_gfbad );return nil ,_bf .ErrTypeError ;
};_afdbg ,_ddcg :=_baccf .ToFloat64Array ();if _ddcg !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069d\u0074\u0068\u0073\u0020\u0074\u006f\u0020a\u0072\u0072\u0061\u0079");
return nil ,_ddcg ;};if len (_afdbg )!=int (_bfae -_dgfg +1){_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0077\u0069\u0064\u0074\u0068s\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0025\u0064 \u0028\u0025\u0064\u0029",_bfae -_dgfg +1,len (_afdbg ));
return nil ,_bf .ErrRangeError ;};_gafe ,_acbg :=_bf .GetArray (_cgfgd .FontMatrix );if !_acbg {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0046\u006f\u006e\u0074\u004d\u0061\u0074\u0072\u0069\u0078\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0021\u003d\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0028\u0025\u0054\u0029",_gafe );
return nil ,_ddcg ;};_cdedd ,_ddcg :=_gafe .ToFloat64Array ();if _ddcg !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020c\u006f\u006ev\u0065\u0072\u0074\u0069\u006e\u0067\u0020\u0046o\u006e\u0074\u004d\u0061\u0074\u0072\u0069\u0078\u0020\u0074\u006f\u0020a\u0072\u0072\u0061\u0079");
return nil ,_ddcg ;};_dgebc :=_aa .NewMatrix (_cdedd [0],_cdedd [1],_cdedd [2],_cdedd [3],_cdedd [4],_cdedd [5]);for _efbbc ,_eefg :=range _afdbg {_dgedcd ,_ :=_dgebc .Transform (_eefg ,_eefg );_cgfgd ._cbgba [_dgfg +_faf .CharCode (_efbbc )]=_dgedcd ;
};};_cgfgd .Encoding =_bf .TraceToDirectObject (_dbfeb .Get ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"));_cggae :=_dbfeb .Get ("\u0054o\u0055\u006e\u0069\u0063\u006f\u0064e");if _cggae !=nil {_cgfgd ._bcdc =_bf .TraceToDirectObject (_cggae );_afcff ,_aedd :=_cdagb (_cgfgd ._bcdc ,&_cgfgd .fontCommon );
if _aedd !=nil {return nil ,_aedd ;};_cgfgd ._ggcb =_afcff ;};if _dgggf :=_cgfgd ._ggcb ;_dgggf !=nil {_cgfgd ._adgcd =_faf .NewCMapEncoder ("",nil ,_dgggf );}else {_cgfgd ._adgcd =_faf .NewPdfDocEncoder ();};return _cgfgd ,nil ;};func (_begaf *XObjectImage )getParamsDict ()*_bf .PdfObjectDictionary {_gbgcg :=_bf .MakeDict ();
_gbgcg .Set ("\u0057\u0069\u0064t\u0068",_bf .MakeInteger (*_begaf .Width ));_gbgcg .Set ("\u0048\u0065\u0069\u0067\u0068\u0074",_bf .MakeInteger (*_begaf .Height ));_gbgcg .Set ("\u0043o\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073",_bf .MakeInteger (int64 (_begaf .ColorSpace .GetNumComponents ())));
_gbgcg .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_bf .MakeInteger (*_begaf .BitsPerComponent ));return _gbgcg ;};

// ColorToRGB converts a CalRGB color to an RGB color.
func (_afddg *PdfColorspaceCalRGB )ColorToRGB (color PdfColor )(PdfColor ,error ){_bfca ,_fdca :=color .(*PdfColorCalRGB );if !_fdca {_bc .Log .Debug ("\u0049\u006e\u0070ut\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0063\u0061\u006c\u0020\u0072\u0067\u0062");
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_aefg :=_bfca .A ();_dfaa :=_bfca .B ();_bed :=_bfca .C ();X :=_afddg .Matrix [0]*_fg .Pow (_aefg ,_afddg .Gamma [0])+_afddg .Matrix [3]*_fg .Pow (_dfaa ,_afddg .Gamma [1])+_afddg .Matrix [6]*_fg .Pow (_bed ,_afddg .Gamma [2]);
Y :=_afddg .Matrix [1]*_fg .Pow (_aefg ,_afddg .Gamma [0])+_afddg .Matrix [4]*_fg .Pow (_dfaa ,_afddg .Gamma [1])+_afddg .Matrix [7]*_fg .Pow (_bed ,_afddg .Gamma [2]);Z :=_afddg .Matrix [2]*_fg .Pow (_aefg ,_afddg .Gamma [0])+_afddg .Matrix [5]*_fg .Pow (_dfaa ,_afddg .Gamma [1])+_afddg .Matrix [8]*_fg .Pow (_bed ,_afddg .Gamma [2]);
_bdgb :=3.240479*X +-1.537150*Y +-0.498535*Z ;_caga :=-0.969256*X +1.875992*Y +0.041556*Z ;_afeb :=0.055648*X +-0.204043*Y +1.057311*Z ;_bdgb =_fg .Min (_fg .Max (_bdgb ,0),1.0);_caga =_fg .Min (_fg .Max (_caga ,0),1.0);_afeb =_fg .Min (_fg .Max (_afeb ,0),1.0);
return NewPdfColorDeviceRGB (_bdgb ,_caga ,_afeb ),nil ;};func _begc (_gaagc map[_eb .GID ]int ,_dggad uint16 )*_bf .PdfObjectArray {_eacf :=&_bf .PdfObjectArray {};_eccb :=_eb .GID (_dggad );for _fbdc :=_eb .GID (0);_fbdc < _eccb ;{_deaf ,_agaga :=_gaagc [_fbdc ];
if !_agaga {_fbdc ++;continue ;};_bcgce :=_fbdc ;for _cdeea :=_bcgce +1;_cdeea < _eccb ;_cdeea ++{if _eabb ,_efbac :=_gaagc [_cdeea ];!_efbac ||_deaf !=_eabb {break ;};_bcgce =_cdeea ;};_eacf .Append (_bf .MakeInteger (int64 (_fbdc )));_eacf .Append (_bf .MakeInteger (int64 (_bcgce )));
_eacf .Append (_bf .MakeInteger (int64 (_deaf )));_fbdc =_bcgce +1;};return _eacf ;};

// Read reads an image and loads into a new Image object with an RGB
// colormap and 8 bits per component.
func (_ebdbf DefaultImageHandler )Read (reader _ag .Reader )(*Image ,error ){_cgfcdg ,_ ,_feab :=_b .Decode (reader );if _feab !=nil {_bc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_feab );
return nil ,_feab ;};return _ebdbf .NewImageFromGoImage (_cgfcdg );};

// ToPdfObject returns the PDF representation of the colorspace.
func (_cffec *PdfColorspaceDeviceRGB )ToPdfObject ()_bf .PdfObject {return _bf .MakeName ("\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B");};

// GetXObjectImageByName returns the XObjectImage with the specified name from the
// page resources, if it exists.
func (_feacd *PdfPageResources )GetXObjectImageByName (keyName _bf .PdfObjectName )(*XObjectImage ,error ){_aegdbe ,_ffcgg :=_feacd .GetXObjectByName (keyName );if _aegdbe ==nil {return nil ,nil ;};if _ffcgg !=XObjectTypeImage {return nil ,_eff .New ("\u006e\u006f\u0074 \u0061\u006e\u0020\u0069\u006d\u0061\u0067\u0065");
};_adeec ,_acaee :=NewXObjectImageFromStream (_aegdbe );if _acaee !=nil {return nil ,_acaee ;};return _adeec ,nil ;};

// PdfColorspaceDeviceN represents a DeviceN color space. DeviceN color spaces are similar to Separation color
// spaces, except they can contain an arbitrary number of color components.
//
// Format: [/DeviceN names alternateSpace tintTransform]
//     or: [/DeviceN names alternateSpace tintTransform attributes]
type PdfColorspaceDeviceN struct{ColorantNames *_bf .PdfObjectArray ;AlternateSpace PdfColorspace ;TintTransform PdfFunction ;Attributes *PdfColorspaceDeviceNAttributes ;_bcfcf *_bf .PdfIndirectObject ;};

// ColorToRGB verifies that the input color is an RGB color. Method exists in
// order to satisfy the PdfColorspace interface.
func (_cegg *PdfColorspaceDeviceRGB )ColorToRGB (color PdfColor )(PdfColor ,error ){_baad ,_dbee :=color .(*PdfColorDeviceRGB );if !_dbee {_bc .Log .Debug ("\u0049\u006e\u0070\u0075\u0074\u0020\u0063\u006f\u006c\u006f\u0072 \u006e\u006f\u0074\u0020\u0064\u0065\u0076\u0069\u0063\u0065 \u0052\u0047\u0042");
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};return _baad ,nil ;};func (_eabea PdfFont )actualFont ()pdfFont {if _eabea ._cacce ==nil {_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0061\u0063\u0074\u0075\u0061\u006c\u0046\u006f\u006e\u0074\u002e\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0069\u0073\u0020\u006e\u0069\u006c.\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_eabea );
};return _eabea ._cacce ;};func _fada (_eagb *_bf .PdfObjectDictionary )bool {for _ ,_cebc :=range _eagb .Keys (){if _ ,_geefg :=_fbgab [_cebc .String ()];_geefg {return true ;};};return false ;};

// NewPdfColorCalGray returns a new CalGray color.
func NewPdfColorCalGray (grayVal float64 )*PdfColorCalGray {_dadg :=PdfColorCalGray (grayVal );return &_dadg ;};

// ParsePdfObject parses input pdf object into given output intent.
func (_adgcg *PdfOutputIntent )ParsePdfObject (object _bf .PdfObject )error {_acdgc ,_cfdgf :=_bf .GetDict (object );if !_cfdgf {_bc .Log .Error ("\u0055\u006e\u006bno\u0077\u006e\u0020\u0074\u0079\u0070\u0065\u003a\u0020%\u0054 \u0066o\u0072 \u006f\u0075\u0074\u0070\u0075\u0074\u0020\u0069\u006e\u0074\u0065\u006e\u0074",object );
return _eff .New ("\u0075\u006e\u006b\u006e\u006fw\u006e\u0020\u0070\u0064\u0066\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0066\u006f\u0072\u0020\u006f\u0075\u0074\u0070\u0075\u0074\u0020\u0069\u006e\u0074\u0065\u006e\u0074");
};_adgcg ._dacca =_acdgc ;_adgcg .Type ,_ =_acdgc .GetString ("\u0054\u0079\u0070\u0065");_abeg ,_cfdgf :=_acdgc .GetString ("\u0053");if _cfdgf {switch _abeg {case "\u0047T\u0053\u005f\u0050\u0044\u0046\u00411":_adgcg .S =PdfOutputIntentTypeA1 ;case "\u0047T\u0053\u005f\u0050\u0044\u0046\u00412":_adgcg .S =PdfOutputIntentTypeA2 ;
case "\u0047T\u0053\u005f\u0050\u0044\u0046\u00413":_adgcg .S =PdfOutputIntentTypeA3 ;case "\u0047T\u0053\u005f\u0050\u0044\u0046\u00414":_adgcg .S =PdfOutputIntentTypeA4 ;case "\u0047\u0054\u0053\u005f\u0050\u0044\u0046\u0058":_adgcg .S =PdfOutputIntentTypeX ;
};};_adgcg .OutputCondition ,_ =_acdgc .GetString ("\u004fu\u0074p\u0075\u0074\u0043\u006f\u006e\u0064\u0069\u0074\u0069\u006f\u006e");_adgcg .OutputConditionIdentifier ,_ =_acdgc .GetString ("\u004fu\u0074\u0070\u0075\u0074C\u006f\u006e\u0064\u0069\u0074i\u006fn\u0049d\u0065\u006e\u0074\u0069\u0066\u0069\u0065r");
_adgcg .RegistryName ,_ =_acdgc .GetString ("\u0052\u0065\u0067i\u0073\u0074\u0072\u0079\u004e\u0061\u006d\u0065");_adgcg .Info ,_ =_acdgc .GetString ("\u0049\u006e\u0066\u006f");if _eddc ,_bdeae :=_bf .GetStream (_acdgc .Get ("\u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072o\u0066\u0069\u006c\u0065"));
_bdeae {_adgcg .ColorComponents ,_ =_bf .GetIntVal (_eddc .Get ("\u004e"));_cgdcg ,_ebgae :=_bf .DecodeStream (_eddc );if _ebgae !=nil {return _ebgae ;};_adgcg .DestOutputProfile =_cgdcg ;};return nil ;};

// ToPdfObject sets the common field elements.
// Note: Call the more field context's ToPdfObject to set both the generic and
// non-generic information.
func (_beca *PdfField )ToPdfObject ()_bf .PdfObject {_cgaee :=_beca ._fgcdf ;_gbaa :=_cgaee .PdfObject .(*_bf .PdfObjectDictionary );_efeae :=_bf .MakeArray ();for _ ,_gbce :=range _beca .Kids {_efeae .Append (_gbce .ToPdfObject ());};for _ ,_cagec :=range _beca .Annotations {if _cagec ._cdaf !=_beca ._fgcdf {_efeae .Append (_cagec .GetContext ().ToPdfObject ());
};};if _beca .Parent !=nil {_gbaa .SetIfNotNil ("\u0050\u0061\u0072\u0065\u006e\u0074",_beca .Parent .GetContainingPdfObject ());};if _efeae .Len ()> 0{_gbaa .Set ("\u004b\u0069\u0064\u0073",_efeae );};_gbaa .SetIfNotNil ("\u0046\u0054",_beca .FT );_gbaa .SetIfNotNil ("\u0054",_beca .T );
_gbaa .SetIfNotNil ("\u0054\u0055",_beca .TU );_gbaa .SetIfNotNil ("\u0054\u004d",_beca .TM );_gbaa .SetIfNotNil ("\u0046\u0066",_beca .Ff );_gbaa .SetIfNotNil ("\u0056",_beca .V );_gbaa .SetIfNotNil ("\u0044\u0056",_beca .DV );_gbaa .SetIfNotNil ("\u0041\u0041",_beca .AA );
if _beca .VariableText !=nil {_gbaa .SetIfNotNil ("\u0044\u0041",_beca .VariableText .DA );_gbaa .SetIfNotNil ("\u0051",_beca .VariableText .Q );_gbaa .SetIfNotNil ("\u0044\u0053",_beca .VariableText .DS );_gbaa .SetIfNotNil ("\u0052\u0056",_beca .VariableText .RV );
};return _cgaee ;};

// ToPdfObject returns the PDF representation of the function.
func (_ffbf *PdfFunctionType0 )ToPdfObject ()_bf .PdfObject {if _ffbf ._fbaac ==nil {_ffbf ._fbaac =&_bf .PdfObjectStream {};};_gfcd :=_bf .MakeDict ();_gfcd .Set ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065",_bf .MakeInteger (0));
_febda :=&_bf .PdfObjectArray {};for _ ,_gbdd :=range _ffbf .Domain {_febda .Append (_bf .MakeFloat (_gbdd ));};_gfcd .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_febda );_befgf :=&_bf .PdfObjectArray {};for _ ,_fddd :=range _ffbf .Range {_befgf .Append (_bf .MakeFloat (_fddd ));
};_gfcd .Set ("\u0052\u0061\u006eg\u0065",_befgf );_gffcg :=&_bf .PdfObjectArray {};for _ ,_ebece :=range _ffbf .Size {_gffcg .Append (_bf .MakeInteger (int64 (_ebece )));};_gfcd .Set ("\u0053\u0069\u007a\u0065",_gffcg );_gfcd .Set ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0053\u0061\u006d\u0070\u006c\u0065",_bf .MakeInteger (int64 (_ffbf .BitsPerSample )));
if _ffbf .Order !=1{_gfcd .Set ("\u004f\u0072\u0064e\u0072",_bf .MakeInteger (int64 (_ffbf .Order )));};_gfcd .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_ffbf ._dacc ))));_ffbf ._fbaac .Stream =_ffbf ._dacc ;_ffbf ._fbaac .PdfObjectDictionary =_gfcd ;
return _ffbf ._fbaac ;};

// SetContentStreams sets the content streams based on a string array. Will make
// 1 object stream for each string and reference from the page Contents.
// Each stream will be encoded using the encoding specified by the StreamEncoder,
// if empty, will use identity encoding (raw data).
func (_efbcc *PdfPage )SetContentStreams (cStreams []string ,encoder _bf .StreamEncoder )error {if len (cStreams )==0{_efbcc .Contents =nil ;return nil ;};if encoder ==nil {encoder =_bf .NewRawEncoder ();};var _cgbaf []*_bf .PdfObjectStream ;for _ ,_bffc :=range cStreams {_bdae :=&_bf .PdfObjectStream {};
_fcgga :=encoder .MakeStreamDict ();_dbfb ,_gbgf :=encoder .EncodeBytes ([]byte (_bffc ));if _gbgf !=nil {return _gbgf ;};_fcgga .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_dbfb ))));_bdae .PdfObjectDictionary =_fcgga ;_bdae .Stream =_dbfb ;
_cgbaf =append (_cgbaf ,_bdae );};if len (_cgbaf )==1{_efbcc .Contents =_cgbaf [0];}else {_fcggf :=_bf .MakeArray ();for _ ,_fgcdc :=range _cgbaf {_fcggf .Append (_fgcdc );};_efbcc .Contents =_fcggf ;};return nil ;};

// GetNumComponents returns the number of color components of the colorspace device.
// Returns 3 for a Lab device.
func (_dgcee *PdfColorspaceLab )GetNumComponents ()int {return 3};func (_cead *PdfReader )newPdfAnnotationWatermarkFromDict (_cbba *_bf .PdfObjectDictionary )(*PdfAnnotationWatermark ,error ){_fgda :=PdfAnnotationWatermark {};_fgda .FixedPrint =_cbba .Get ("\u0046\u0069\u0078\u0065\u0064\u0050\u0072\u0069\u006e\u0074");
return &_fgda ,nil ;};

// Items returns all children outline items.
func (_dgcc *Outline )Items ()[]*OutlineItem {return _dgcc .Entries };

// GetContext returns a reference to the subpattern entry: either PdfTilingPattern or PdfShadingPattern.
func (_bgfgf *PdfPattern )GetContext ()PdfModel {return _bgfgf ._adccfb };func (_dfccd *DSS )generateHashMap (_fecda []*_bf .PdfObjectStream )(map[string ]*_bf .PdfObjectStream ,error ){_cgfg :=map[string ]*_bf .PdfObjectStream {};for _ ,_fcge :=range _fecda {_fcabf ,_dfedd :=_bf .DecodeStream (_fcge );
if _dfedd !=nil {return nil ,_dfedd ;};_gbff ,_dfedd :=_dcdg (_fcabf );if _dfedd !=nil {return nil ,_dfedd ;};_cgfg [string (_gbff )]=_fcge ;};return _cgfg ,nil ;};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_gaefg *PdfShadingType2 )ToPdfObject ()_bf .PdfObject {_gaefg .PdfShading .ToPdfObject ();_fdgeb ,_daaga :=_gaefg .getShadingDict ();if _daaga !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _fdgeb ==nil {_bc .Log .Error ("\u0053\u0068\u0061\u0064in\u0067\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u0073\u0020\u006e\u0069\u006c");return nil ;};if _gaefg .Coords !=nil {_fdgeb .Set ("\u0043\u006f\u006f\u0072\u0064\u0073",_gaefg .Coords );
};if _gaefg .Domain !=nil {_fdgeb .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_gaefg .Domain );};if _gaefg .Function !=nil {if len (_gaefg .Function )==1{_fdgeb .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_gaefg .Function [0].ToPdfObject ());
}else {_adeea :=_bf .MakeArray ();for _ ,_gbcg :=range _gaefg .Function {_adeea .Append (_gbcg .ToPdfObject ());};_fdgeb .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_adeea );};};if _gaefg .Extend !=nil {_fdgeb .Set ("\u0045\u0078\u0074\u0065\u006e\u0064",_gaefg .Extend );
};return _gaefg ._daaad ;};

// NewPdfPageResourcesColorspaces returns a new PdfPageResourcesColorspaces object.
func NewPdfPageResourcesColorspaces ()*PdfPageResourcesColorspaces {_ffdef :=&PdfPageResourcesColorspaces {};_ffdef .Names =[]string {};_ffdef .Colorspaces =map[string ]PdfColorspace {};_ffdef ._abca =&_bf .PdfIndirectObject {};return _ffdef ;};func (_daagf fontCommon )coreString ()string {_abdc :="";
if _daagf ._cedfe !=nil {_abdc =_daagf ._cedfe .String ();};return _af .Sprintf ("\u0025#\u0071\u0020%\u0023\u0071\u0020%\u0071\u0020\u006f\u0062\u006a\u003d\u0025d\u0020\u0054\u006f\u0055\u006e\u0069c\u006f\u0064\u0065\u003d\u0025\u0074\u0020\u0066\u006c\u0061\u0067s\u003d\u0030\u0078\u0025\u0030\u0078\u0020\u0025\u0073",_daagf ._fdfb ,_daagf ._adccf ,_daagf ._bcggb ,_daagf ._gbead ,_daagf ._bcdc !=nil ,_daagf .fontFlags (),_abdc );
};

// NewPdfActionNamed returns a new "named" action.
func NewPdfActionNamed ()*PdfActionNamed {_cdb :=NewPdfAction ();_eba :=&PdfActionNamed {};_eba .PdfAction =_cdb ;_cdb .SetContext (_eba );return _eba ;};

// PdfAnnotationCaret represents Caret annotations.
// (Section 12.5.6.11).
type PdfAnnotationCaret struct{*PdfAnnotation ;*PdfAnnotationMarkup ;RD _bf .PdfObject ;Sy _bf .PdfObject ;};func (_aafd *PdfReader )newPdfAnnotationFromIndirectObject (_abda *_bf .PdfIndirectObject )(*PdfAnnotation ,error ){_bada ,_cbe :=_abda .PdfObject .(*_bf .PdfObjectDictionary );
if !_cbe {return nil ,_af .Errorf ("\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0069\u006e\u0064\u0069r\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020a \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};if model :=_aafd ._fgac .GetModelFromPrimitive (_bada );model !=nil {_ceeb ,_afdde :=model .(*PdfAnnotation );if !_afdde {return nil ,_af .Errorf ("\u0063\u0061\u0063\u0068\u0065\u0064 \u006d\u006f\u0064\u0065\u006c\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0050D\u0046\u0020\u0061\u006e\u006e\u006f\u0074a\u0074\u0069\u006f\u006e");
};return _ceeb ,nil ;};_edc :=&PdfAnnotation {};_edc ._cdaf =_abda ;_aafd ._fgac .Register (_bada ,_edc );if _gda :=_bada .Get ("\u0054\u0079\u0070\u0065");_gda !=nil {_bded ,_cad :=_gda .(*_bf .PdfObjectName );if !_cad {_bc .Log .Trace ("\u0049\u006e\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u0021\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u006f\u0066\u0020\u0054\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u0029\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u004e\u0061m\u0065",_gda );
}else {if *_bded !="\u0041\u006e\u006eo\u0074"{_bc .Log .Trace ("\u0055\u006e\u0073\u0075\u0073\u0070\u0065\u0063\u0074\u0065d\u0020\u0054\u0079\u0070\u0065\u0020\u0021=\u0020\u0041\u006e\u006e\u006f\u0074\u0020\u0028\u0025\u0073\u0029",*_bded );};};};
if _bdge :=_bada .Get ("\u0052\u0065\u0063\u0074");_bdge !=nil {_edc .Rect =_bdge ;};if _aeeg :=_bada .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_aeeg !=nil {_edc .Contents =_aeeg ;};if _ceec :=_bada .Get ("\u0050");_ceec !=nil {_edc .P =_ceec ;
};if _daeb :=_bada .Get ("\u004e\u004d");_daeb !=nil {_edc .NM =_daeb ;};if _gfa :=_bada .Get ("\u004d");_gfa !=nil {_edc .M =_gfa ;};if _bddd :=_bada .Get ("\u0046");_bddd !=nil {_edc .F =_bddd ;};if _acae :=_bada .Get ("\u0041\u0050");_acae !=nil {_edc .AP =_acae ;
};if _cedc :=_bada .Get ("\u0041\u0053");_cedc !=nil {_edc .AS =_cedc ;};if _bgg :=_bada .Get ("\u0042\u006f\u0072\u0064\u0065\u0072");_bgg !=nil {_edc .Border =_bgg ;};if _ega :=_bada .Get ("\u0043");_ega !=nil {_edc .C =_ega ;};if _edbg :=_bada .Get ("\u0053\u0074\u0072u\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074");
_edbg !=nil {_edc .StructParent =_edbg ;};if _bgeb :=_bada .Get ("\u004f\u0043");_bgeb !=nil {_edc .OC =_bgeb ;};_fad :=_bada .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065");if _fad ==nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u0049\u004e\u0047:\u0020\u0043\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079 \u0069s\u0073\u0075\u0065\u0020\u002d\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073u\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0073\u0075\u0062\u0074\u0079p\u0065");
_edc ._fgc =nil ;return _edc ,nil ;};_fbfg ,_eca :=_fad .(*_bf .PdfObjectName );if !_eca {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0053\u0075\u0062ty\u0070\u0065\u0020\u006fb\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065 !\u003d\u0020n\u0061\u006d\u0065\u0020\u0028\u0025\u0054\u0029",_fad );
return nil ,_af .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0020\u006f\u0062\u006ae\u0063\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0021\u003d n\u0061\u006d\u0065 \u0028%\u0054\u0029",_fad );};switch *_fbfg {case "\u0054\u0065\u0078\u0074":_ccdg ,_geea :=_aafd .newPdfAnnotationTextFromDict (_bada );
if _geea !=nil {return nil ,_geea ;};_ccdg .PdfAnnotation =_edc ;_edc ._fgc =_ccdg ;return _edc ,nil ;case "\u004c\u0069\u006e\u006b":_dab ,_eae :=_aafd .newPdfAnnotationLinkFromDict (_bada );if _eae !=nil {return nil ,_eae ;};_dab .PdfAnnotation =_edc ;
_edc ._fgc =_dab ;return _edc ,nil ;case "\u0046\u0072\u0065\u0065\u0054\u0065\u0078\u0074":_dbg ,_bag :=_aafd .newPdfAnnotationFreeTextFromDict (_bada );if _bag !=nil {return nil ,_bag ;};_dbg .PdfAnnotation =_edc ;_edc ._fgc =_dbg ;return _edc ,nil ;
case "\u004c\u0069\u006e\u0065":_dca ,_agec :=_aafd .newPdfAnnotationLineFromDict (_bada );if _agec !=nil {return nil ,_agec ;};_dca .PdfAnnotation =_edc ;_edc ._fgc =_dca ;_bc .Log .Trace ("\u004c\u0049\u004e\u0045\u0020\u0041N\u004e\u004f\u0054\u0041\u0054\u0049\u004f\u004e\u003a\u0020\u0061\u006e\u006eo\u0074\u0020\u0028\u0025\u0054\u0029\u003a \u0025\u002b\u0076\u000a",_edc ,_edc );
_bc .Log .Trace ("\u004c\u0049\u004eE\u0020\u0041\u004e\u004eO\u0054\u0041\u0054\u0049\u004f\u004e\u003a \u0063\u0074\u0078\u0020\u0028\u0025\u0054\u0029\u003a\u0020\u0025\u002b\u0076\u000a",_dca ,_dca );_bc .Log .Trace ("\u004c\u0049\u004e\u0045\u0020\u0041\u004e\u004e\u004f\u0054\u0041\u0054\u0049\u004f\u004e\u0020\u004d\u0061\u0072\u006b\u0075\u0070\u003a\u0020c\u0074\u0078\u0020\u0028\u0025T\u0029\u003a \u0025\u002b\u0076\u000a",_dca .PdfAnnotationMarkup ,_dca .PdfAnnotationMarkup );
return _edc ,nil ;case "\u0053\u0071\u0075\u0061\u0072\u0065":_cbeb ,_dbcg :=_aafd .newPdfAnnotationSquareFromDict (_bada );if _dbcg !=nil {return nil ,_dbcg ;};_cbeb .PdfAnnotation =_edc ;_edc ._fgc =_cbeb ;return _edc ,nil ;case "\u0043\u0069\u0072\u0063\u006c\u0065":_cdab ,_ffc :=_aafd .newPdfAnnotationCircleFromDict (_bada );
if _ffc !=nil {return nil ,_ffc ;};_cdab .PdfAnnotation =_edc ;_edc ._fgc =_cdab ;return _edc ,nil ;case "\u0050o\u006c\u0079\u0067\u006f\u006e":_ddc ,_cdeec :=_aafd .newPdfAnnotationPolygonFromDict (_bada );if _cdeec !=nil {return nil ,_cdeec ;};_ddc .PdfAnnotation =_edc ;
_edc ._fgc =_ddc ;return _edc ,nil ;case "\u0050\u006f\u006c\u0079\u004c\u0069\u006e\u0065":_cbg ,_edd :=_aafd .newPdfAnnotationPolyLineFromDict (_bada );if _edd !=nil {return nil ,_edd ;};_cbg .PdfAnnotation =_edc ;_edc ._fgc =_cbg ;return _edc ,nil ;
case "\u0048i\u0067\u0068\u006c\u0069\u0067\u0068t":_ffg ,_bab :=_aafd .newPdfAnnotationHighlightFromDict (_bada );if _bab !=nil {return nil ,_bab ;};_ffg .PdfAnnotation =_edc ;_edc ._fgc =_ffg ;return _edc ,nil ;case "\u0055n\u0064\u0065\u0072\u006c\u0069\u006ee":_gdda ,_bfgdf :=_aafd .newPdfAnnotationUnderlineFromDict (_bada );
if _bfgdf !=nil {return nil ,_bfgdf ;};_gdda .PdfAnnotation =_edc ;_edc ._fgc =_gdda ;return _edc ,nil ;case "\u0053\u0071\u0075\u0069\u0067\u0067\u006c\u0079":_decc ,_eda :=_aafd .newPdfAnnotationSquigglyFromDict (_bada );if _eda !=nil {return nil ,_eda ;
};_decc .PdfAnnotation =_edc ;_edc ._fgc =_decc ;return _edc ,nil ;case "\u0053t\u0072\u0069\u006b\u0065\u004f\u0075t":_cbda ,_bdb :=_aafd .newPdfAnnotationStrikeOut (_bada );if _bdb !=nil {return nil ,_bdb ;};_cbda .PdfAnnotation =_edc ;_edc ._fgc =_cbda ;
return _edc ,nil ;case "\u0043\u0061\u0072e\u0074":_gaagf ,_cgg :=_aafd .newPdfAnnotationCaretFromDict (_bada );if _cgg !=nil {return nil ,_cgg ;};_gaagf .PdfAnnotation =_edc ;_edc ._fgc =_gaagf ;return _edc ,nil ;case "\u0053\u0074\u0061m\u0070":_dabd ,_cfe :=_aafd .newPdfAnnotationStampFromDict (_bada );
if _cfe !=nil {return nil ,_cfe ;};_dabd .PdfAnnotation =_edc ;_edc ._fgc =_dabd ;return _edc ,nil ;case "\u0049\u006e\u006b":_gdfb ,_effc :=_aafd .newPdfAnnotationInkFromDict (_bada );if _effc !=nil {return nil ,_effc ;};_gdfb .PdfAnnotation =_edc ;_edc ._fgc =_gdfb ;
return _edc ,nil ;case "\u0050\u006f\u0070u\u0070":_dfd ,_ebb :=_aafd .newPdfAnnotationPopupFromDict (_bada );if _ebb !=nil {return nil ,_ebb ;};_dfd .PdfAnnotation =_edc ;_edc ._fgc =_dfd ;return _edc ,nil ;case "\u0046\u0069\u006c\u0065\u0041\u0074\u0074\u0061\u0063h\u006d\u0065\u006e\u0074":_daf ,_eece :=_aafd .newPdfAnnotationFileAttachmentFromDict (_bada );
if _eece !=nil {return nil ,_eece ;};_daf .PdfAnnotation =_edc ;_edc ._fgc =_daf ;return _edc ,nil ;case "\u0053\u006f\u0075n\u0064":_agc ,_ebda :=_aafd .newPdfAnnotationSoundFromDict (_bada );if _ebda !=nil {return nil ,_ebda ;};_agc .PdfAnnotation =_edc ;
_edc ._fgc =_agc ;return _edc ,nil ;case "\u0052i\u0063\u0068\u004d\u0065\u0064\u0069a":_fcgc ,_bgae :=_aafd .newPdfAnnotationRichMediaFromDict (_bada );if _bgae !=nil {return nil ,_bgae ;};_fcgc .PdfAnnotation =_edc ;_edc ._fgc =_fcgc ;return _edc ,nil ;
case "\u004d\u006f\u0076i\u0065":_gde ,_gag :=_aafd .newPdfAnnotationMovieFromDict (_bada );if _gag !=nil {return nil ,_gag ;};_gde .PdfAnnotation =_edc ;_edc ._fgc =_gde ;return _edc ,nil ;case "\u0053\u0063\u0072\u0065\u0065\u006e":_abfg ,_acd :=_aafd .newPdfAnnotationScreenFromDict (_bada );
if _acd !=nil {return nil ,_acd ;};_abfg .PdfAnnotation =_edc ;_edc ._fgc =_abfg ;return _edc ,nil ;case "\u0057\u0069\u0064\u0067\u0065\u0074":_dcg ,_bebc :=_aafd .newPdfAnnotationWidgetFromDict (_bada );if _bebc !=nil {return nil ,_bebc ;};_dcg .PdfAnnotation =_edc ;
_edc ._fgc =_dcg ;return _edc ,nil ;case "P\u0072\u0069\u006e\u0074\u0065\u0072\u004d\u0061\u0072\u006b":_aff ,_ffgg :=_aafd .newPdfAnnotationPrinterMarkFromDict (_bada );if _ffgg !=nil {return nil ,_ffgg ;};_aff .PdfAnnotation =_edc ;_edc ._fgc =_aff ;
return _edc ,nil ;case "\u0054r\u0061\u0070\u004e\u0065\u0074":_eccf ,_fdcf :=_aafd .newPdfAnnotationTrapNetFromDict (_bada );if _fdcf !=nil {return nil ,_fdcf ;};_eccf .PdfAnnotation =_edc ;_edc ._fgc =_eccf ;return _edc ,nil ;case "\u0057a\u0074\u0065\u0072\u006d\u0061\u0072k":_egag ,_abb :=_aafd .newPdfAnnotationWatermarkFromDict (_bada );
if _abb !=nil {return nil ,_abb ;};_egag .PdfAnnotation =_edc ;_edc ._fgc =_egag ;return _edc ,nil ;case "\u0033\u0044":_dacf ,_fgbe :=_aafd .newPdfAnnotation3DFromDict (_bada );if _fgbe !=nil {return nil ,_fgbe ;};_dacf .PdfAnnotation =_edc ;_edc ._fgc =_dacf ;
return _edc ,nil ;case "\u0050\u0072\u006f\u006a\u0065\u0063\u0074\u0069\u006f\u006e":_gfca ,_ffaa :=_aafd .newPdfAnnotationProjectionFromDict (_bada );if _ffaa !=nil {return nil ,_ffaa ;};_gfca .PdfAnnotation =_edc ;_edc ._fgc =_gfca ;return _edc ,nil ;
case "\u0052\u0065\u0064\u0061\u0063\u0074":_dcgc ,_adcg :=_aafd .newPdfAnnotationRedactFromDict (_bada );if _adcg !=nil {return nil ,_adcg ;};_dcgc .PdfAnnotation =_edc ;_edc ._fgc =_dcgc ;return _edc ,nil ;};_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020a\u006e\u006e\u006f\u0074\u0061t\u0069\u006fn\u003a\u0020\u0025\u0073",*_fbfg );
return nil ,nil ;};

// NewPdfActionTrans returns a new "trans" action.
func NewPdfActionTrans ()*PdfActionTrans {_effb :=NewPdfAction ();_gaa :=&PdfActionTrans {};_gaa .PdfAction =_effb ;_effb .SetContext (_gaa );return _gaa ;};

// PdfAnnotationUnderline represents Underline annotations.
// (Section 12.5.6.10).
type PdfAnnotationUnderline struct{*PdfAnnotation ;*PdfAnnotationMarkup ;QuadPoints _bf .PdfObject ;};

// UpdateXObjectImageFromImage creates a new XObject Image from an
// Image object `img` and default masks from xobjIn.
// The default masks are overridden if img.hasAlpha
// If `encoder` is nil, uses raw encoding (none).
func UpdateXObjectImageFromImage (xobjIn *XObjectImage ,img *Image ,cs PdfColorspace ,encoder _bf .StreamEncoder )(*XObjectImage ,error ){if encoder ==nil {encoder =_bf .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_cbdcfg ,_egfec :=encoder .EncodeBytes (img .Data );
if _egfec !=nil {_bc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u003a\u0020\u0025\u0076",_egfec );return nil ,_egfec ;};_dfedb :=NewXObjectImage ();_dbecdg :=img .Width ;_edagb :=img .Height ;
_dfedb .Width =&_dbecdg ;_dfedb .Height =&_edagb ;_baaed :=img .BitsPerComponent ;_dfedb .BitsPerComponent =&_baaed ;_dfedb .Filter =encoder ;_dfedb .Stream =_cbdcfg ;if cs ==nil {if img .ColorComponents ==1{_dfedb .ColorSpace =NewPdfColorspaceDeviceGray ();
}else if img .ColorComponents ==3{_dfedb .ColorSpace =NewPdfColorspaceDeviceRGB ();}else if img .ColorComponents ==4{_dfedb .ColorSpace =NewPdfColorspaceDeviceCMYK ();}else {return nil ,_eff .New ("c\u006fl\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u0020u\u006e\u0064\u0065\u0066in\u0065\u0064");
};}else {_dfedb .ColorSpace =cs ;};if len (img ._gfegf )!=0{_dcdcf :=NewXObjectImage ();_dcdcf .Filter =encoder ;_dfgcgb ,_cgcff :=encoder .EncodeBytes (img ._gfegf );if _cgcff !=nil {_bc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u003a\u0020\u0025\u0076",_cgcff );
return nil ,_cgcff ;};_dcdcf .Stream =_dfgcgb ;_dcdcf .BitsPerComponent =_dfedb .BitsPerComponent ;_dcdcf .Width =&img .Width ;_dcdcf .Height =&img .Height ;_dcdcf .ColorSpace =NewPdfColorspaceDeviceGray ();_dfedb .SMask =_dcdcf .ToPdfObject ();}else {_dfedb .SMask =xobjIn .SMask ;
_dfedb .ImageMask =xobjIn .ImageMask ;if _dfedb .ColorSpace .GetNumComponents ()==1{_edffg (_dfedb );};};return _dfedb ,nil ;};

// PdfAnnotationWatermark represents Watermark annotations.
// (Section 12.5.6.22).
type PdfAnnotationWatermark struct{*PdfAnnotation ;FixedPrint _bf .PdfObject ;};

// GetContainingPdfObject returns the container of the outline tree node (indirect object).
func (_eeeb *PdfOutlineTreeNode )GetContainingPdfObject ()_bf .PdfObject {return _eeeb .GetContext ().GetContainingPdfObject ();};

// ToPdfObject implements interface PdfModel.
func (_adfa *PdfAnnotationPopup )ToPdfObject ()_bf .PdfObject {_adfa .PdfAnnotation .ToPdfObject ();_fgdb :=_adfa ._cdaf ;_bdda :=_fgdb .PdfObject .(*_bf .PdfObjectDictionary );_bdda .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0050\u006f\u0070u\u0070"));
_bdda .SetIfNotNil ("\u0050\u0061\u0072\u0065\u006e\u0074",_adfa .Parent );_bdda .SetIfNotNil ("\u004f\u0070\u0065\u006e",_adfa .Open );return _fgdb ;};

// NewPdfAnnotationProjection returns a new projection annotation.
func NewPdfAnnotationProjection ()*PdfAnnotationProjection {_abdb :=NewPdfAnnotation ();_gdfg :=&PdfAnnotationProjection {};_gdfg .PdfAnnotation =_abdb ;_gdfg .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_abdb .SetContext (_gdfg );return _gdfg ;};

// B returns the value of the blue component of the color.
func (_ccdb *PdfColorDeviceRGB )B ()float64 {return _ccdb [2]};func _feeae (_bcca string )(map[_faf .CharCode ]_faf .GlyphName ,error ){_cecgaf :=_gf .Split (_bcca ,"\u000a");_afgfg :=make (map[_faf .CharCode ]_faf .GlyphName );for _ ,_dggag :=range _cecgaf {_beeaf :=_gacb .FindStringSubmatch (_dggag );
if _beeaf ==nil {continue ;};_befg ,_abfga :=_beeaf [1],_beeaf [2];_bcccd ,_adfc :=_ef .Atoi (_befg );if _adfc !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0042\u0061\u0064\u0020\u0065\u006e\u0063\u006fd\u0069n\u0067\u0020\u006c\u0069\u006e\u0065\u002e \u0025\u0071",_dggag );
return nil ,_bf .ErrTypeError ;};_afgfg [_faf .CharCode (_bcccd )]=_faf .GlyphName (_abfga );};_bc .Log .Trace ("g\u0065\u0074\u0045\u006e\u0063\u006fd\u0069\u006e\u0067\u0073\u003a\u0020\u006b\u0065\u0079V\u0061\u006c\u0075e\u0073=\u0025\u0023\u0076",_afgfg );
return _afgfg ,nil ;};func _geegg (_gabfd *PdfField ,_ccgbc _bf .PdfObject )error {switch _gabfd .GetContext ().(type ){case *PdfFieldText :switch _eadg :=_ccgbc .(type ){case *_bf .PdfObjectName :_daff :=_eadg ;_bc .Log .Debug ("\u0055\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u003a\u0020\u0047\u006f\u0074 \u0056\u0020\u0061\u0073\u0020\u006e\u0061\u006d\u0065\u0020\u002d\u003e\u0020c\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020\u0074\u006f s\u0074\u0072\u0069\u006e\u0067\u0020\u0027\u0025\u0073\u0027",_daff .String ());
_gabfd .V =_bf .MakeEncodedString (_eadg .String (),true );case *_bf .PdfObjectString :_gabfd .V =_bf .MakeEncodedString (_eadg .String (),true );default:_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0065\u0078\u0074\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0056\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0054\u0020\u0028\u0025\u0023\u0076\u0029",_eadg ,_eadg );
};case *PdfFieldButton :switch _ccgbc .(type ){case *_bf .PdfObjectName :if len (_ccgbc .String ())> 0{_gabfd .V =_ccgbc ;_fddcbf (_gabfd ,_ccgbc );};case *_bf .PdfObjectString :if len (_ccgbc .String ())> 0{_gabfd .V =_bf .MakeName (_ccgbc .String ());
_fddcbf (_gabfd ,_gabfd .V );};default:_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u004e\u0045\u0058P\u0045\u0043\u0054\u0045\u0044\u0020\u0025\u0073\u0020\u002d>\u0020\u0025\u0076",_gabfd .PartialName (),_ccgbc );_gabfd .V =_ccgbc ;
};case *PdfFieldChoice :switch _ccgbc .(type ){case *_bf .PdfObjectName :if len (_ccgbc .String ())> 0{_gabfd .V =_bf .MakeString (_ccgbc .String ());_fddcbf (_gabfd ,_ccgbc );};case *_bf .PdfObjectString :if len (_ccgbc .String ())> 0{_gabfd .V =_ccgbc ;
_fddcbf (_gabfd ,_bf .MakeName (_ccgbc .String ()));};default:_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u004e\u0045\u0058P\u0045\u0043\u0054\u0045\u0044\u0020\u0025\u0073\u0020\u002d>\u0020\u0025\u0076",_gabfd .PartialName (),_ccgbc );
_gabfd .V =_ccgbc ;};case *PdfFieldSignature :_bc .Log .Debug ("\u0054\u004f\u0044\u004f\u003a \u0053\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0061\u0070\u0070e\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0079\u0065\u0074\u003a\u0020\u0025\u0073\u002f\u0025v",_gabfd .PartialName (),_ccgbc );
};return nil ;};

// ToPdfObject implements interface PdfModel.
func (_aga *PdfActionSetOCGState )ToPdfObject ()_bf .PdfObject {_aga .PdfAction .ToPdfObject ();_bbg :=_aga ._fda ;_age :=_bbg .PdfObject .(*_bf .PdfObjectDictionary );_age .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeSetOCGState )));_age .SetIfNotNil ("\u0053\u0074\u0061t\u0065",_aga .State );
_age .SetIfNotNil ("\u0050\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0052\u0042",_aga .PreserveRB );return _bbg ;};

// NewPdfAppender creates a new Pdf appender from a Pdf reader.
func NewPdfAppender (reader *PdfReader )(*PdfAppender ,error ){_egbf :=&PdfAppender {_fab :reader ._geeda ,Reader :reader ,_gaed :reader ._gafdb ,_ebed :reader ._eddf };_abfe ,_fbaa :=_egbf ._fab .Seek (0,_ag .SeekEnd );if _fbaa !=nil {return nil ,_fbaa ;
};_egbf ._eac =_abfe ;if _ ,_fbaa =_egbf ._fab .Seek (0,_ag .SeekStart );_fbaa !=nil {return nil ,_fbaa ;};_egbf ._abac ,_fbaa =NewPdfReader (_egbf ._fab );if _fbaa !=nil {return nil ,_fbaa ;};for _ ,_acedc :=range _egbf .Reader .GetObjectNums (){if _egbf ._dcgcc < _acedc {_egbf ._dcgcc =_acedc ;
};};_egbf ._bfb =_egbf ._gaed .GetXrefTable ();_egbf ._dafc =_egbf ._gaed .GetXrefOffset ();_egbf ._bagg =append (_egbf ._bagg ,_egbf ._abac .PageList ...);_egbf ._ceaf =make (map[_bf .PdfObject ]struct{});_egbf ._bgfg =make (map[_bf .PdfObject ]int64 );
_egbf ._gcbg =make (map[_bf .PdfObject ]struct{});_egbf ._ccab =_egbf ._abac .AcroForm ;_egbf ._abecf =_egbf ._abac .DSS ;return _egbf ,nil ;};

// String returns a string describing the font descriptor.
func (_ccdge *PdfFontDescriptor )String ()string {var _aadfg []string ;if _ccdge .FontName !=nil {_aadfg =append (_aadfg ,_ccdge .FontName .String ());};if _ccdge .FontFamily !=nil {_aadfg =append (_aadfg ,_ccdge .FontFamily .String ());};if _ccdge .fontFile !=nil {_aadfg =append (_aadfg ,_ccdge .fontFile .String ());
};if _ccdge ._geabf !=nil {_aadfg =append (_aadfg ,_ccdge ._geabf .String ());};_aadfg =append (_aadfg ,_af .Sprintf ("\u0046\u006f\u006et\u0046\u0069\u006c\u0065\u0033\u003d\u0025\u0074",_ccdge .FontFile3 !=nil ));return _af .Sprintf ("\u0046\u004f\u004e\u0054_D\u0045\u0053\u0043\u0052\u0049\u0050\u0054\u004f\u0052\u007b\u0025\u0073\u007d",_gf .Join (_aadfg ,"\u002c\u0020"));
};

// GetPageDict converts the Page to a PDF object dictionary.
func (_cbfce *PdfPage )GetPageDict ()*_bf .PdfObjectDictionary {_eedfc :=_cbfce ._dfcbc ;_eedfc .Clear ();_eedfc .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0050\u0061\u0067\u0065"));_eedfc .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_cbfce .Parent );
if _cbfce .LastModified !=nil {_eedfc .Set ("\u004c\u0061\u0073t\u004d\u006f\u0064\u0069\u0066\u0069\u0065\u0064",_cbfce .LastModified .ToPdfObject ());};if _cbfce .Resources !=nil {_eedfc .Set ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s",_cbfce .Resources .ToPdfObject ());
};if _cbfce .CropBox !=nil {_eedfc .Set ("\u0043r\u006f\u0070\u0042\u006f\u0078",_cbfce .CropBox .ToPdfObject ());};if _cbfce .MediaBox !=nil {_eedfc .Set ("\u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078",_cbfce .MediaBox .ToPdfObject ());};if _cbfce .BleedBox !=nil {_eedfc .Set ("\u0042\u006c\u0065\u0065\u0064\u0042\u006f\u0078",_cbfce .BleedBox .ToPdfObject ());
};if _cbfce .TrimBox !=nil {_eedfc .Set ("\u0054r\u0069\u006d\u0042\u006f\u0078",_cbfce .TrimBox .ToPdfObject ());};if _cbfce .ArtBox !=nil {_eedfc .Set ("\u0041\u0072\u0074\u0042\u006f\u0078",_cbfce .ArtBox .ToPdfObject ());};_eedfc .SetIfNotNil ("\u0042\u006f\u0078C\u006f\u006c\u006f\u0072\u0049\u006e\u0066\u006f",_cbfce .BoxColorInfo );
_eedfc .SetIfNotNil ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_cbfce .Contents );if _cbfce .Rotate !=nil {_eedfc .Set ("\u0052\u006f\u0074\u0061\u0074\u0065",_bf .MakeInteger (*_cbfce .Rotate ));};_eedfc .SetIfNotNil ("\u0047\u0072\u006fu\u0070",_cbfce .Group );
_eedfc .SetIfNotNil ("\u0054\u0068\u0075m\u0062",_cbfce .Thumb );_eedfc .SetIfNotNil ("\u0042",_cbfce .B );_eedfc .SetIfNotNil ("\u0044\u0075\u0072",_cbfce .Dur );_eedfc .SetIfNotNil ("\u0054\u0072\u0061n\u0073",_cbfce .Trans );_eedfc .SetIfNotNil ("\u0041\u0041",_cbfce .AA );
_eedfc .SetIfNotNil ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061",_cbfce .Metadata );_eedfc .SetIfNotNil ("\u0050i\u0065\u0063\u0065\u0049\u006e\u0066o",_cbfce .PieceInfo );_eedfc .SetIfNotNil ("\u0053\u0074\u0072\u0075\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074\u0073",_cbfce .StructParents );
_eedfc .SetIfNotNil ("\u0049\u0044",_cbfce .ID );_eedfc .SetIfNotNil ("\u0050\u005a",_cbfce .PZ );_eedfc .SetIfNotNil ("\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006fn\u0049\u006e\u0066\u006f",_cbfce .SeparationInfo );_eedfc .SetIfNotNil ("\u0054\u0061\u0062\u0073",_cbfce .Tabs );
_eedfc .SetIfNotNil ("T\u0065m\u0070\u006c\u0061\u0074\u0065\u0049\u006e\u0073t\u0061\u006e\u0074\u0069at\u0065\u0064",_cbfce .TemplateInstantiated );_eedfc .SetIfNotNil ("\u0050r\u0065\u0073\u0053\u0074\u0065\u0070s",_cbfce .PresSteps );_eedfc .SetIfNotNil ("\u0055\u0073\u0065\u0072\u0055\u006e\u0069\u0074",_cbfce .UserUnit );
_eedfc .SetIfNotNil ("\u0056\u0050",_cbfce .VP );if _cbfce ._gbcab !=nil {_cadfc :=_bf .MakeArray ();for _ ,_fcddd :=range _cbfce ._gbcab {if _gabdb :=_fcddd .GetContext ();_gabdb !=nil {_cadfc .Append (_gabdb .ToPdfObject ());}else {_cadfc .Append (_fcddd .ToPdfObject ());
};};if _cadfc .Len ()> 0{_eedfc .Set ("\u0041\u006e\u006e\u006f\u0074\u0073",_cadfc );};}else if _cbfce .Annots !=nil {_eedfc .SetIfNotNil ("\u0041\u006e\u006e\u006f\u0074\u0073",_cbfce .Annots );};return _eedfc ;};

// Size returns the width and the height of the page. The method reports
// the page dimensions as displayed by a PDF viewer (i.e. page rotation is
// taken into account).
func (_defaf *PdfPage )Size ()(float64 ,float64 ,error ){_dcgfg ,_cfed :=_defaf .GetMediaBox ();if _cfed !=nil {return 0,0,_cfed ;};_fbced ,_aeeec :=_dcgfg .Width (),_dcgfg .Height ();_gddec ,_cfed :=_defaf .GetRotate ();if _cfed !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_cfed .Error ());
};if _baebg :=_gddec ;_baebg %360!=0&&_baebg %90==0{if _fagf :=(360+_baebg %360)%360;_fagf ==90||_fagf ==270{_fbced ,_aeeec =_aeeec ,_fbced ;};};return _fbced ,_aeeec ,nil ;};

// PdfDate represents a date, which is a PDF string of the form:
// (D:YYYYMMDDHHmmSSOHH'mm)
type PdfDate struct{_ddgda int64 ;_eeaeb int64 ;_fcdcc int64 ;_bbbc int64 ;_gddgc int64 ;_bdgge int64 ;_fdffd byte ;_bgfda int64 ;_egbag int64 ;};

// NewPdfActionGoToR returns a new "go to remote" action.
func NewPdfActionGoToR ()*PdfActionGoToR {_aaf :=NewPdfAction ();_ebe :=&PdfActionGoToR {};_ebe .PdfAction =_aaf ;_aaf .SetContext (_ebe );return _ebe ;};

// GetParamsDict returns *core.PdfObjectDictionary with a set of basic image parameters.
func (_abfa *Image )GetParamsDict ()*_bf .PdfObjectDictionary {_befgb :=_bf .MakeDict ();_befgb .Set ("\u0057\u0069\u0064t\u0068",_bf .MakeInteger (_abfa .Width ));_befgb .Set ("\u0048\u0065\u0069\u0067\u0068\u0074",_bf .MakeInteger (_abfa .Height ));_befgb .Set ("\u0043o\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073",_bf .MakeInteger (int64 (_abfa .ColorComponents )));
_befgb .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_bf .MakeInteger (_abfa .BitsPerComponent ));return _befgb ;};

// NewPdfAnnotationLink returns a new link annotation.
func NewPdfAnnotationLink ()*PdfAnnotationLink {_ecbg :=NewPdfAnnotation ();_bfg :=&PdfAnnotationLink {};_bfg .PdfAnnotation =_ecbg ;_ecbg .SetContext (_bfg );return _bfg ;};

// GetNumComponents returns the number of input color components, i.e. that are input to the tint transform.
func (_dagcg *PdfColorspaceDeviceN )GetNumComponents ()int {return _dagcg .ColorantNames .Len ()};

// ImageToRGB converts an image in CMYK32 colorspace to an RGB image.
func (_fbbf *PdfColorspaceDeviceCMYK )ImageToRGB (img Image )(Image ,error ){_bc .Log .Trace ("\u0043\u004d\u0059\u004b\u0033\u0032\u0020\u002d\u003e\u0020\u0052\u0047\u0042");_bc .Log .Trace ("I\u006d\u0061\u0067\u0065\u0020\u0042P\u0043\u003a\u0020\u0025\u0064\u002c \u0043\u006f\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020%\u0064",img .BitsPerComponent ,img .ColorComponents );
_bc .Log .Trace ("\u004c\u0065\u006e \u0064\u0061\u0074\u0061\u003a\u0020\u0025\u0064",len (img .Data ));_bc .Log .Trace ("H\u0065\u0069\u0067\u0068t:\u0020%\u0064\u002c\u0020\u0057\u0069d\u0074\u0068\u003a\u0020\u0025\u0064",img .Height ,img .Width );
_ebff ,_dbea :=_ff .NewImage (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),img .ColorComponents ,img .Data ,img ._gfegf ,img ._dbcfb );if _dbea !=nil {return Image {},_dbea ;};_cafd ,_dbea :=_ff .NRGBAConverter .Convert (_ebff );if _dbea !=nil {return Image {},_dbea ;
};return _cgfba (_cafd .Base ()),nil ;};

// GetContainingPdfObject returns the page as a dictionary within an PdfIndirectObject.
func (_gcfa *PdfPage )GetContainingPdfObject ()_bf .PdfObject {return _gcfa ._cddaa };

// GetColorspaceByName returns the colorspace with the specified name from the page resources.
func (_fagc *PdfPageResources )GetColorspaceByName (keyName _bf .PdfObjectName )(PdfColorspace ,bool ){_bggd ,_bcfa :=_fagc .GetColorspaces ();if _bcfa !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0072\u0061\u0063\u0065: \u0025\u0076",_bcfa );
return nil ,false ;};if _bggd ==nil {return nil ,false ;};_fcegc ,_gacfa :=_bggd .Colorspaces [string (keyName )];if !_gacfa {return nil ,false ;};return _fcegc ,true ;};

// NewPdfActionImportData returns a new "import data" action.
func NewPdfActionImportData ()*PdfActionImportData {_eec :=NewPdfAction ();_dc :=&PdfActionImportData {};_dc .PdfAction =_eec ;_eec .SetContext (_dc );return _dc ;};func (_cdgd *PdfReader )newPdfAnnotationRedactFromDict (_efag *_bf .PdfObjectDictionary )(*PdfAnnotationRedact ,error ){_ebba :=PdfAnnotationRedact {};
_gedf ,_eeag :=_cdgd .newPdfAnnotationMarkupFromDict (_efag );if _eeag !=nil {return nil ,_eeag ;};_ebba .PdfAnnotationMarkup =_gedf ;_ebba .QuadPoints =_efag .Get ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073");_ebba .IC =_efag .Get ("\u0049\u0043");
_ebba .RO =_efag .Get ("\u0052\u004f");_ebba .OverlayText =_efag .Get ("O\u0076\u0065\u0072\u006c\u0061\u0079\u0054\u0065\u0078\u0074");_ebba .Repeat =_efag .Get ("\u0052\u0065\u0070\u0065\u0061\u0074");_ebba .DA =_efag .Get ("\u0044\u0041");_ebba .Q =_efag .Get ("\u0051");
return &_ebba ,nil ;};

// PdfInfo holds document information that will overwrite
// document information global variables defined above.
type PdfInfo struct{Title *_bf .PdfObjectString ;Author *_bf .PdfObjectString ;Subject *_bf .PdfObjectString ;Keywords *_bf .PdfObjectString ;Creator *_bf .PdfObjectString ;Producer *_bf .PdfObjectString ;CreationDate *PdfDate ;ModifiedDate *PdfDate ;Trapped *_bf .PdfObjectName ;
_dbaa *_bf .PdfObjectDictionary ;};func (_gaaff *Image )samplesTrimPadding (_cefc []uint32 )[]uint32 {_aeaaf :=_gaaff .ColorComponents *int (_gaaff .Width )*int (_gaaff .Height );if len (_cefc )==_aeaaf {return _cefc ;};_agdcd :=make ([]uint32 ,_aeaaf );
_ggaca :=int (_gaaff .Width )*_gaaff .ColorComponents ;var _cggec ,_gfeb ,_cgfa ,_dbbcb int ;_bbcba :=_ff .BytesPerLine (int (_gaaff .Width ),int (_gaaff .BitsPerComponent ),_gaaff .ColorComponents );for _cggec =0;_cggec < int (_gaaff .Height );_cggec ++{_gfeb =_cggec *int (_gaaff .Width );
_cgfa =_cggec *_bbcba ;for _dbbcb =0;_dbbcb < _ggaca ;_dbbcb ++{_agdcd [_gfeb +_dbbcb ]=_cefc [_cgfa +_dbbcb ];};};return _agdcd ;};

// Flags returns the field flags for the field accounting for any inherited flags.
func (_bffd *PdfField )Flags ()FieldFlag {var _cecg FieldFlag ;_afff ,_fdfag :=_bffd .inherit (func (_acdg *PdfField )bool {if _acdg .Ff !=nil {_cecg =FieldFlag (*_acdg .Ff );return true ;};return false ;});if _fdfag !=nil {_bc .Log .Debug ("\u0045\u0072\u0072o\u0072\u0020\u0065\u0076\u0061\u006c\u0075\u0061\u0074\u0069\u006e\u0067\u0020\u0066\u006c\u0061\u0067\u0073\u0020\u0076\u0069\u0061\u0020\u0069\u006e\u0068\u0065\u0072\u0069t\u0061\u006e\u0063\u0065\u003a\u0020\u0025\u0076",_fdfag );
};if !_afff {_bc .Log .Trace ("N\u006f\u0020\u0066\u0069\u0065\u006cd\u0020\u0066\u006c\u0061\u0067\u0073 \u0066\u006f\u0075\u006e\u0064\u0020\u002d \u0061\u0073\u0073\u0075\u006d\u0065\u0020\u0063\u006c\u0065a\u0072");};return _cecg ;};

// ToPdfObject implements interface PdfModel.
func (_ebeg *PdfAnnotationPolyLine )ToPdfObject ()_bf .PdfObject {_ebeg .PdfAnnotation .ToPdfObject ();_bgbd :=_ebeg ._cdaf ;_dbbc :=_bgbd .PdfObject .(*_bf .PdfObjectDictionary );_ebeg .PdfAnnotationMarkup .appendToPdfDictionary (_dbbc );_dbbc .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0050\u006f\u006c\u0079\u004c\u0069\u006e\u0065"));
_dbbc .SetIfNotNil ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073",_ebeg .Vertices );_dbbc .SetIfNotNil ("\u004c\u0045",_ebeg .LE );_dbbc .SetIfNotNil ("\u0042\u0053",_ebeg .BS );_dbbc .SetIfNotNil ("\u0049\u0043",_ebeg .IC );_dbbc .SetIfNotNil ("\u0042\u0045",_ebeg .BE );
_dbbc .SetIfNotNil ("\u0049\u0054",_ebeg .IT );_dbbc .SetIfNotNil ("\u004de\u0061\u0073\u0075\u0072\u0065",_ebeg .Measure );return _bgbd ;};

// NewPdfRectangle creates a PDF rectangle object based on an input array of 4 integers.
// Defining the lower left (LL) and upper right (UR) corners with
// floating point numbers.
func NewPdfRectangle (arr _bf .PdfObjectArray )(*PdfRectangle ,error ){_bbdaa :=PdfRectangle {};if arr .Len ()!=4{return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065\u0020\u0061\u0072r\u0061\u0079\u002c\u0020\u006c\u0065\u006e \u0021\u003d\u0020\u0034");
};var _defg error ;_bbdaa .Llx ,_defg =_bf .GetNumberAsFloat (arr .Get (0));if _defg !=nil {return nil ,_defg ;};_bbdaa .Lly ,_defg =_bf .GetNumberAsFloat (arr .Get (1));if _defg !=nil {return nil ,_defg ;};_bbdaa .Urx ,_defg =_bf .GetNumberAsFloat (arr .Get (2));
if _defg !=nil {return nil ,_defg ;};_bbdaa .Ury ,_defg =_bf .GetNumberAsFloat (arr .Get (3));if _defg !=nil {return nil ,_defg ;};return &_bbdaa ,nil ;};

// PdfWriter handles outputing PDF content.
type PdfWriter struct{_eacbc *_bf .PdfIndirectObject ;_bfgbf *_bf .PdfIndirectObject ;_ecabe map[_bf .PdfObject ]struct{};_agfac []_bf .PdfObject ;_bcgbbe map[_bf .PdfObject ]struct{};_abefe []*_bf .PdfIndirectObject ;_gdbae *PdfOutlineTreeNode ;_cecba *_bf .PdfObjectDictionary ;
_egcgd []_bf .PdfObject ;_efddb *_bf .PdfIndirectObject ;_fddfe *_ee .Writer ;_feddc int64 ;_cgebb error ;_ebefb *_bf .PdfCrypt ;_edaf *_bf .PdfObjectDictionary ;_caacf *_bf .PdfIndirectObject ;_bdeaee *_bf .PdfObjectArray ;_abccg _bf .Version ;_fdecf *bool ;
_fdbad map[_bf .PdfObject ][]*_bf .PdfObjectDictionary ;_dadgd *PdfAcroForm ;_geaaa Optimizer ;_ggaa StandardApplier ;_baadg map[int ]crossReference ;_cffb int64 ;ObjNumOffset int ;_dgbga bool ;_cffd _bf .XrefTable ;_dbdff int64 ;_gdgdd int64 ;_bbcbd map[_bf .PdfObject ]int64 ;
_dacda map[_bf .PdfObject ]struct{};_efcfa string ;_dddd []*PdfOutputIntent ;_ccecf bool ;_ggfdb ,_ebecb string ;};

// PdfOutputIntentType is the subtype of the given PdfOutputIntent.
type PdfOutputIntentType int ;

// FillWithAppearance populates `form` with values provided by `provider`.
// If not nil, `appGen` is used to generate appearance dictionaries for the
// field annotations, based on the specified settings. Otherwise, appearance
// generation is skipped.
// e.g.: appGen := annotator.FieldAppearance{OnlyIfMissing: true, RegenerateTextFields: true}
// NOTE: In next major version this functionality will be part of Fill. (v4)
func (_cacdc *PdfAcroForm )FillWithAppearance (provider FieldValueProvider ,appGen FieldAppearanceGenerator )error {_fbgf :=_cacdc .fill (provider ,appGen );if _fbgf !=nil {return _fbgf ;};if _ ,_efga :=provider .(FieldImageProvider );_efga {_fbgf =_cacdc .fillImageWithAppearance (provider .(FieldImageProvider ),appGen );
};return _fbgf ;};

// ToPdfObject returns the PDF representation of the pattern.
func (_efee *PdfPattern )ToPdfObject ()_bf .PdfObject {_cegefc :=_efee .getDict ();_cegefc .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_cegefc .Set ("P\u0061\u0074\u0074\u0065\u0072\u006e\u0054\u0079\u0070\u0065",_bf .MakeInteger (_efee .PatternType ));
return _efee ._bfcdg ;};

// GetFontDescriptor returns the font descriptor for `font`.
func (_feafb PdfFont )GetFontDescriptor ()(*PdfFontDescriptor ,error ){return _feafb ._cacce .getFontDescriptor (),nil ;};func _degff ()string {_ggeae .Lock ();defer _ggeae .Unlock ();_cggfg :=_bad .GetLicenseKey ();if len (_cfbed )> 0&&(_cggfg .IsLicensed ()||_cddga ){return _cfbed ;
};return _af .Sprintf ("\u0055\u006e\u0069Do\u0063\u0020\u0076\u0025\u0073\u0020\u0028\u0025\u0073)\u0020-\u0020h\u0074t\u0070\u003a\u002f\u002f\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f",_bfafe (),_cggfg .TypeToString ());};const (_ PdfOutputIntentType =iota ;
PdfOutputIntentTypeA1 ;PdfOutputIntentTypeA2 ;PdfOutputIntentTypeA3 ;PdfOutputIntentTypeA4 ;PdfOutputIntentTypeX ;);

// PdfActionURI represents an URI action.
type PdfActionURI struct{*PdfAction ;URI _bf .PdfObject ;IsMap _bf .PdfObject ;};

// PdfAnnotationScreen represents Screen annotations.
// (Section 12.5.6.18).
type PdfAnnotationScreen struct{*PdfAnnotation ;T _bf .PdfObject ;MK _bf .PdfObject ;A _bf .PdfObject ;AA _bf .PdfObject ;};

// ToPdfObject implements interface PdfModel.
func (_cdcb *PdfAnnotationStrikeOut )ToPdfObject ()_bf .PdfObject {_cdcb .PdfAnnotation .ToPdfObject ();_acg :=_cdcb ._cdaf ;_dcgg :=_acg .PdfObject .(*_bf .PdfObjectDictionary );_cdcb .PdfAnnotationMarkup .appendToPdfDictionary (_dcgg );_dcgg .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0053t\u0072\u0069\u006b\u0065\u004f\u0075t"));
_dcgg .SetIfNotNil ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073",_cdcb .QuadPoints );return _acg ;};

// WriteString outputs the object as it is to be written to file.
func (_gfbab *pdfSignDictionary )WriteString ()string {_gfbab ._fccba =0;_gfbab ._ddbc =0;_gfbab ._bgbeg =0;_gfbab ._bcfab =0;_gfdfa :=_cdc .NewBuffer (nil );_gfdfa .WriteString ("\u003c\u003c");for _ ,_fgaeb :=range _gfbab .Keys (){_fbdg :=_gfbab .Get (_fgaeb );
switch _fgaeb {case "\u0042y\u0074\u0065\u0052\u0061\u006e\u0067e":_gfdfa .WriteString (_fgaeb .WriteString ());_gfdfa .WriteString ("\u0020");_gfbab ._bgbeg =_gfdfa .Len ();_gfdfa .WriteString (_fbdg .WriteString ());_gfdfa .WriteString ("\u0020");_gfbab ._bcfab =_gfdfa .Len ()-1;
case "\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073":_gfdfa .WriteString (_fgaeb .WriteString ());_gfdfa .WriteString ("\u0020");_gfbab ._fccba =_gfdfa .Len ();_gfdfa .WriteString (_fbdg .WriteString ());_gfdfa .WriteString ("\u0020");_gfbab ._ddbc =_gfdfa .Len ()-1;
default:_gfdfa .WriteString (_fgaeb .WriteString ());_gfdfa .WriteString ("\u0020");_gfdfa .WriteString (_fbdg .WriteString ());};};_gfdfa .WriteString ("\u003e\u003e");return _gfdfa .String ();};

// ToPdfObject implements interface PdfModel.
// Note: Call the sub-annotation's ToPdfObject to set both the generic and non-generic information.
func (_gadb *PdfAnnotation )ToPdfObject ()_bf .PdfObject {_edg :=_gadb ._cdaf ;_aceb :=_edg .PdfObject .(*_bf .PdfObjectDictionary );_aceb .Clear ();_aceb .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0041\u006e\u006eo\u0074"));_aceb .SetIfNotNil ("\u0052\u0065\u0063\u0074",_gadb .Rect );
_aceb .SetIfNotNil ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_gadb .Contents );_aceb .SetIfNotNil ("\u0050",_gadb .P );_aceb .SetIfNotNil ("\u004e\u004d",_gadb .NM );_aceb .SetIfNotNil ("\u004d",_gadb .M );_aceb .SetIfNotNil ("\u0046",_gadb .F );
_aceb .SetIfNotNil ("\u0041\u0050",_gadb .AP );_aceb .SetIfNotNil ("\u0041\u0053",_gadb .AS );_aceb .SetIfNotNil ("\u0042\u006f\u0072\u0064\u0065\u0072",_gadb .Border );_aceb .SetIfNotNil ("\u0043",_gadb .C );_aceb .SetIfNotNil ("\u0053\u0074\u0072u\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074",_gadb .StructParent );
_aceb .SetIfNotNil ("\u004f\u0043",_gadb .OC );return _edg ;};

// GetPdfVersion gets the version of the PDF used within this document.
func (_daagaa *PdfWriter )GetPdfVersion ()string {return _daagaa .getPdfVersion ()};

// GetPerms returns the Permissions dictionary
func (_fedd *PdfReader )GetPerms ()*Permissions {return _fedd ._eggf };

// NewPdfActionGoTo returns a new "go to" action.
func NewPdfActionGoTo ()*PdfActionGoTo {_bcdd :=NewPdfAction ();_ce :=&PdfActionGoTo {};_ce .PdfAction =_bcdd ;_bcdd .SetContext (_ce );return _ce ;};func _gbfdd (_cgaag *_bf .PdfObjectDictionary )(*PdfShadingType6 ,error ){_afebb :=PdfShadingType6 {};
_cacgc :=_cgaag .Get ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065");if _cacgc ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064 \u0061\u0074\u0074\u0072\u0069\u0062\u0075t\u0065\u0020\u006d\u0069\u0073\u0073i\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072C\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065");
return nil ,ErrRequiredAttributeMissing ;};_afeef ,_dgedef :=_cacgc .(*_bf .PdfObjectInteger );if !_dgedef {_bc .Log .Debug ("\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065\u0020\u006eo\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_cacgc );
return nil ,_bf .ErrTypeError ;};_afebb .BitsPerCoordinate =_afeef ;_cacgc =_cgaag .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _cacgc ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064\u0020a\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073in\u0067\u003a\u0020B\u0069\u0074s\u0050\u0065\u0072\u0043\u006f\u006dp\u006f\u006ee\u006e\u0074");
return nil ,ErrRequiredAttributeMissing ;};_afeef ,_dgedef =_cacgc .(*_bf .PdfObjectInteger );if !_dgedef {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065r \u0028\u0067\u006ft\u0020%\u0054\u0029",_cacgc );
return nil ,_bf .ErrTypeError ;};_afebb .BitsPerComponent =_afeef ;_cacgc =_cgaag .Get ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0046\u006c\u0061\u0067");if _cacgc ==nil {_bc .Log .Debug ("\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065r\u0046\u006c\u0061\u0067");
return nil ,ErrRequiredAttributeMissing ;};_afeef ,_dgedef =_cacgc .(*_bf .PdfObjectInteger );if !_dgedef {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072F\u006c\u0061\u0067\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074e\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025T\u0029",_cacgc );
return nil ,_bf .ErrTypeError ;};_afebb .BitsPerComponent =_afeef ;_cacgc =_cgaag .Get ("\u0044\u0065\u0063\u006f\u0064\u0065");if _cacgc ==nil {_bc .Log .Debug ("\u0052\u0065\u0071ui\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069b\u0075t\u0065 \u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065");
return nil ,ErrRequiredAttributeMissing ;};_ccgfff ,_dgedef :=_cacgc .(*_bf .PdfObjectArray );if !_dgedef {_bc .Log .Debug ("\u0044\u0065\u0063\u006fd\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_cacgc );
return nil ,_bf .ErrTypeError ;};_afebb .Decode =_ccgfff ;if _fedc :=_cgaag .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_fedc !=nil {_afebb .Function =[]PdfFunction {};if _deafd ,_dddba :=_fedc .(*_bf .PdfObjectArray );_dddba {for _ ,_efbdb :=range _deafd .Elements (){_dbbcbf ,_beee :=_bbbbd (_efbdb );
if _beee !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_beee );return nil ,_beee ;};_afebb .Function =append (_afebb .Function ,_dbbcbf );
};}else {_febcc ,_begfe :=_bbbbd (_fedc );if _begfe !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_begfe );return nil ,_begfe ;
};_afebb .Function =append (_afebb .Function ,_febcc );};};return &_afebb ,nil ;};

// SetPdfCreationDate sets the CreationDate attribute of the output PDF.
func SetPdfCreationDate (creationDate _g .Time ){_ggeae .Lock ();defer _ggeae .Unlock ();_gfacae =creationDate ;};

// ToPdfObject returns colorspace in a PDF object format [name dictionary]
func (_bbeb *PdfColorspaceCalRGB )ToPdfObject ()_bf .PdfObject {_fcgbc :=&_bf .PdfObjectArray {};_fcgbc .Append (_bf .MakeName ("\u0043\u0061\u006c\u0052\u0047\u0042"));_bcde :=_bf .MakeDict ();if _bbeb .WhitePoint !=nil {_cafb :=_bf .MakeArray (_bf .MakeFloat (_bbeb .WhitePoint [0]),_bf .MakeFloat (_bbeb .WhitePoint [1]),_bf .MakeFloat (_bbeb .WhitePoint [2]));
_bcde .Set ("\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074",_cafb );}else {_bc .Log .Error ("\u0043\u0061l\u0052\u0047\u0042\u003a \u004d\u0069s\u0073\u0069\u006e\u0067\u0020\u0057\u0068\u0069t\u0065\u0050\u006f\u0069\u006e\u0074\u0020\u0028\u0052\u0065\u0071\u0075i\u0072\u0065\u0064\u0029");
};if _bbeb .BlackPoint !=nil {_egcg :=_bf .MakeArray (_bf .MakeFloat (_bbeb .BlackPoint [0]),_bf .MakeFloat (_bbeb .BlackPoint [1]),_bf .MakeFloat (_bbeb .BlackPoint [2]));_bcde .Set ("\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074",_egcg );
};if _bbeb .Gamma !=nil {_adgfa :=_bf .MakeArray (_bf .MakeFloat (_bbeb .Gamma [0]),_bf .MakeFloat (_bbeb .Gamma [1]),_bf .MakeFloat (_bbeb .Gamma [2]));_bcde .Set ("\u0047\u0061\u006dm\u0061",_adgfa );};if _bbeb .Matrix !=nil {_efde :=_bf .MakeArray (_bf .MakeFloat (_bbeb .Matrix [0]),_bf .MakeFloat (_bbeb .Matrix [1]),_bf .MakeFloat (_bbeb .Matrix [2]),_bf .MakeFloat (_bbeb .Matrix [3]),_bf .MakeFloat (_bbeb .Matrix [4]),_bf .MakeFloat (_bbeb .Matrix [5]),_bf .MakeFloat (_bbeb .Matrix [6]),_bf .MakeFloat (_bbeb .Matrix [7]),_bf .MakeFloat (_bbeb .Matrix [8]));
_bcde .Set ("\u004d\u0061\u0074\u0072\u0069\u0078",_efde );};_fcgbc .Append (_bcde );if _bbeb ._gafc !=nil {_bbeb ._gafc .PdfObject =_fcgbc ;return _bbeb ._gafc ;};return _fcgbc ;};func (_defc *PdfColorspaceCalGray )String ()string {return "\u0043a\u006c\u0047\u0072\u0061\u0079"};
func _cada (_afbaf []byte )[]byte {const _bgggf =52845;const _ddcc =22719;_dbddb :=55665;for _ ,_ddeg :=range _afbaf [:4]{_dbddb =(int (_ddeg )+_dbddb )*_bgggf +_ddcc ;};_bdadb :=make ([]byte ,len (_afbaf )-4);for _dbcbb ,_cbdb :=range _afbaf [4:]{_bdadb [_dbcbb ]=byte (int (_cbdb )^_dbddb >>8);
_dbddb =(int (_cbdb )+_dbddb )*_bgggf +_ddcc ;};return _bdadb ;};

// String returns a string representation of the field.
func (_dgdc *PdfField )String ()string {if _feega ,_bfab :=_dgdc .ToPdfObject ().(*_bf .PdfIndirectObject );_bfab {return _af .Sprintf ("\u0025\u0054\u003a\u0020\u0025\u0073",_dgdc ._gfbeb ,_feega .PdfObject .String ());};return "";};

// SignatureHandlerDocMDP extends SignatureHandler with the ValidateWithOpts method for checking the DocMDP policy.
type SignatureHandlerDocMDP interface{SignatureHandler ;

// ValidateWithOpts validates a PDF signature by checking PdfReader or PdfParser
// ValidateWithOpts shall contain Validate call
ValidateWithOpts (_gbfb *PdfSignature ,_fegfg Hasher ,_cefaf SignatureHandlerDocMDPParams )(SignatureValidationResult ,error );};

// NewPdfReaderFromFile creates a new PdfReader from the speficied PDF file.
// If ReaderOpts is nil it will be set to default value from NewReaderOpts.
func NewPdfReaderFromFile (pdfFile string ,opts *ReaderOpts )(*PdfReader ,*_db .File ,error ){const _caggba ="\u006d\u006f\u0064\u0065\u006c\u003a\u004e\u0065\u0077\u0050\u0064f\u0052\u0065\u0061\u0064\u0065\u0072\u0046\u0072\u006f\u006dF\u0069\u006c\u0065";
_bccbb ,_cbad :=_db .Open (pdfFile );if _cbad !=nil {return nil ,nil ,_cbad ;};_fafaf ,_cbad :=_bfaag (_bccbb ,opts ,true ,_caggba );if _cbad !=nil {_bccbb .Close ();return nil ,nil ,_cbad ;};return _fafaf ,_bccbb ,nil ;};

// ToInteger convert to an integer format.
func (_bbcee *PdfColorLab )ToInteger (bits int )[3]uint32 {_cbeda :=_fg .Pow (2,float64 (bits ))-1;return [3]uint32 {uint32 (_cbeda *_bbcee .L ()),uint32 (_cbeda *_bbcee .A ()),uint32 (_cbeda *_bbcee .B ())};};func (_ecd *PdfReader )newPdfAnnotationTextFromDict (_fgg *_bf .PdfObjectDictionary )(*PdfAnnotationText ,error ){_bec :=PdfAnnotationText {};
_cbca ,_ebgc :=_ecd .newPdfAnnotationMarkupFromDict (_fgg );if _ebgc !=nil {return nil ,_ebgc ;};_bec .PdfAnnotationMarkup =_cbca ;_bec .Open =_fgg .Get ("\u004f\u0070\u0065\u006e");_bec .Name =_fgg .Get ("\u004e\u0061\u006d\u0065");_bec .State =_fgg .Get ("\u0053\u0074\u0061t\u0065");
_bec .StateModel =_fgg .Get ("\u0053\u0074\u0061\u0074\u0065\u004d\u006f\u0064\u0065\u006c");return &_bec ,nil ;};

// A returns the value of the A component of the color.
func (_cegd *PdfColorLab )A ()float64 {return _cegd [1]};

// PdfOutline represents a PDF outline dictionary (Table 152 - p. 376).
type PdfOutline struct{PdfOutlineTreeNode ;Parent *PdfOutlineTreeNode ;Count *int64 ;_ecfae *_bf .PdfIndirectObject ;};

// ColorToRGB converts a CalGray color to an RGB color.
func (_cdcd *PdfColorspaceCalGray )ColorToRGB (color PdfColor )(PdfColor ,error ){_faff ,_facd :=color .(*PdfColorCalGray );if !_facd {_bc .Log .Debug ("\u0049n\u0070\u0075\u0074\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006eo\u0074\u0020\u0063\u0061\u006c\u0020\u0067\u0072\u0061\u0079");
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};ANorm :=_faff .Val ();X :=_cdcd .WhitePoint [0]*_fg .Pow (ANorm ,_cdcd .Gamma );Y :=_cdcd .WhitePoint [1]*_fg .Pow (ANorm ,_cdcd .Gamma );
Z :=_cdcd .WhitePoint [2]*_fg .Pow (ANorm ,_cdcd .Gamma );_cddff :=3.240479*X +-1.537150*Y +-0.498535*Z ;_egabf :=-0.969256*X +1.875992*Y +0.041556*Z ;_aebc :=0.055648*X +-0.204043*Y +1.057311*Z ;_cddff =_fg .Min (_fg .Max (_cddff ,0),1.0);_egabf =_fg .Min (_fg .Max (_egabf ,0),1.0);
_aebc =_fg .Min (_fg .Max (_aebc ,0),1.0);return NewPdfColorDeviceRGB (_cddff ,_egabf ,_aebc ),nil ;};func (_ecgb *LTV )getCerts (_acgb []*_d .Certificate )([][]byte ,error ){_aagae :=make ([][]byte ,0,len (_acgb ));for _ ,_befcc :=range _acgb {_aagae =append (_aagae ,_befcc .Raw );
};return _aagae ,nil ;};

// PdfAnnotationFileAttachment represents FileAttachment annotations.
// (Section 12.5.6.15).
type PdfAnnotationFileAttachment struct{*PdfAnnotation ;*PdfAnnotationMarkup ;FS _bf .PdfObject ;Name _bf .PdfObject ;};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// components. The slice should contain a single PdfObjectFloat element in
// range 0-1.
func (_bcdge *PdfColorspaceDeviceGray )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_bdcf ,_edgg :=_bf .GetNumbersAsFloat (objects );
if _edgg !=nil {return nil ,_edgg ;};return _bcdge .ColorFromFloats (_bdcf );};func (_agee *PdfWriter )copyObject (_edcfa _bf .PdfObject ,_agfda map[_bf .PdfObject ]_bf .PdfObject ,_gfaga map[_bf .PdfObject ]struct{},_bffad bool )_bf .PdfObject {_aeddg :=!_agee ._dgbga &&_gfaga !=nil ;
if _ffbaa ,_eddfd :=_agfda [_edcfa ];_eddfd {if _aeddg &&!_bffad {delete (_gfaga ,_edcfa );};return _ffbaa ;};if _edcfa ==nil {_gaegcg :=_bf .MakeNull ();return _gaegcg ;};_bgdg :=_edcfa ;switch _dgbbf :=_edcfa .(type ){case *_bf .PdfObjectArray :_ebcdb :=_bf .MakeArray ();
_bgdg =_ebcdb ;_agfda [_edcfa ]=_bgdg ;for _ ,_agddc :=range _dgbbf .Elements (){_ebcdb .Append (_agee .copyObject (_agddc ,_agfda ,_gfaga ,_bffad ));};case *_bf .PdfObjectStreams :_badaga :=&_bf .PdfObjectStreams {PdfObjectReference :_dgbbf .PdfObjectReference };
_bgdg =_badaga ;_agfda [_edcfa ]=_bgdg ;for _ ,_fabaef :=range _dgbbf .Elements (){_badaga .Append (_agee .copyObject (_fabaef ,_agfda ,_gfaga ,_bffad ));};case *_bf .PdfObjectStream :_fgcab :=&_bf .PdfObjectStream {Stream :_dgbbf .Stream ,PdfObjectReference :_dgbbf .PdfObjectReference };
_bgdg =_fgcab ;_agfda [_edcfa ]=_bgdg ;_fgcab .PdfObjectDictionary =_agee .copyObject (_dgbbf .PdfObjectDictionary ,_agfda ,_gfaga ,_bffad ).(*_bf .PdfObjectDictionary );case *_bf .PdfObjectDictionary :var _ccfbg bool ;if _aeddg &&!_bffad {if _abcef ,_ :=_bf .GetNameVal (_dgbbf .Get ("\u0054\u0079\u0070\u0065"));
_abcef =="\u0050\u0061\u0067\u0065"{_ ,_dfab :=_agee ._ecabe [_dgbbf ];_bffad =!_dfab ;_ccfbg =_bffad ;};};_gecdc :=_bf .MakeDict ();_bgdg =_gecdc ;_agfda [_edcfa ]=_bgdg ;for _ ,_daebff :=range _dgbbf .Keys (){_gecdc .Set (_daebff ,_agee .copyObject (_dgbbf .Get (_daebff ),_agfda ,_gfaga ,_bffad ));
};if _ccfbg {_bgdg =_bf .MakeNull ();_bffad =false ;};case *_bf .PdfIndirectObject :_gefab :=&_bf .PdfIndirectObject {PdfObjectReference :_dgbbf .PdfObjectReference };_bgdg =_gefab ;_agfda [_edcfa ]=_bgdg ;_gefab .PdfObject =_agee .copyObject (_dgbbf .PdfObject ,_agfda ,_gfaga ,_bffad );
case *_bf .PdfObjectString :_eefge :=*_dgbbf ;_bgdg =&_eefge ;_agfda [_edcfa ]=_bgdg ;case *_bf .PdfObjectName :_fagba :=*_dgbbf ;_bgdg =&_fagba ;_agfda [_edcfa ]=_bgdg ;case *_bf .PdfObjectNull :_bgdg =_bf .MakeNull ();_agfda [_edcfa ]=_bgdg ;case *_bf .PdfObjectInteger :_bbfea :=*_dgbbf ;
_bgdg =&_bbfea ;_agfda [_edcfa ]=_bgdg ;case *_bf .PdfObjectReference :_gfgf :=*_dgbbf ;_bgdg =&_gfgf ;_agfda [_edcfa ]=_bgdg ;case *_bf .PdfObjectFloat :_beece :=*_dgbbf ;_bgdg =&_beece ;_agfda [_edcfa ]=_bgdg ;case *_bf .PdfObjectBool :_eaaccg :=*_dgbbf ;
_bgdg =&_eaaccg ;_agfda [_edcfa ]=_bgdg ;case *pdfSignDictionary :_cggdc :=&pdfSignDictionary {PdfObjectDictionary :_bf .MakeDict (),_efdd :_dgbbf ._efdd ,_debae :_dgbbf ._debae };_bgdg =_cggdc ;_agfda [_edcfa ]=_bgdg ;for _ ,_begad :=range _dgbbf .Keys (){_cggdc .Set (_begad ,_agee .copyObject (_dgbbf .Get (_begad ),_agfda ,_gfaga ,_bffad ));
};default:_bc .Log .Info ("\u0054\u004f\u0044\u004f\u0028\u0061\u0035\u0069\u0029\u003a\u0020\u0069\u006dp\u006c\u0065\u006d\u0065\u006e\u0074 \u0063\u006f\u0070\u0079\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0066\u006fr\u0020\u0025\u002b\u0076",_edcfa );
};if _aeddg &&_bffad {_gfaga [_edcfa ]=struct{}{};};return _bgdg ;};const (TrappedUnknown PdfInfoTrapped ="\u0055n\u006b\u006e\u006f\u0077\u006e";TrappedTrue PdfInfoTrapped ="\u0054\u0072\u0075\u0065";TrappedFalse PdfInfoTrapped ="\u0046\u0061\u006cs\u0065";
);func _ecga (_degbg *_bf .PdfObjectDictionary )*VRI {_adea ,_ :=_bf .GetString (_degbg .Get ("\u0054\u0055"));_ffae ,_ :=_bf .GetString (_degbg .Get ("\u0054\u0053"));return &VRI {Cert :_decef (_degbg .Get ("\u0043\u0065\u0072\u0074")),OCSP :_decef (_degbg .Get ("\u004f\u0043\u0053\u0050")),CRL :_decef (_degbg .Get ("\u0043\u0052\u004c")),TU :_adea ,TS :_ffae };
};

// StdFontName represents name of a standard font.
type StdFontName =_eb .StdFontName ;

// ToPdfObject implements interface PdfModel.
func (_ab *PdfActionResetForm )ToPdfObject ()_bf .PdfObject {_ab .PdfAction .ToPdfObject ();_fcg :=_ab ._fda ;_cfb :=_fcg .PdfObject .(*_bf .PdfObjectDictionary );_cfb .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeResetForm )));_cfb .SetIfNotNil ("\u0046\u0069\u0065\u006c\u0064\u0073",_ab .Fields );
_cfb .SetIfNotNil ("\u0046\u006c\u0061g\u0073",_ab .Flags );return _fcg ;};type pdfFontSimple struct{fontCommon ;_cfcb *_bf .PdfIndirectObject ;_fabb map[_faf .CharCode ]float64 ;_adbcf _faf .TextEncoder ;_ddgcg _faf .TextEncoder ;_acgd *PdfFontDescriptor ;


// Encoding is subject to limitations that are described in 9.6.6, "Character Encoding".
// BaseFont is derived differently.
FirstChar _bf .PdfObject ;LastChar _bf .PdfObject ;Widths _bf .PdfObject ;Encoding _bf .PdfObject ;_bdcde *_eb .RuneCharSafeMap ;};

// PdfShadingType6 is a Coons patch mesh.
type PdfShadingType6 struct{*PdfShading ;BitsPerCoordinate *_bf .PdfObjectInteger ;BitsPerComponent *_bf .PdfObjectInteger ;BitsPerFlag *_bf .PdfObjectInteger ;Decode *_bf .PdfObjectArray ;Function []PdfFunction ;};

// ToPdfObject returns a PDF object representation of the outline.
func (_cfgea *Outline )ToPdfObject ()_bf .PdfObject {return _cfgea .ToPdfOutline ().ToPdfObject ()};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain a single element.
func (_ffffc *PdfColorspaceSpecialSeparation )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_ceada :=vals [0];_gaba :=[]float64 {_ceada };
_aegd ,_cabe :=_ffffc .TintTransform .Evaluate (_gaba );if _cabe !=nil {_bc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0065\u0076\u0061\u006c\u0075\u0061\u0074\u0065: \u0025\u0076",_cabe );
_bc .Log .Trace ("\u0054\u0069\u006e\u0074 t\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u003a\u0020\u0025\u002b\u0076",_ffffc .TintTransform );return nil ,_cabe ;};_bc .Log .Trace ("\u0050\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067\u0020\u0043\u006f\u006c\u006fr\u0046\u0072\u006f\u006d\u0046\u006c\u006f\u0061\u0074\u0073\u0028\u0025\u002bv\u0029\u0020\u006f\u006e\u0020\u0041\u006c\u0074\u0065\u0072\u006e\u0061te\u0053\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0023\u0076",_aegd ,_ffffc .AlternateSpace );
_daaf ,_cabe :=_ffffc .AlternateSpace .ColorFromFloats (_aegd );if _cabe !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u002c\u0020\u0066a\u0069\u006c\u0065d \u0074\u006f\u0020\u0065\u0076\u0061l\u0075\u0061\u0074\u0065\u0020\u0069\u006e\u0020\u0061\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u003a \u0025\u0076",_cabe );
return nil ,_cabe ;};return _daaf ,nil ;};

// Set sets the colorspace corresponding to key. Add to Names if not set.
func (_eeeab *PdfPageResourcesColorspaces )Set (key _bf .PdfObjectName ,val PdfColorspace ){if _ ,_eaedg :=_eeeab .Colorspaces [string (key )];!_eaedg {_eeeab .Names =append (_eeeab .Names ,string (key ));};_eeeab .Colorspaces [string (key )]=val ;};

// NewPdfColorspaceDeviceCMYK returns a new CMYK32 colorspace object.
func NewPdfColorspaceDeviceCMYK ()*PdfColorspaceDeviceCMYK {return &PdfColorspaceDeviceCMYK {}};

// L returns the value of the L component of the color.
func (_fddcb *PdfColorLab )L ()float64 {return _fddcb [0]};

// SetXObjectImageByName adds the provided XObjectImage to the page resources.
// The added XObjectImage is identified by the specified name.
func (_dfccc *PdfPageResources )SetXObjectImageByName (keyName _bf .PdfObjectName ,ximg *XObjectImage )error {_eefcc :=ximg .ToPdfObject ().(*_bf .PdfObjectStream );_debge :=_dfccc .SetXObjectByName (keyName ,_eefcc );return _debge ;};func (_bffa *PdfReader )loadDSS ()(*DSS ,error ){if _bffa ._gafdb .GetCrypter ()!=nil &&!_bffa ._gafdb .IsAuthenticated (){return nil ,_af .Errorf ("\u0066\u0069\u006ce\u0020\u006e\u0065\u0065d\u0020\u0074\u006f\u0020\u0062\u0065\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");
};_bgab :=_bffa ._dbaea .Get ("\u0044\u0053\u0053");if _bgab ==nil {return nil ,nil ;};_geedac ,_ :=_bf .GetIndirect (_bgab );_bgab =_bf .TraceToDirectObject (_bgab );switch _ddbeb :=_bgab .(type ){case *_bf .PdfObjectNull :return nil ,nil ;case *_bf .PdfObjectDictionary :return _gcfe (_geedac ,_ddbeb );
};return nil ,_af .Errorf ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0044\u0053\u0053 \u0065\u006e\u0074\u0072y \u0025\u0054",_bgab );};

// Duplicate creates a duplicate page based on the current one and returns it.
func (_cgfbe *PdfPage )Duplicate ()*PdfPage {_fefc :=*_cgfbe ;_fefc ._dfcbc =_bf .MakeDict ();_fefc ._cddaa =_bf .MakeIndirectObject (_fefc ._dfcbc );return &_fefc ;};

// ToGoImage converts the unidoc Image to a golang Image structure.
func (_dffg *Image )ToGoImage ()(_b .Image ,error ){_bc .Log .Trace ("\u0043\u006f\u006e\u0076er\u0074\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u006f\u0020\u0069\u006d\u0061g\u0065");_beaf ,_efgd :=_ff .NewImage (int (_dffg .Width ),int (_dffg .Height ),int (_dffg .BitsPerComponent ),_dffg .ColorComponents ,_dffg .Data ,_dffg ._gfegf ,_dffg ._dbcfb );
if _efgd !=nil {return nil ,_efgd ;};return _beaf ,nil ;};

// NewPdfAction returns an initialized generic PDF action model.
func NewPdfAction ()*PdfAction {_fbe :=&PdfAction {};_fbe ._fda =_bf .MakeIndirectObject (_bf .MakeDict ());return _fbe ;};func (_ddagfg *PdfWriter )setCatalogVersion (){_ddagfg ._cecba .Set ("\u0056e\u0072\u0073\u0069\u006f\u006e",_bf .MakeName (_af .Sprintf ("\u0025\u0064\u002e%\u0064",_ddagfg ._abccg .Major ,_ddagfg ._abccg .Minor )));
};

// PdfVersion returns version of the PDF file.
func (_ffda *PdfReader )PdfVersion ()_bf .Version {return _ffda ._gafdb .PdfVersion ()};

// DetermineColorspaceNameFromPdfObject determines PDF colorspace from a PdfObject.  Returns the colorspace name and
// an error on failure. If the colorspace was not found, will return an empty string.
func DetermineColorspaceNameFromPdfObject (obj _bf .PdfObject )(_bf .PdfObjectName ,error ){var _fdda *_bf .PdfObjectName ;var _fbbc *_bf .PdfObjectArray ;if _bbgc ,_gggb :=obj .(*_bf .PdfIndirectObject );_gggb {if _egbgg ,_egaba :=_bbgc .PdfObject .(*_bf .PdfObjectArray );
_egaba {_fbbc =_egbgg ;}else if _cgac ,_cfbe :=_bbgc .PdfObject .(*_bf .PdfObjectName );_cfbe {_fdda =_cgac ;};}else if _ddaf ,_ecdc :=obj .(*_bf .PdfObjectArray );_ecdc {_fbbc =_ddaf ;}else if _cbag ,_ffcf :=obj .(*_bf .PdfObjectName );_ffcf {_fdda =_cbag ;
};if _fdda !=nil {switch *_fdda {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return *_fdda ,nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return *_fdda ,nil ;
};};if _fbbc !=nil &&_fbbc .Len ()> 0{if _aefb ,_edca :=_fbbc .Get (0).(*_bf .PdfObjectName );_edca {switch *_aefb {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":if _fbbc .Len ()==1{return *_aefb ,nil ;
};case "\u0043a\u006c\u0047\u0072\u0061\u0079","\u0043\u0061\u006c\u0052\u0047\u0042","\u004c\u0061\u0062":return *_aefb ,nil ;case "\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064","\u0050a\u0074\u0074\u0065\u0072\u006e","\u0049n\u0064\u0065\u0078\u0065\u0064":return *_aefb ,nil ;
case "\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006f\u006e","\u0044e\u0076\u0069\u0063\u0065\u004e":return *_aefb ,nil ;};};};return "",nil ;};func _bfafe ()string {return _bc .Version };

// NewCompliancePdfReader creates a PdfReader or an input io.ReadSeeker that during reading will scan the files for the
// metadata details. It could be used for the PDF standard implementations like PDF/A or PDF/X.
// NOTE: This implementation is in experimental development state.
// 	Keep in mind that it might change in the subsequent minor versions.
func NewCompliancePdfReader (rs _ag .ReadSeeker )(*CompliancePdfReader ,error ){const _gcdcb ="\u006d\u006f\u0064\u0065l\u003a\u004e\u0065\u0077\u0043\u006f\u006d\u0070\u006c\u0069a\u006ec\u0065\u0050\u0064\u0066\u0052\u0065\u0061d\u0065\u0072";_aagc ,_aaff :=_bfaag (rs ,&ReaderOpts {ComplianceMode :true },false ,_gcdcb );
if _aaff !=nil {return nil ,_aaff ;};return &CompliancePdfReader {PdfReader :_aagc },nil ;};

// NewPdfAnnotationWidget returns an initialized annotation widget.
func NewPdfAnnotationWidget ()*PdfAnnotationWidget {_eaag :=NewPdfAnnotation ();_dde :=&PdfAnnotationWidget {};_dde .PdfAnnotation =_eaag ;_eaag .SetContext (_dde );return _dde ;};

// NewStandard14FontMustCompile returns the standard 14 font named `basefont` as a *PdfFont.
// If `basefont` is one of the 14 Standard14Font values defined above then NewStandard14FontMustCompile
// is guaranteed to succeed.
func NewStandard14FontMustCompile (basefont StdFontName )*PdfFont {_dggeg ,_dage :=NewStandard14Font (basefont );if _dage !=nil {panic (_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0053\u0074\u0061n\u0064\u0061\u0072\u0064\u0031\u0034\u0046\u006f\u006e\u0074 \u0025\u0023\u0071",basefont ));
};return _dggeg ;};func (_cebec *PdfPage )setContainer (_adbb *_bf .PdfIndirectObject ){_adbb .PdfObject =_cebec ._dfcbc ;_cebec ._cddaa =_adbb ;};

// BaseFont returns the font's "BaseFont" field.
func (_beea *PdfFont )BaseFont ()string {return _beea .baseFields ()._adccf };

// GetCharMetrics returns the char metrics for character code `code`.
func (_fdfe pdfCIDFontType2 )GetCharMetrics (code _faf .CharCode )(_eb .CharMetrics ,bool ){if _baccd ,_dbga :=_fdfe ._deadg [code ];_dbga {return _eb .CharMetrics {Wx :_baccd },true ;};_gecgc :=rune (code );_ggee ,_fddf :=_fdfe ._ceae [_gecgc ];if !_fddf {_ggee =int (_fdfe ._cecce );
};return _eb .CharMetrics {Wx :float64 (_ggee )},true ;};

// PdfFunction interface represents the common methods of a function in PDF.
type PdfFunction interface{Evaluate ([]float64 )([]float64 ,error );ToPdfObject ()_bf .PdfObject ;};

// ToPdfObject returns colorspace in a PDF object format [name dictionary]
func (_cfdf *PdfColorspaceLab )ToPdfObject ()_bf .PdfObject {_eebe :=_bf .MakeArray ();_eebe .Append (_bf .MakeName ("\u004c\u0061\u0062"));_cdegd :=_bf .MakeDict ();if _cfdf .WhitePoint !=nil {_cfdb :=_bf .MakeArray (_bf .MakeFloat (_cfdf .WhitePoint [0]),_bf .MakeFloat (_cfdf .WhitePoint [1]),_bf .MakeFloat (_cfdf .WhitePoint [2]));
_cdegd .Set ("\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074",_cfdb );}else {_bc .Log .Error ("\u004c\u0061\u0062: \u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0057h\u0069t\u0065P\u006fi\u006e\u0074\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029");
};if _cfdf .BlackPoint !=nil {_ecg :=_bf .MakeArray (_bf .MakeFloat (_cfdf .BlackPoint [0]),_bf .MakeFloat (_cfdf .BlackPoint [1]),_bf .MakeFloat (_cfdf .BlackPoint [2]));_cdegd .Set ("\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074",_ecg );
};if _cfdf .Range !=nil {_gcdc :=_bf .MakeArray (_bf .MakeFloat (_cfdf .Range [0]),_bf .MakeFloat (_cfdf .Range [1]),_bf .MakeFloat (_cfdf .Range [2]),_bf .MakeFloat (_cfdf .Range [3]));_cdegd .Set ("\u0052\u0061\u006eg\u0065",_gcdc );};_eebe .Append (_cdegd );
if _cfdf ._bggg !=nil {_cfdf ._bggg .PdfObject =_eebe ;return _cfdf ._bggg ;};return _eebe ;};

// ToPdfObject converts the PdfPage to a dictionary within an indirect object container.
func (_eacb *PdfPage )ToPdfObject ()_bf .PdfObject {_adgca :=_eacb ._cddaa ;_eacb .GetPageDict ();return _adgca ;};

// FlattenFieldsWithOpts flattens the AcroForm fields of the reader using the
// provided field appearance generator and the specified options. If no options
// are specified, all form fields are flattened.
// If a filter function is provided using the opts parameter, only the filtered
// fields are flattened. Otherwise, all form fields are flattened.
// At the end of the process, the AcroForm contains all the fields which were
// not flattened. If all fields are flattened, the reader's AcroForm field
// is set to nil.
func (_gaadf *PdfReader )FlattenFieldsWithOpts (appgen FieldAppearanceGenerator ,opts *FieldFlattenOpts )error {return _gaadf .flattenFieldsWithOpts (false ,appgen ,opts );};var _ pdfFont =(*pdfFontSimple )(nil );

// NewPdfAnnotationStamp returns a new stamp annotation.
func NewPdfAnnotationStamp ()*PdfAnnotationStamp {_bgf :=NewPdfAnnotation ();_egb :=&PdfAnnotationStamp {};_egb .PdfAnnotation =_bgf ;_egb .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_bgf .SetContext (_egb );return _egb ;};

// ToPdfObject returns the PDF representation of the function.
func (_adfgd *PdfFunctionType4 )ToPdfObject ()_bf .PdfObject {_dcgdg :=_adfgd ._fcdd ;if _dcgdg ==nil {_adfgd ._fcdd =&_bf .PdfObjectStream {};_dcgdg =_adfgd ._fcdd ;};_ddaee :=_bf .MakeDict ();_ddaee .Set ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065",_bf .MakeInteger (4));
_aedeeb :=&_bf .PdfObjectArray {};for _ ,_aacgg :=range _adfgd .Domain {_aedeeb .Append (_bf .MakeFloat (_aacgg ));};_ddaee .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_aedeeb );_gcfee :=&_bf .PdfObjectArray {};for _ ,_ccde :=range _adfgd .Range {_gcfee .Append (_bf .MakeFloat (_ccde ));
};_ddaee .Set ("\u0052\u0061\u006eg\u0065",_gcfee );if _adfgd ._acfcc ==nil &&_adfgd .Program !=nil {_adfgd ._acfcc =[]byte (_adfgd .Program .String ());};_ddaee .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_adfgd ._acfcc ))));
_dcgdg .Stream =_adfgd ._acfcc ;_dcgdg .PdfObjectDictionary =_ddaee ;return _dcgdg ;};

// GetNumComponents returns the number of color components (1 for Separation).
func (_gdgd *PdfColorspaceSpecialSeparation )GetNumComponents ()int {return 1};

// PdfColorspaceCalGray represents CalGray color space.
type PdfColorspaceCalGray struct{WhitePoint []float64 ;BlackPoint []float64 ;Gamma float64 ;_fgba *_bf .PdfIndirectObject ;};

// Has checks if flag fl is set in flag and returns true if so, false otherwise.
func (_fadb FieldFlag )Has (fl FieldFlag )bool {return (_fadb .Mask ()&fl .Mask ())> 0};

// ToPdfObject returns a PDF object representation of the outline destination.
func (_efce OutlineDest )ToPdfObject ()_bf .PdfObject {if (_efce .PageObj ==nil &&_efce .Page < 0)||_efce .Mode ==""{return _bf .MakeNull ();};_cbdfb :=_bf .MakeArray ();if _efce .PageObj !=nil {_cbdfb .Append (_efce .PageObj );}else {_cbdfb .Append (_bf .MakeInteger (_efce .Page ));
};_cbdfb .Append (_bf .MakeName (_efce .Mode ));switch _efce .Mode {case "\u0046\u0069\u0074","\u0046\u0069\u0074\u0042":case "\u0046\u0069\u0074\u0048","\u0046\u0069\u0074B\u0048":_cbdfb .Append (_bf .MakeFloat (_efce .Y ));case "\u0046\u0069\u0074\u0056","\u0046\u0069\u0074B\u0056":_cbdfb .Append (_bf .MakeFloat (_efce .X ));
case "\u0058\u0059\u005a":_cbdfb .Append (_bf .MakeFloat (_efce .X ));_cbdfb .Append (_bf .MakeFloat (_efce .Y ));_cbdfb .Append (_bf .MakeFloat (_efce .Zoom ));default:_cbdfb .Set (1,_bf .MakeName ("\u0046\u0069\u0074"));};return _cbdfb ;};

// GetRevision returns the specific version of the PdfReader for the current Pdf document
func (_gffgd *PdfReader )GetRevision (revisionNumber int )(*PdfReader ,error ){_bdggg :=_gffgd ._gafdb .GetRevisionNumber ();if revisionNumber < 0||revisionNumber > _bdggg {return nil ,_eff .New ("w\u0072\u006f\u006e\u0067 r\u0065v\u0069\u0073\u0069\u006f\u006e \u006e\u0075\u006d\u0062\u0065\u0072");
};if revisionNumber ==_bdggg {return _gffgd ,nil ;};if _gffgd ._dede [revisionNumber ]!=nil {return _gffgd ._dede [revisionNumber ],nil ;};_agfbb :=_gffgd ;for _cagc :=_bdggg -1;_cagc >=revisionNumber ;_cagc --{_dcee ,_aedgd :=_agfbb .GetPreviousRevision ();
if _aedgd !=nil {return nil ,_aedgd ;};_gffgd ._dede [_cagc ]=_dcee ;_agfbb =_dcee ;};return _agfbb ,nil ;};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_bgadb *PdfShadingType7 )ToPdfObject ()_bf .PdfObject {_bgadb .PdfShading .ToPdfObject ();_dgdga ,_baegd :=_bgadb .getShadingDict ();if _baegd !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _bgadb .BitsPerCoordinate !=nil {_dgdga .Set ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065",_bgadb .BitsPerCoordinate );};if _bgadb .BitsPerComponent !=nil {_dgdga .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_bgadb .BitsPerComponent );
};if _bgadb .BitsPerFlag !=nil {_dgdga .Set ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0046\u006c\u0061\u0067",_bgadb .BitsPerFlag );};if _bgadb .Decode !=nil {_dgdga .Set ("\u0044\u0065\u0063\u006f\u0064\u0065",_bgadb .Decode );};if _bgadb .Function !=nil {if len (_bgadb .Function )==1{_dgdga .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_bgadb .Function [0].ToPdfObject ());
}else {_gbbdf :=_bf .MakeArray ();for _ ,_bdcb :=range _bgadb .Function {_gbbdf .Append (_bdcb .ToPdfObject ());};_dgdga .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_gbbdf );};};return _bgadb ._daaad ;};func (_dddb *pdfFontType0 )subsetRegistered ()error {_efbc ,_gegb :=_dddb .DescendantFont ._cacce .(*pdfCIDFontType2 );
if !_gegb {_bc .Log .Debug ("\u0046\u006fnt\u0020\u006e\u006ft\u0020\u0073\u0075\u0070por\u0074ed\u0020\u0066\u006f\u0072\u0020\u0073\u0075bs\u0065\u0074\u0074\u0069\u006e\u0067\u0020%\u0054",_dddb .DescendantFont );return nil ;};if _efbc ==nil {return nil ;
};if _efbc ._cedfe ==nil {_bc .Log .Debug ("\u004d\u0069\u0073si\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u006f\u0072");return nil ;};if _dddb ._aecc ==nil {_bc .Log .Debug ("\u004e\u006f\u0020e\u006e\u0063\u006f\u0064e\u0072\u0020\u002d\u0020\u0073\u0075\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0067\u006e\u006f\u0072\u0065\u0064");
return nil ;};_eabaa ,_gegb :=_bf .GetStream (_efbc ._cedfe .FontFile2 );if !_gegb {_bc .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _eff .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_decaac ,_cbbd :=_bf .DecodeStream (_eabaa );if _cbbd !=nil {_bc .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_cbbd );
return _cbbd ;};_bece ,_cbbd :=_efc .Parse (_cdc .NewReader (_decaac ));if _cbbd !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_eabaa .Stream ));
return _cbbd ;};var _eaadb []rune ;var _bdac *_efc .Font ;switch _dgcbd :=_dddb ._aecc .(type ){case *_faf .TrueTypeFontEncoder :_eaadb =_dgcbd .RegisteredRunes ();_bdac ,_cbbd =_bece .SubsetKeepRunes (_eaadb );if _cbbd !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbbd );
return _cbbd ;};_dgcbd .SubsetRegistered ();case *_faf .IdentityEncoder :_eaadb =_dgcbd .RegisteredRunes ();_bbgad :=make ([]_efc .GlyphIndex ,len (_eaadb ));for _cfge ,_cfdbc :=range _eaadb {_bbgad [_cfge ]=_efc .GlyphIndex (_cfdbc );};_bdac ,_cbbd =_bece .SubsetKeepIndices (_bbgad );
if _cbbd !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbbd );return _cbbd ;};case _faf .SimpleEncoder :_aaae :=_dgcbd .Charcodes ();for _ ,_bdee :=range _aaae {_fafeg ,_becg :=_dgcbd .CharcodeToRune (_bdee );if !_becg {_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0020\u0063\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0020\u0074\u006f \u0072\u0075\u006e\u0065\u003a\u0020\u0025\u0064",_bdee );
continue ;};_eaadb =append (_eaadb ,_fafeg );};default:return _af .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066\u006f\u0072\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069\u006eg\u003a\u0020\u0025\u0054",_dddb ._aecc );
};var _ebbaa _cdc .Buffer ;_cbbd =_bdac .Write (&_ebbaa );if _cbbd !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbbd );return _cbbd ;};if _dddb ._ggcb !=nil {_ccbd :=make (map[_cf .CharCode ]rune ,len (_eaadb ));for _ ,_baag :=range _eaadb {_eedd ,_adec :=_dddb ._aecc .RuneToCharcode (_baag );
if !_adec {continue ;};_ccbd [_cf .CharCode (_eedd )]=_baag ;};_dddb ._ggcb =_cf .NewToUnicodeCMap (_ccbd );};_eabaa ,_cbbd =_bf .MakeStream (_ebbaa .Bytes (),_bf .NewFlateEncoder ());if _cbbd !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbbd );
return _cbbd ;};_eabaa .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bf .MakeInteger (int64 (_ebbaa .Len ())));if _bfaa ,_cfde :=_bf .GetStream (_efbc ._cedfe .FontFile2 );_cfde {*_bfaa =*_eabaa ;}else {_efbc ._cedfe .FontFile2 =_eabaa ;};_gfec :=_aafc ();
if len (_dddb ._adccf )> 0{_dddb ._adccf =_beade (_dddb ._adccf ,_gfec );};if len (_efbc ._adccf )> 0{_efbc ._adccf =_beade (_efbc ._adccf ,_gfec );};if len (_dddb ._bcggb )> 0{_dddb ._bcggb =_beade (_dddb ._bcggb ,_gfec );};if _efbc ._cedfe !=nil {_agagc ,_fagbc :=_bf .GetName (_efbc ._cedfe .FontName );
if _fagbc &&len (_agagc .String ())> 0{_ageb :=_beade (_agagc .String (),_gfec );_efbc ._cedfe .FontName =_bf .MakeName (_ageb );};};return nil ;};

// ToImage converts an object to an Image which can be transformed or saved out.
// The image data is decoded and the Image returned.
func (_dcbac *XObjectImage )ToImage ()(*Image ,error ){_cdgfc :=&Image {};if _dcbac .Height ==nil {return nil ,_eff .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_cdgfc .Height =*_dcbac .Height ;if _dcbac .Width ==nil {return nil ,_eff .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_cdgfc .Width =*_dcbac .Width ;if _dcbac .BitsPerComponent ==nil {switch _dcbac .Filter .(type ){case *_bf .CCITTFaxEncoder ,*_bf .JBIG2Encoder :_cdgfc .BitsPerComponent =1;
case *_bf .LZWEncoder ,*_bf .RunLengthEncoder :_cdgfc .BitsPerComponent =8;default:return nil ,_eff .New ("\u0062\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006fm\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073s\u0069\u006e\u0067");
};}else {_cdgfc .BitsPerComponent =*_dcbac .BitsPerComponent ;};_cdgfc .ColorComponents =_dcbac .ColorSpace .GetNumComponents ();_dcbac ._bccdb .Set ("\u0043o\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073",_bf .MakeInteger (int64 (_cdgfc .ColorComponents )));
_eggda ,_ebfe :=_bf .DecodeStream (_dcbac ._bccdb );if _ebfe !=nil {return nil ,_ebfe ;};_cdgfc .Data =_eggda ;if _dcbac .Decode !=nil {_dfbgf ,_eadbgb :=_dcbac .Decode .(*_bf .PdfObjectArray );if !_eadbgb {_bc .Log .Debug ("I\u006e\u0076\u0061\u006cid\u0020D\u0065\u0063\u006f\u0064\u0065 \u006f\u0062\u006a\u0065\u0063\u0074");
return nil ,_eff .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065");};_aabba ,_bggdg :=_dfbgf .ToFloat64Array ();if _bggdg !=nil {return nil ,_bggdg ;};_cdgfc ._dbcfb =_aabba ;};return _cdgfc ,nil ;};

// Register registers (caches) a model to primitive object relationship.
func (_fcdbe *modelManager )Register (primitive _bf .PdfObject ,model PdfModel ){_fcdbe ._bdcfa [model ]=primitive ;_fcdbe ._deade [primitive ]=model ;};

// GetContentStream returns the pattern cell's content stream
func (_cacg *PdfTilingPattern )GetContentStream ()([]byte ,error ){_agcdg ,_ ,_fbfeb :=_cacg .GetContentStreamWithEncoder ();return _agcdg ,_fbfeb ;};

// BytesToCharcodes converts the bytes in a PDF string to character codes.
func (_gebe *PdfFont )BytesToCharcodes (data []byte )[]_faf .CharCode {_bc .Log .Trace ("\u0042\u0079\u0074es\u0054\u006f\u0043\u0068\u0061\u0072\u0063\u006f\u0064e\u0073:\u0020d\u0061t\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",data ,data );
if _bcgge ,_addd :=_gebe ._cacce .(*pdfFontType0 );_addd &&_bcgge ._caceg !=nil {if _egad ,_bcad :=_bcgge .bytesToCharcodes (data );_bcad {return _egad ;};};var (_bcgbb =make ([]_faf .CharCode ,0,len (data )+len (data )%2);_fegfbe =_gebe .baseFields ();
);if _fegfbe ._ggcb !=nil {if _dedbf ,_cccfb :=_fegfbe ._ggcb .BytesToCharcodes (data );_cccfb {for _ ,_feda :=range _dedbf {_bcgbb =append (_bcgbb ,_faf .CharCode (_feda ));};return _bcgbb ;};};if _fegfbe .isCIDFont (){if len (data )==1{data =[]byte {0,data [0]};
};if len (data )%2!=0{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0064\u0061\u0074\u0061\u003d\u0025\u002b\u0076\u0020t\u006f\u0020\u0065\u0076\u0065n\u0020\u006ce\u006e\u0067\u0074\u0068",data );
data =append (data ,0);};for _defe :=0;_defe < len (data );_defe +=2{_adgg :=uint16 (data [_defe ])<<8|uint16 (data [_defe +1]);_bcgbb =append (_bcgbb ,_faf .CharCode (_adgg ));};}else {for _ ,_eeba :=range data {_bcgbb =append (_bcgbb ,_faf .CharCode (_eeba ));
};};return _bcgbb ;};

// PdfAnnotation represents an annotation in PDF (section 12.5 p. 389).
type PdfAnnotation struct{_fgc PdfModel ;Rect _bf .PdfObject ;Contents _bf .PdfObject ;P _bf .PdfObject ;NM _bf .PdfObject ;M _bf .PdfObject ;F _bf .PdfObject ;AP _bf .PdfObject ;AS _bf .PdfObject ;Border _bf .PdfObject ;C _bf .PdfObject ;StructParent _bf .PdfObject ;
OC _bf .PdfObject ;_cdaf *_bf .PdfIndirectObject ;};func _aafc ()string {_ffgce :="\u0051\u0057\u0045\u0052\u0054\u0059\u0055\u0049\u004f\u0050\u0041S\u0044\u0046\u0047\u0048\u004a\u004b\u004c\u005a\u0058\u0043V\u0042\u004e\u004d";var _gcde _cdc .Buffer ;
for _afbf :=0;_afbf < 6;_afbf ++{_gcde .WriteRune (rune (_ffgce [_ad .Intn (len (_ffgce ))]));};return _gcde .String ();};

// Resample resamples the image data converting from current BitsPerComponent to a target BitsPerComponent
// value.  Sets the image's BitsPerComponent to the target value following resampling.
//
// For example, converting an 8-bit RGB image to 1-bit grayscale (common for scanned images):
//   // Convert RGB image to grayscale.
//   rgbColorSpace := pdf.NewPdfColorspaceDeviceRGB()
//   grayImage, err := rgbColorSpace.ImageToGray(rgbImage)
//   if err != nil {
//     return err
//   }
//   // Resample as 1 bit.
//   grayImage.Resample(1)
func (_gfcde *Image )Resample (targetBitsPerComponent int64 ){if _gfcde .BitsPerComponent ==targetBitsPerComponent {return ;};_aadec :=_gfcde .GetSamples ();if targetBitsPerComponent < _gfcde .BitsPerComponent {_gbbdc :=_gfcde .BitsPerComponent -targetBitsPerComponent ;
for _dgec :=range _aadec {_aadec [_dgec ]>>=uint (_gbbdc );};}else if targetBitsPerComponent > _gfcde .BitsPerComponent {_eeea :=targetBitsPerComponent -_gfcde .BitsPerComponent ;for _caeaf :=range _aadec {_aadec [_caeaf ]<<=uint (_eeea );};};_gfcde .BitsPerComponent =targetBitsPerComponent ;
if _gfcde .BitsPerComponent < 8{_gfcde .resampleLowBits (_aadec );return ;};_gbac :=_ff .BytesPerLine (int (_gfcde .Width ),int (_gfcde .BitsPerComponent ),_gfcde .ColorComponents );_fcgee :=make ([]byte ,_gbac *int (_gfcde .Height ));var (_dgfca ,_bbdba ,_fcaag ,_dbfd int ;
_cdfcb uint32 ;);for _fcaag =0;_fcaag < int (_gfcde .Height );_fcaag ++{_dgfca =_fcaag *_gbac ;_bbdba =(_fcaag +1)*_gbac -1;_gbcefe :=_de .ResampleUint32 (_aadec [_dgfca :_bbdba ],int (targetBitsPerComponent ),8);for _dbfd ,_cdfcb =range _gbcefe {_fcgee [_dbfd +_dgfca ]=byte (_cdfcb );
};};_gfcde .Data =_fcgee ;};

// PdfTransformParamsDocMDP represents a transform parameters dictionary for the DocMDP method and is used to detect
// modifications relative to a signature field that is signed by the author of a document.
// (Section 12.8.2.2, Table 254 - Entries in the DocMDP transform parameters dictionary p. 471 in PDF32000_2008).
type PdfTransformParamsDocMDP struct{Type *_bf .PdfObjectName ;P *_bf .PdfObjectInteger ;V *_bf .PdfObjectName ;};

// FieldValueProvider provides field values from a data source such as FDF, JSON or any other.
type FieldValueProvider interface{FieldValues ()(map[string ]_bf .PdfObject ,error );};

// ToPdfObject implements interface PdfModel.
func (_ecbb *PdfAnnotationSquare )ToPdfObject ()_bf .PdfObject {_ecbb .PdfAnnotation .ToPdfObject ();_fadf :=_ecbb ._cdaf ;_bddg :=_fadf .PdfObject .(*_bf .PdfObjectDictionary );if _ecbb .PdfAnnotationMarkup !=nil {_ecbb .PdfAnnotationMarkup .appendToPdfDictionary (_bddg );
};_bddg .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0053\u0071\u0075\u0061\u0072\u0065"));_bddg .SetIfNotNil ("\u0042\u0053",_ecbb .BS );_bddg .SetIfNotNil ("\u0049\u0043",_ecbb .IC );_bddg .SetIfNotNil ("\u0042\u0045",_ecbb .BE );
_bddg .SetIfNotNil ("\u0052\u0044",_ecbb .RD );return _fadf ;};

// PdfOutputIntent provides a means for matching the color characteristics of a PDF document with
// those of a target output device.
// Multiple PdfOutputIntents allows the production process to be customized to the expected workflow and the specific
// tools available.
type PdfOutputIntent struct{

// Type is an optional PDF object that this dictionary describes.
// If present, must be OutputIntent for an output intent dictionary.
Type string ;

// S defines the OutputIntent subtype which should match the standard used in given document i.e:
// for PDF/X use PdfOutputIntentTypeX.
S PdfOutputIntentType ;

// OutputCondition is an optional field that is identifying the intended output device or production condition in
// human-readable form. This is preferred method of defining such a string for presentation to the user.
OutputCondition string ;

// OutputConditionIdentifier is a required field identifying the intended output device or production condition in
// human or machine-readable form. If human-readable, this string may be used
// in lieu of an OutputCondition for presentation to the user.
// A typical value for this entry would be the name of a production condition  maintained
// in  an  industry-standard registry such  as the ICC Characterization Data Registry
// If the intended production condition is not a recognized standard, the value Custom is recommended for this entry.
// the DestOutputProfile entry defines the ICC profile, and the Info entry is used for further
// human-readable identification.
OutputConditionIdentifier string ;

// RegistryName is an optional string field (conventionally URI) identifying the registry in which the condition
// designated by OutputConditionIdentifier is defined.
RegistryName string ;

// Info is a required field if OutputConditionIdentifier does not specify a standard production condition.
// A human-readable text string containing additional information  or comments about intended
// target device or production condition.
Info string ;

// DestOutputProfile is required if OutputConditionIdentifier does not specify a standard production condition.
// It is an ICC profile stream defining the transformation from the PDF document's source colors to output device colorants.
DestOutputProfile []byte ;

// ColorComponents is the number of color components supported by given output profile.
ColorComponents int ;_dacca *_bf .PdfObjectDictionary ;};

// PdfFunctionType4 is a Postscript calculator functions.
type PdfFunctionType4 struct{Domain []float64 ;Range []float64 ;Program *_ga .PSProgram ;_beadef *_ga .PSExecutor ;_acfcc []byte ;_fcdd *_bf .PdfObjectStream ;};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain three elements representing the
// A, B and C components of the color. The values of the elements should be
// between 0 and 1.
func (_ebbf *PdfColorspaceCalRGB )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=3{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_fcfcf :=vals [0];if _fcfcf < 0.0||_fcfcf > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_fcfcf );
return nil ,ErrColorOutOfRange ;};_eebg :=vals [1];if _eebg < 0.0||_eebg > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_eebg );return nil ,ErrColorOutOfRange ;
};_gegg :=vals [2];if _gegg < 0.0||_gegg > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_gegg );return nil ,ErrColorOutOfRange ;};_afag :=NewPdfColorCalRGB (_fcfcf ,_eebg ,_gegg );
return _afag ,nil ;};

// NewGrayImageFromGoImage creates a new grayscale unidoc Image from a golang Image.
func (_fcec DefaultImageHandler )NewGrayImageFromGoImage (goimg _b .Image )(*Image ,error ){_aaagb :=goimg .Bounds ();_egcc :=&Image {Width :int64 (_aaagb .Dx ()),Height :int64 (_aaagb .Dy ()),ColorComponents :1,BitsPerComponent :8};switch _bcfe :=goimg .(type ){case *_b .Gray :if len (_bcfe .Pix )!=_aaagb .Dx ()*_aaagb .Dy (){_gagcg ,_deegd :=_ff .GrayConverter .Convert (goimg );
if _deegd !=nil {return nil ,_deegd ;};_egcc .Data =_gagcg .Pix ();}else {_egcc .Data =_bcfe .Pix ;};case *_b .Gray16 :_egcc .BitsPerComponent =16;if len (_bcfe .Pix )!=_aaagb .Dx ()*_aaagb .Dy ()*2{_cebea ,_abdg :=_ff .Gray16Converter .Convert (goimg );
if _abdg !=nil {return nil ,_abdg ;};_egcc .Data =_cebea .Pix ();}else {_egcc .Data =_bcfe .Pix ;};case _ff .Image :_efgg :=_bcfe .Base ();if _efgg .ColorComponents ==1{_egcc .BitsPerComponent =int64 (_efgg .BitsPerComponent );_egcc .Data =_efgg .Data ;
return _egcc ,nil ;};_cgcd ,_ebgdg :=_ff .GrayConverter .Convert (goimg );if _ebgdg !=nil {return nil ,_ebgdg ;};_egcc .Data =_cgcd .Pix ();default:_bdeaa ,_babfd :=_ff .GrayConverter .Convert (goimg );if _babfd !=nil {return nil ,_babfd ;};_egcc .Data =_bdeaa .Pix ();
};return _egcc ,nil ;};

// BorderStyle defines border type, typically used for annotations.
type BorderStyle int ;

// SetOCProperties sets the optional content properties.
func (_bffed *PdfWriter )SetOCProperties (ocProperties _bf .PdfObject )error {_aebb :=_bffed ._cecba ;if ocProperties !=nil {_bc .Log .Trace ("\u0053e\u0074\u0074\u0069\u006e\u0067\u0020\u004f\u0043\u0020\u0050\u0072o\u0070\u0065\u0072\u0074\u0069\u0065\u0073\u002e\u002e\u002e");
_aebb .Set ("\u004f\u0043\u0050r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073",ocProperties );return _bffed .addObjects (ocProperties );};return nil ;};

// NewPdfAnnotation returns an initialized generic PDF annotation model.
func NewPdfAnnotation ()*PdfAnnotation {_afgd :=&PdfAnnotation {};_afgd ._cdaf =_bf .MakeIndirectObject (_bf .MakeDict ());return _afgd ;};var (CourierName =_eb .CourierName ;CourierBoldName =_eb .CourierBoldName ;CourierObliqueName =_eb .CourierObliqueName ;
CourierBoldObliqueName =_eb .CourierBoldObliqueName ;HelveticaName =_eb .HelveticaName ;HelveticaBoldName =_eb .HelveticaBoldName ;HelveticaObliqueName =_eb .HelveticaObliqueName ;HelveticaBoldObliqueName =_eb .HelveticaBoldObliqueName ;SymbolName =_eb .SymbolName ;
ZapfDingbatsName =_eb .ZapfDingbatsName ;TimesRomanName =_eb .TimesRomanName ;TimesBoldName =_eb .TimesBoldName ;TimesItalicName =_eb .TimesItalicName ;TimesBoldItalicName =_eb .TimesBoldItalicName ;);

// SetName sets the `Name` field of the signature.
func (_dfgcg *PdfSignature )SetName (name string ){_dfgcg .Name =_bf .MakeString (name )};

// PdfAnnotationStrikeOut represents StrikeOut annotations.
// (Section 12.5.6.10).
type PdfAnnotationStrikeOut struct{*PdfAnnotation ;*PdfAnnotationMarkup ;QuadPoints _bf .PdfObject ;};

// SetPdfSubject sets the Subject attribute of the output PDF.
func SetPdfSubject (subject string ){_ggeae .Lock ();defer _ggeae .Unlock ();_dfecf =subject };

// ToInteger convert to an integer format.
func (_gcab *PdfColorDeviceGray )ToInteger (bits int )uint32 {_dcca :=_fg .Pow (2,float64 (bits ))-1;return uint32 (_dcca *_gcab .Val ());};

// NewPdfAnnotationPopup returns a new popup annotation.
func NewPdfAnnotationPopup ()*PdfAnnotationPopup {_bff :=NewPdfAnnotation ();_cgfc :=&PdfAnnotationPopup {};_cgfc .PdfAnnotation =_bff ;_bff .SetContext (_cgfc );return _cgfc ;};

// GetContext returns a reference to the subshading entry as represented by PdfShadingType1-7.
func (_cfabg *PdfShading )GetContext ()PdfModel {return _cfabg ._bcgbde };var _ pdfFont =(*pdfFontType3 )(nil );func (_ddabe *PdfWriter )getPdfVersion ()string {return _af .Sprintf ("\u0025\u0064\u002e%\u0064",_ddabe ._abccg .Major ,_ddabe ._abccg .Minor );
};

// GetXObjectByName gets XObject by name.
func (_ceaee *PdfPage )GetXObjectByName (name _bf .PdfObjectName )(_bf .PdfObject ,bool ){_bbfdb ,_cebae :=_ceaee .Resources .XObject .(*_bf .PdfObjectDictionary );if !_cebae {return nil ,false ;};if _dcacc :=_bbfdb .Get (name );_dcacc !=nil {return _dcacc ,true ;
};return nil ,false ;};

// String returns a string representation of PdfTransformParamsDocMDP.
func (_fgeed *PdfTransformParamsDocMDP )String ()string {return _af .Sprintf ("\u0025\u0073\u0020\u0050\u003a\u0020\u0025\u0073\u0020V\u003a\u0020\u0025\u0073",_fgeed .Type ,_fgeed .P ,_fgeed .V );};

// PdfActionNamed represents a named action.
type PdfActionNamed struct{*PdfAction ;N _bf .PdfObject ;};func (_bdd *PdfReader )newPdfActionJavaScriptFromDict (_geee *_bf .PdfObjectDictionary )(*PdfActionJavaScript ,error ){return &PdfActionJavaScript {JS :_geee .Get ("\u004a\u0053")},nil ;};

// HasExtGState checks if ExtGState name is available.
func (_gadgd *PdfPage )HasExtGState (name _bf .PdfObjectName )bool {if _gadgd .Resources ==nil {return false ;};if _gadgd .Resources .ExtGState ==nil {return false ;};_efca ,_gadga :=_bf .TraceToDirectObject (_gadgd .Resources .ExtGState ).(*_bf .PdfObjectDictionary );
if !_gadga {_bc .Log .Debug ("\u0045\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0045\u0078t\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u0064i\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u003a\u0020\u0025\u0076",_bf .TraceToDirectObject (_gadgd .Resources .ExtGState ));
return false ;};_ddfbb :=_efca .Get (name );_aaebc :=_ddfbb !=nil ;return _aaebc ;};func _beaa (_cage _bf .PdfObject )(*PdfColorspaceCalGray ,error ){_fceg :=NewPdfColorspaceCalGray ();if _bffeb ,_dfcg :=_cage .(*_bf .PdfIndirectObject );_dfcg {_fceg ._fgba =_bffeb ;
};_cage =_bf .TraceToDirectObject (_cage );_ffeac ,_abea :=_cage .(*_bf .PdfObjectArray );if !_abea {return nil ,_af .Errorf ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};if _ffeac .Len ()!=2{return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0061\u006cG\u0072\u0061\u0079\u0020\u0063\u006f\u006c\u006f\u0072\u0073p\u0061\u0063\u0065");
};_cage =_bf .TraceToDirectObject (_ffeac .Get (0));_aeef ,_abea :=_cage .(*_bf .PdfObjectName );if !_abea {return nil ,_af .Errorf ("\u0043\u0061\u006c\u0047\u0072\u0061\u0079\u0020\u006e\u0061m\u0065\u0020\u006e\u006f\u0074\u0020\u0061 \u004e\u0061\u006d\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};if *_aeef !="\u0043a\u006c\u0047\u0072\u0061\u0079"{return nil ,_af .Errorf ("\u006eo\u0074\u0020\u0061\u0020\u0043\u0061\u006c\u0047\u0072\u0061\u0079 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065");};_cage =_bf .TraceToDirectObject (_ffeac .Get (1));
_adgf ,_abea :=_cage .(*_bf .PdfObjectDictionary );if !_abea {return nil ,_af .Errorf ("\u0043\u0061lG\u0072\u0061\u0079 \u0064\u0069\u0063\u0074 no\u0074 a\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u006f\u0062\u006a\u0065c\u0074");
};_cage =_adgf .Get ("\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074");_cage =_bf .TraceToDirectObject (_cage );_afac ,_abea :=_cage .(*_bf .PdfObjectArray );if !_abea {return nil ,_af .Errorf ("C\u0061\u006c\u0047\u0072\u0061\u0079:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020W\u0068\u0069\u0074e\u0050o\u0069\u006e\u0074");
};if _afac .Len ()!=3{return nil ,_af .Errorf ("\u0043\u0061\u006c\u0047\u0072\u0061y\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0057\u0068\u0069t\u0065\u0050\u006f\u0069\u006e\u0074\u0020a\u0072\u0072\u0061\u0079");};_effd ,_gbb :=_afac .GetAsFloat64Slice ();
if _gbb !=nil {return nil ,_gbb ;};_fceg .WhitePoint =_effd ;_cage =_adgf .Get ("\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074");if _cage !=nil {_cage =_bf .TraceToDirectObject (_cage );_fdedf ,_efba :=_cage .(*_bf .PdfObjectArray );if !_efba {return nil ,_af .Errorf ("C\u0061\u006c\u0047\u0072\u0061\u0079:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020B\u006c\u0061\u0063k\u0050o\u0069\u006e\u0074");
};if _fdedf .Len ()!=3{return nil ,_af .Errorf ("\u0043\u0061\u006c\u0047\u0072\u0061y\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u006c\u0061c\u006b\u0050\u006f\u0069\u006e\u0074\u0020a\u0072\u0072\u0061\u0079");};_dgeb ,_adbg :=_fdedf .GetAsFloat64Slice ();
if _adbg !=nil {return nil ,_adbg ;};_fceg .BlackPoint =_dgeb ;};_cage =_adgf .Get ("\u0047\u0061\u006dm\u0061");if _cage !=nil {_cage =_bf .TraceToDirectObject (_cage );_aeba ,_ageab :=_bf .GetNumberAsFloat (_cage );if _ageab !=nil {return nil ,_af .Errorf ("C\u0061\u006c\u0047\u0072\u0061\u0079:\u0020\u0067\u0061\u006d\u006d\u0061\u0020\u006e\u006ft\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_fceg .Gamma =_aeba ;};return _fceg ,nil ;};

// ColorToRGB converts gray -> rgb for a single color component.
func (_gade *PdfColorspaceDeviceGray )ColorToRGB (color PdfColor )(PdfColor ,error ){_bdad ,_caca :=color .(*PdfColorDeviceGray );if !_caca {_bc .Log .Debug ("\u0049\u006e\u0070\u0075\u0074\u0020\u0063\u006f\u006c\u006fr\u0020\u006e\u006f\u0074\u0020\u0064\u0065v\u0069\u0063\u0065\u0020\u0067\u0072\u0061\u0079\u0020\u0025\u0054",color );
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};return NewPdfColorDeviceRGB (float64 (*_bdad ),float64 (*_bdad ),float64 (*_bdad )),nil ;};var _gffba =_ca .MustCompile ("\u005b\\\u006e\u005c\u0072\u005d\u002b");


// SetNamedDestinations sets the Dests entry in the PDF catalog.
// See section 12.3.2.3 "Named Destinations" (p. 367 PDF32000_2008).
func (_aceea *PdfWriter )SetNamedDestinations (dests _bf .PdfObject )error {if dests ==nil {return nil ;};_bc .Log .Trace ("\u0053e\u0074\u0074\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006co\u0067\u0020\u0044\u0065\u0073\u0074\u0073\u002e\u002e\u002e");
_aceea ._cecba .Set ("\u0044\u0065\u0073t\u0073",dests );return _aceea .addObjects (dests );};

// CheckAccessRights checks access rights and permissions for a specified password.  If either user/owner
// password is specified,  full rights are granted, otherwise the access rights are specified by the
// Permissions flag.
//
// The bool flag indicates that the user can access and view the file.
// The AccessPermissions shows what access the user has for editing etc.
// An error is returned if there was a problem performing the authentication.
func (_aeeda *PdfReader )CheckAccessRights (password []byte )(bool ,_fd .Permissions ,error ){return _aeeda ._gafdb .CheckAccessRights (password );};

// SignatureHandlerDocMDPParams describe the specific parameters for the SignatureHandlerEx
// These parameters describe how to check the difference between revisions.
// Revisions of the document get from the PdfParser.
type SignatureHandlerDocMDPParams struct{Parser *_bf .PdfParser ;DiffPolicy _bcd .DiffPolicy ;};func _gefa (_fbfdcc *[]*PdfField ,_fgdef FieldFilterFunc ,_aaadf bool )[]*PdfField {if _fbfdcc ==nil {return nil ;};_cgdb :=*_fbfdcc ;if len (*_fbfdcc )==0{return nil ;
};_dcaa :=_cgdb [:0];if _fgdef ==nil {_fgdef =func (*PdfField )bool {return true };};var _deea []*PdfField ;for _ ,_cabff :=range _cgdb {_gcefbc :=_fgdef (_cabff );if _gcefbc {_deea =append (_deea ,_cabff );if len (_cabff .Kids )> 0{_deea =append (_deea ,_gefa (&_cabff .Kids ,_fgdef ,_aaadf )...);
};};if !_aaadf ||!_gcefbc ||len (_cabff .Kids )> 0{_dcaa =append (_dcaa ,_cabff );};};*_fbfdcc =_dcaa ;return _deea ;};func (_ddadc *PdfReader )flattenFieldsWithOpts (_deca bool ,_edede FieldAppearanceGenerator ,_dcfa *FieldFlattenOpts )error {if _dcfa ==nil {_dcfa =&FieldFlattenOpts {};
};var _dafcg bool ;_aedgb :=map[*PdfAnnotation ]bool {};{var _bfbc []*PdfField ;_fbfgb :=_ddadc .AcroForm ;if _fbfgb !=nil {if _dcfa .FilterFunc !=nil {_bfbc =_fbfgb .filteredFields (_dcfa .FilterFunc ,true );_dafcg =_fbfgb .Fields !=nil &&len (*_fbfgb .Fields )> 0;
}else {_bfbc =_fbfgb .AllFields ();};};for _ ,_fegb :=range _bfbc {for _ ,_afgfe :=range _fegb .Annotations {_aedgb [_afgfe .PdfAnnotation ]=_fegb .V !=nil ;if _edede !=nil {_cdcdb ,_cedgg :=_edede .GenerateAppearanceDict (_fbfgb ,_fegb ,_afgfe );if _cedgg !=nil {return _cedgg ;
};_afgfe .AP =_cdcdb ;};};};};if _deca {for _ ,_fedfe :=range _ddadc .PageList {_cbgdce ,_ggbe :=_fedfe .GetAnnotations ();if _ggbe !=nil {return _ggbe ;};for _ ,_cefa :=range _cbgdce {_aedgb [_cefa ]=true ;};};};for _ ,_bggfg :=range _ddadc .PageList {var _bbfd []*PdfAnnotation ;
if _edede !=nil {if _befa :=_edede .WrapContentStream (_bggfg );_befa !=nil {return _befa ;};};_fdea ,_dfcd :=_bggfg .GetAnnotations ();if _dfcd !=nil {return _dfcd ;};for _ ,_bafgc :=range _fdea {_fcfa ,_fedg :=_aedgb [_bafgc ];if !_fedg &&_dcfa .AnnotFilterFunc !=nil {if _ ,_bfed :=_bafgc .GetContext ().(*PdfAnnotationWidget );
!_bfed {_fedg =_dcfa .AnnotFilterFunc (_bafgc );};};if !_fedg {_bbfd =append (_bbfd ,_bafgc );continue ;};switch _bafgc .GetContext ().(type ){case *PdfAnnotationPopup :continue ;case *PdfAnnotationLink :continue ;case *PdfAnnotationProjection :continue ;
};_gdfef ,_fcaf ,_fbef :=_agdcc (_bafgc );if _fbef !=nil {if !_fcfa {_bc .Log .Trace ("\u0046\u0069\u0065\u006c\u0064\u0020\u0077\u0069\u0074h\u006f\u0075\u0074\u0020\u0056\u0020\u002d\u003e\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0077\u0069\u0074h\u006f\u0075t\u0020\u0061p\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0074\u0072\u0065am\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u006f\u0076\u0065\u0072");
continue ;};_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0041\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0077\u0069\u0074h\u006f\u0075\u0074\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d,\u0020\u0065\u0072\u0072\u0020\u003a\u0020\u0025\u0076\u0020\u002d\u0020\u0073\u006bi\u0070\u0070\u0069n\u0067\u0020\u006f\u0076\u0065\u0072",_fbef );
continue ;};if _gdfef ==nil {continue ;};_eedb :=_bggfg .Resources .GenerateXObjectName ();_bggfg .Resources .SetXObjectFormByName (_eedb ,_gdfef );_adba :=_fg .Min (_fcaf .Llx ,_fcaf .Urx );_aaab :=_fg .Min (_fcaf .Lly ,_fcaf .Ury );var _ddfdc []string ;
_ddfdc =append (_ddfdc ,"\u0071");_ddfdc =append (_ddfdc ,_af .Sprintf ("\u0025\u002e\u0036\u0066\u0020\u0025\u002e\u0036\u0066\u0020\u0025\u002e\u0036\u0066\u0020%\u002e6\u0066\u0020\u0025\u002e\u0036\u0066\u0020\u0025\u002e\u0036\u0066\u0020\u0063\u006d",1.0,0.0,0.0,1.0,_adba ,_aaab ));
_ddfdc =append (_ddfdc ,_af .Sprintf ("\u002f\u0025\u0073\u0020\u0044\u006f",_eedb .String ()));_ddfdc =append (_ddfdc ,"\u0051");_cadf :=_gf .Join (_ddfdc ,"\u000a");_fbef =_bggfg .AppendContentStream (_cadf );if _fbef !=nil {return _fbef ;};if _gdfef .Resources !=nil {_edbb ,_faea :=_bf .GetDict (_gdfef .Resources .Font );
if _faea {for _ ,_gaec :=range _edbb .Keys (){if !_bggfg .Resources .HasFontByName (_gaec ){_bggfg .Resources .SetFontByName (_gaec ,_edbb .Get (_gaec ));};};};};};if len (_bbfd )> 0{_bggfg ._gbcab =_bbfd ;}else {_bggfg ._gbcab =[]*PdfAnnotation {};};};
if !_dafcg {_ddadc .AcroForm =nil ;};return nil ;};func _agbb (_ggbg *_bf .PdfObjectDictionary )(*PdfFieldChoice ,error ){_eefa :=&PdfFieldChoice {};_eefa .Opt ,_ =_bf .GetArray (_ggbg .Get ("\u004f\u0070\u0074"));_eefa .TI ,_ =_bf .GetInt (_ggbg .Get ("\u0054\u0049"));
_eefa .I ,_ =_bf .GetArray (_ggbg .Get ("\u0049"));return _eefa ,nil ;};func _fadd ()_g .Time {_ggeae .Lock ();defer _ggeae .Unlock ();return _dceee };

// ToGoTime returns the date in time.Time format.
func (_bfbf PdfDate )ToGoTime ()_g .Time {_fggf :=int (_bfbf ._bgfda *60*60+_bfbf ._egbag *60);switch _bfbf ._fdffd {case '-':_fggf =-_fggf ;case 'Z':_fggf =0;};_ccfgc :=_af .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_bfbf ._fdffd ,_bfbf ._bgfda ,_bfbf ._egbag );
_fcgcc :=_g .FixedZone (_ccfgc ,_fggf );return _g .Date (int (_bfbf ._ddgda ),_g .Month (_bfbf ._eeaeb ),int (_bfbf ._fcdcc ),int (_bfbf ._bbbc ),int (_bfbf ._gddgc ),int (_bfbf ._bdgge ),0,_fcgcc );};

// FieldFlag represents form field flags. Some of the flags can apply to all types of fields whereas other
// flags are specific.
type FieldFlag uint32 ;

// ValidateSignatures validates digital signatures in the document.
func (_cbfdd *PdfReader )ValidateSignatures (handlers []SignatureHandler )([]SignatureValidationResult ,error ){if _cbfdd .AcroForm ==nil {return nil ,nil ;};if _cbfdd .AcroForm .Fields ==nil {return nil ,nil ;};type sigFieldPair struct{_dbfab *PdfSignature ;
_egdfb *PdfField ;_abfeb SignatureHandler ;};var _ddcceg []*sigFieldPair ;for _ ,_efaf :=range _cbfdd .AcroForm .AllFields (){if _efaf .V ==nil {continue ;};if _aedaea ,_agcgf :=_bf .GetDict (_efaf .V );_agcgf {if _cdge ,_gbfbb :=_bf .GetNameVal (_aedaea .Get ("\u0054\u0079\u0070\u0065"));
_gbfbb &&_cdge =="\u0053\u0069\u0067"{_fccgc ,_accbb :=_bf .GetIndirect (_efaf .V );if !_accbb {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0053\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0063\u006f\u006et\u0061\u0069\u006e\u0065\u0072\u0020\u0069s\u0020\u006e\u0069\u006c");
return nil ,ErrTypeCheck ;};_ddedg ,_fbffg :=_cbfdd .newPdfSignatureFromIndirect (_fccgc );if _fbffg !=nil {return nil ,_fbffg ;};var _ggag SignatureHandler ;for _ ,_ebgfc :=range handlers {if _ebgfc .IsApplicable (_ddedg ){_ggag =_ebgfc ;break ;};};_ddcceg =append (_ddcceg ,&sigFieldPair {_dbfab :_ddedg ,_egdfb :_efaf ,_abfeb :_ggag });
};};};var _efbbe []SignatureValidationResult ;for _ ,_gdbg :=range _ddcceg {_dbeegg :=SignatureValidationResult {IsSigned :true ,Fields :[]*PdfField {_gdbg ._egdfb }};if _gdbg ._abfeb ==nil {_dbeegg .Errors =append (_dbeegg .Errors ,"\u0068a\u006ed\u006c\u0065\u0072\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074");
_efbbe =append (_efbbe ,_dbeegg );continue ;};_gfdc ,_ecbgfd :=_gdbg ._abfeb .NewDigest (_gdbg ._dbfab );if _ecbgfd !=nil {_dbeegg .Errors =append (_dbeegg .Errors ,"\u0064\u0069\u0067e\u0073\u0074\u0020\u0065\u0072\u0072\u006f\u0072",_ecbgfd .Error ());
_efbbe =append (_efbbe ,_dbeegg );continue ;};_eeaca :=_gdbg ._dbfab .ByteRange ;if _eeaca ==nil {_dbeegg .Errors =append (_dbeegg .Errors ,"\u0042\u0079\u0074\u0065\u0052\u0061\u006e\u0067\u0065\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");_efbbe =append (_efbbe ,_dbeegg );
continue ;};for _cbbfa :=0;_cbbfa < _eeaca .Len ();_cbbfa =_cbbfa +2{_ebabe ,_ :=_bf .GetNumberAsInt64 (_eeaca .Get (_cbbfa ));_edcfc ,_ :=_bf .GetIntVal (_eeaca .Get (_cbbfa +1));if _ ,_dcce :=_cbfdd ._geeda .Seek (_ebabe ,_ag .SeekStart );_dcce !=nil {return nil ,_dcce ;
};_bbbddd :=make ([]byte ,_edcfc );if _ ,_gcdfa :=_cbfdd ._geeda .Read (_bbbddd );_gcdfa !=nil {return nil ,_gcdfa ;};_gfdc .Write (_bbbddd );};var _cacfd SignatureValidationResult ;if _cgdf ,_afdea :=_gdbg ._abfeb .(SignatureHandlerDocMDP );_afdea {_cacfd ,_ecbgfd =_cgdf .ValidateWithOpts (_gdbg ._dbfab ,_gfdc ,SignatureHandlerDocMDPParams {Parser :_cbfdd ._gafdb });
}else {_cacfd ,_ecbgfd =_gdbg ._abfeb .Validate (_gdbg ._dbfab ,_gfdc );};if _ecbgfd !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052: \u0025v\u0020\u0028\u0025\u0054\u0029 \u002d\u0020\u0073\u006b\u0069\u0070",_ecbgfd ,_gdbg ._abfeb );_cacfd .Errors =append (_cacfd .Errors ,_ecbgfd .Error ());
};_cacfd .Name =_gdbg ._dbfab .Name .Decoded ();_cacfd .Reason =_gdbg ._dbfab .Reason .Decoded ();if _gdbg ._dbfab .M !=nil {_gebeaa ,_cddeff :=NewPdfDate (_gdbg ._dbfab .M .String ());if _cddeff !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cddeff );
_cacfd .Errors =append (_cacfd .Errors ,_cddeff .Error ());continue ;};_cacfd .Date =_gebeaa ;};_cacfd .ContactInfo =_gdbg ._dbfab .ContactInfo .Decoded ();_cacfd .Location =_gdbg ._dbfab .Location .Decoded ();_cacfd .Fields =_dbeegg .Fields ;_efbbe =append (_efbbe ,_cacfd );
};return _efbbe ,nil ;};

// NewPdfAnnotationFileAttachment returns a new file attachment annotation.
func NewPdfAnnotationFileAttachment ()*PdfAnnotationFileAttachment {_eafg :=NewPdfAnnotation ();_afca :=&PdfAnnotationFileAttachment {};_afca .PdfAnnotation =_eafg ;_afca .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_eafg .SetContext (_afca );return _afca ;
};

// GetPage returns the PdfPage model for the specified page number.
func (_eafae *PdfReader )GetPage (pageNumber int )(*PdfPage ,error ){if _eafae ._gafdb .GetCrypter ()!=nil &&!_eafae ._gafdb .IsAuthenticated (){return nil ,_af .Errorf ("\u0066\u0069\u006c\u0065\u0020\u006e\u0065\u0065\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");
};if len (_eafae ._ggdg )< pageNumber {return nil ,_eff .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0028\u0070\u0061\u0067\u0065\u0020\u0063\u006f\u0075\u006e\u0074\u0020\u0074o\u006f\u0020\u0073\u0068\u006f\u0072\u0074\u0029");
};_fdfeac :=pageNumber -1;if _fdfeac < 0{return nil ,_af .Errorf ("\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0069\u006e\u0067\u0020\u006d\u0075\u0073t\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0061\u0074\u0020\u0031");};_dgaac :=_eafae .PageList [_fdfeac ];
return _dgaac ,nil ;};func (_gffg *DSS )addCRLs (_bbggb [][]byte )([]*_bf .PdfObjectStream ,error ){return _gffg .add (&_gffg .CRLs ,_gffg ._dega ,_bbggb );};func _fddcbf (_dgfa *PdfField ,_dgggc _bf .PdfObject ){for _ ,_dcfbe :=range _dgfa .Annotations {_dcfbe .AS =_dgggc ;
_dcfbe .ToPdfObject ();};};func (_bdbeg *PdfReader )newPdfSignatureFromIndirect (_gadcff *_bf .PdfIndirectObject )(*PdfSignature ,error ){_bcgaga ,_feegf :=_gadcff .PdfObject .(*_bf .PdfObjectDictionary );if !_feegf {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0053\u0069\u0067\u006e\u0061\u0074\u0075\u0072e\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u006e\u006ft\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020a \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
return nil ,ErrTypeCheck ;};if _beda ,_fccf :=_bdbeg ._fgac .GetModelFromPrimitive (_gadcff ).(*PdfSignature );_fccf {return _beda ,nil ;};_bcbed :=&PdfSignature {};_bcbed ._decde =_gadcff ;_bcbed .Type ,_ =_bf .GetName (_bcgaga .Get ("\u0054\u0079\u0070\u0065"));
_bcbed .Filter ,_feegf =_bf .GetName (_bcgaga .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if !_feegf {_bc .Log .Error ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0053i\u0067\u006e\u0061\u0074\u0075r\u0065\u0020\u0046\u0069\u006c\u0074\u0065\u0072\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
return nil ,ErrInvalidAttribute ;};_bcbed .SubFilter ,_ =_bf .GetName (_bcgaga .Get ("\u0053u\u0062\u0046\u0069\u006c\u0074\u0065r"));_bcbed .Contents ,_feegf =_bf .GetString (_bcgaga .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_feegf {_bc .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a \u0053\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0063\u006f\u006et\u0065\u006e\u0074\u0073\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");
return nil ,ErrInvalidAttribute ;};if _cbeec ,_fgcf :=_bf .GetArray (_bcgaga .Get ("\u0052e\u0066\u0065\u0072\u0065\u006e\u0063e"));_fgcf {_bcbed .Reference =_bf .MakeArray ();for _ ,_dfbbd :=range _cbeec .Elements (){_dgabc ,_ffbea :=_bf .GetDict (_dfbbd );
if !_ffbea {_bc .Log .Error ("\u0045\u0052R\u004f\u0052\u003a\u0020R\u0065\u0066e\u0072\u0065\u006e\u0063\u0065\u0020\u0063\u006fn\u0074\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0061\u0074\u0065\u0064");return nil ,ErrInvalidAttribute ;
};_eaecg ,_gedb :=_bdbeg .newPdfSignatureReferenceFromDict (_dgabc );if _gedb !=nil {return nil ,_gedb ;};_bcbed .Reference .Append (_eaecg .ToPdfObject ());};};_bcbed .Cert =_bcgaga .Get ("\u0043\u0065\u0072\u0074");_bcbed .ByteRange ,_ =_bf .GetArray (_bcgaga .Get ("\u0042y\u0074\u0065\u0052\u0061\u006e\u0067e"));
_bcbed .Changes ,_ =_bf .GetArray (_bcgaga .Get ("\u0043h\u0061\u006e\u0067\u0065\u0073"));_bcbed .Name ,_ =_bf .GetString (_bcgaga .Get ("\u004e\u0061\u006d\u0065"));_bcbed .M ,_ =_bf .GetString (_bcgaga .Get ("\u004d"));_bcbed .Location ,_ =_bf .GetString (_bcgaga .Get ("\u004c\u006f\u0063\u0061\u0074\u0069\u006f\u006e"));
_bcbed .Reason ,_ =_bf .GetString (_bcgaga .Get ("\u0052\u0065\u0061\u0073\u006f\u006e"));_bcbed .ContactInfo ,_ =_bf .GetString (_bcgaga .Get ("C\u006f\u006e\u0074\u0061\u0063\u0074\u0049\u006e\u0066\u006f"));_bcbed .R ,_ =_bf .GetInt (_bcgaga .Get ("\u0052"));
_bcbed .V ,_ =_bf .GetInt (_bcgaga .Get ("\u0056"));_bcbed .PropBuild ,_ =_bf .GetDict (_bcgaga .Get ("\u0050\u0072\u006f\u0070\u005f\u0042\u0075\u0069\u006c\u0064"));_bcbed .PropAuthTime ,_ =_bf .GetInt (_bcgaga .Get ("\u0050\u0072\u006f\u0070\u005f\u0041\u0075\u0074\u0068\u0054\u0069\u006d\u0065"));
_bcbed .PropAuthType ,_ =_bf .GetName (_bcgaga .Get ("\u0050\u0072\u006f\u0070\u005f\u0041\u0075\u0074\u0068\u0054\u0079\u0070\u0065"));_bdbeg ._fgac .Register (_gadcff ,_bcbed );return _bcbed ,nil ;};

// NewPdfFontFromTTF loads a TTF font and returns a PdfFont type that can be
// used in text styling functions.
// Uses a WinAnsiTextEncoder and loads only character codes 32-255.
// NOTE: For composite fonts such as used in symbolic languages, use NewCompositePdfFontFromTTF.
func NewPdfFontFromTTF (r _ag .ReadSeeker )(*PdfFont ,error ){const _cdfaa =_faf .CharCode (32);const _baae =_faf .CharCode (255);_dfae ,_ffefd :=_fe .ReadAll (r );if _ffefd !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0072\u0065\u0061d\u0020\u0066\u006f\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_ffefd );
return nil ,_ffefd ;};_ffad ,_ffefd :=_eb .TtfParse (_cdc .NewReader (_dfae ));if _ffefd !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0054\u0054F\u0020\u0066\u006fn\u0074:\u0020\u0025\u0076",_ffefd );
return nil ,_ffefd ;};_dbeef :=&pdfFontSimple {_fabb :make (map[_faf .CharCode ]float64 ),fontCommon :fontCommon {_fdfb :"\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065"}};_dbeef ._adbcf =_faf .NewWinAnsiEncoder ();_dbeef ._adccf =_ffad .PostScriptName ;
_dbeef .FirstChar =_bf .MakeInteger (int64 (_cdfaa ));_dbeef .LastChar =_bf .MakeInteger (int64 (_baae ));_fbcfa :=1000.0/float64 (_ffad .UnitsPerEm );if len (_ffad .Widths )<=0{return nil ,_eff .New ("\u0045\u0052\u0052O\u0052\u003a\u0020\u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065 \u0028\u0057\u0069\u0064\u0074\u0068\u0073\u0029");
};_fbbce :=_fbcfa *float64 (_ffad .Widths [0]);_cdffc :=make ([]float64 ,0,_baae -_cdfaa +1);for _aebaa :=_cdfaa ;_aebaa <=_baae ;_aebaa ++{_fabga ,_egcab :=_dbeef .Encoder ().CharcodeToRune (_aebaa );if !_egcab {_bc .Log .Debug ("\u0052u\u006e\u0065\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u0028c\u006f\u0064\u0065\u003a\u0020\u0025\u0064)",_aebaa );
_cdffc =append (_cdffc ,_fbbce );continue ;};_acgad ,_bbbda :=_ffad .Chars [_fabga ];if !_bbbda {_bc .Log .Debug ("R\u0075\u006e\u0065\u0020no\u0074 \u0069\u006e\u0020\u0054\u0054F\u0020\u0043\u0068\u0061\u0072\u0073");_cdffc =append (_cdffc ,_fbbce );
continue ;};_acaeb :=_fbcfa *float64 (_ffad .Widths [_acgad ]);_cdffc =append (_cdffc ,_acaeb );};_dbeef .Widths =_bf .MakeIndirectObject (_bf .MakeArrayFromFloats (_cdffc ));if len (_cdffc )< int (_baae -_cdfaa +1){_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0065\u006e\u0067t\u0068\u0020\u006f\u0066\u0020\u0077\u0069\u0064\u0074\u0068s,\u0020\u0025\u0064 \u003c \u0025\u0064",len (_cdffc ),255-32+1);
return nil ,_bf .ErrRangeError ;};for _gafgb :=_cdfaa ;_gafgb <=_baae ;_gafgb ++{_dbeef ._fabb [_gafgb ]=_cdffc [_gafgb -_cdfaa ];};_dbeef .Encoding =_bf .MakeName ("\u0057i\u006eA\u006e\u0073\u0069\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067");_ededb :=&PdfFontDescriptor {};
_ededb .FontName =_bf .MakeName (_ffad .PostScriptName );_ededb .Ascent =_bf .MakeFloat (_fbcfa *float64 (_ffad .TypoAscender ));_ededb .Descent =_bf .MakeFloat (_fbcfa *float64 (_ffad .TypoDescender ));_ededb .CapHeight =_bf .MakeFloat (_fbcfa *float64 (_ffad .CapHeight ));
_ededb .FontBBox =_bf .MakeArrayFromFloats ([]float64 {_fbcfa *float64 (_ffad .Xmin ),_fbcfa *float64 (_ffad .Ymin ),_fbcfa *float64 (_ffad .Xmax ),_fbcfa *float64 (_ffad .Ymax )});_ededb .ItalicAngle =_bf .MakeFloat (_ffad .ItalicAngle );_ededb .MissingWidth =_bf .MakeFloat (_fbcfa *float64 (_ffad .Widths [0]));
_dcbc ,_ffefd :=_bf .MakeStream (_dfae ,_bf .NewFlateEncoder ());if _ffefd !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074o\u0020m\u0061\u006b\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ffefd );
return nil ,_ffefd ;};_dcbc .PdfObjectDictionary .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bf .MakeInteger (int64 (len (_dfae ))));_ededb .FontFile2 =_dcbc ;if _ffad .Bold {_ededb .StemV =_bf .MakeInteger (120);}else {_ededb .StemV =_bf .MakeInteger (70);
};_gbeb :=_dfbc ;if _ffad .IsFixedPitch {_gbeb |=_dcfbb ;};if _ffad .ItalicAngle !=0{_gbeb |=_dfge ;};_ededb .Flags =_bf .MakeInteger (int64 (_gbeb ));_dbeef ._cedfe =_ededb ;_gdfgd :=&PdfFont {_cacce :_dbeef };return _gdfgd ,nil ;};

// ToPdfObject returns the PDF representation of the colorspace.
func (_babcd *PdfPageResourcesColorspaces )ToPdfObject ()_bf .PdfObject {_fdbac :=_bf .MakeDict ();for _ ,_bdeba :=range _babcd .Names {_fdbac .Set (_bf .PdfObjectName (_bdeba ),_babcd .Colorspaces [_bdeba ].ToPdfObject ());};if _babcd ._abca !=nil {_babcd ._abca .PdfObject =_fdbac ;
return _babcd ._abca ;};return _fdbac ;};

// ToInteger convert to an integer format.
func (_dfga *PdfColorCalGray )ToInteger (bits int )uint32 {_fcbc :=_fg .Pow (2,float64 (bits ))-1;return uint32 (_fcbc *_dfga .Val ());};

// ToPdfObject returns the PDF representation of the outline tree node.
func (_cefge *PdfOutlineTreeNode )ToPdfObject ()_bf .PdfObject {return _cefge .GetContext ().ToPdfObject ();};

// GetPageLabels returns the PageLabels entry in the PDF catalog.
// See section 12.4.2 "Page Labels" (p. 382 PDF32000_2008).
func (_gfbaf *PdfReader )GetPageLabels ()(_bf .PdfObject ,error ){_dffgf :=_bf .ResolveReference (_gfbaf ._dbaea .Get ("\u0050\u0061\u0067\u0065\u004c\u0061\u0062\u0065\u006c\u0073"));if _dffgf ==nil {return nil ,nil ;};if !_gfbaf ._aggga {_efcag :=_gfbaf .traverseObjectData (_dffgf );
if _efcag !=nil {return nil ,_efcag ;};};return _dffgf ,nil ;};

// GetPdfName returns the PDF name used to indicate the border style.
// (Table 166 p. 395).
func (_aedea *BorderStyle )GetPdfName ()string {switch *_aedea {case BorderStyleSolid :return "\u0053";case BorderStyleDashed :return "\u0044";case BorderStyleBeveled :return "\u0042";case BorderStyleInset :return "\u0049";case BorderStyleUnderline :return "\u0055";
};return "";};func (_bdbg *PdfWriter )writeDocumentVersion (){if _bdbg ._dgbga {_bdbg .writeString ("\u000a");}else {_bdbg .writeString (_af .Sprintf ("\u0025\u0025\u0050D\u0046\u002d\u0025\u0064\u002e\u0025\u0064\u000a",_bdbg ._abccg .Major ,_bdbg ._abccg .Minor ));
_bdbg .writeString ("\u0025\u00e2\u00e3\u00cf\u00d3\u000a");};};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_aegeb *PdfShading )ToPdfObject ()_bf .PdfObject {_cggbc :=_aegeb ._daaad ;_dcdea ,_gbagg :=_aegeb .getShadingDict ();if _gbagg !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _aegeb .ShadingType !=nil {_dcdea .Set ("S\u0068\u0061\u0064\u0069\u006e\u0067\u0054\u0079\u0070\u0065",_aegeb .ShadingType );};if _aegeb .ColorSpace !=nil {_dcdea .Set ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065",_aegeb .ColorSpace .ToPdfObject ());
};if _aegeb .Background !=nil {_dcdea .Set ("\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064",_aegeb .Background );};if _aegeb .BBox !=nil {_dcdea .Set ("\u0042\u0042\u006f\u0078",_aegeb .BBox .ToPdfObject ());};if _aegeb .AntiAlias !=nil {_dcdea .Set ("\u0041n\u0074\u0069\u0041\u006c\u0069\u0061s",_aegeb .AntiAlias );
};return _cggbc ;};

// IsTerminal returns true for terminal fields, false otherwise.
// Terminal fields are fields whose descendants are only widget annotations.
func (_aeaf *PdfField )IsTerminal ()bool {return len (_aeaf .Kids )==0};func _acab (_afce *_bf .PdfObjectDictionary )(*PdfFieldButton ,error ){_fdaf :=&PdfFieldButton {};_fdaf .PdfField =NewPdfField ();_fdaf .PdfField .SetContext (_fdaf );_fdaf .Opt ,_ =_bf .GetArray (_afce .Get ("\u004f\u0070\u0074"));
_ceecd :=NewPdfAnnotationWidget ();_ceecd .A ,_ =_bf .GetDict (_afce .Get ("\u0041"));_ceecd .AP ,_ =_bf .GetDict (_afce .Get ("\u0041\u0050"));_ceecd .SetContext (_fdaf );_fdaf .PdfField .Annotations =append (_fdaf .PdfField .Annotations ,_ceecd );return _fdaf ,nil ;
};

// GetXObjectByName returns the XObject with the specified keyName and the object type.
func (_daaa *PdfPageResources )GetXObjectByName (keyName _bf .PdfObjectName )(*_bf .PdfObjectStream ,XObjectType ){if _daaa .XObject ==nil {return nil ,XObjectTypeUndefined ;};_fdaca ,_dbbcf :=_bf .TraceToDirectObject (_daaa .XObject ).(*_bf .PdfObjectDictionary );
if !_dbbcf {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u006e\u006f\u0074\u0020a\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0021\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_bf .TraceToDirectObject (_daaa .XObject ));
return nil ,XObjectTypeUndefined ;};if _ebfcf :=_fdaca .Get (keyName );_ebfcf !=nil {_abcfa ,_acbde :=_bf .GetStream (_ebfcf );if !_acbde {_bc .Log .Debug ("X\u004f\u0062\u006a\u0065\u0063\u0074 \u006e\u006f\u0074\u0020\u0070\u006fi\u006e\u0074\u0069\u006e\u0067\u0020\u0074o\u0020\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020%\u0054",_ebfcf );
return nil ,XObjectTypeUndefined ;};_gacdd :=_abcfa .PdfObjectDictionary ;_bdcfg ,_acbde :=_bf .TraceToDirectObject (_gacdd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065")).(*_bf .PdfObjectName );if !_acbde {_bc .Log .Debug ("\u0058\u004fbj\u0065\u0063\u0074 \u0053\u0075\u0062\u0074ype\u0020no\u0074\u0020\u0061\u0020\u004e\u0061\u006de,\u0020\u0064\u0069\u0063\u0074\u003a\u0020%\u0073",_gacdd .String ());
return nil ,XObjectTypeUndefined ;};if *_bdcfg =="\u0049\u006d\u0061g\u0065"{return _abcfa ,XObjectTypeImage ;}else if *_bdcfg =="\u0046\u006f\u0072\u006d"{return _abcfa ,XObjectTypeForm ;}else if *_bdcfg =="\u0050\u0053"{return _abcfa ,XObjectTypePS ;
}else {_bc .Log .Debug ("\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u0053\u0075b\u0074\u0079\u0070\u0065\u0020\u006e\u006ft\u0020\u006b\u006e\u006f\u0077\u006e\u0020\u0028\u0025\u0073\u0029",*_bdcfg );return nil ,XObjectTypeUndefined ;};}else {return nil ,XObjectTypeUndefined ;
};};

// PdfColorspaceCalRGB stores A, B, C components
type PdfColorspaceCalRGB struct{WhitePoint []float64 ;BlackPoint []float64 ;Gamma []float64 ;Matrix []float64 ;_fdeb *_bf .PdfObjectDictionary ;_gafc *_bf .PdfIndirectObject ;};

// NewPdfAnnotationCircle returns a new circle annotation.
func NewPdfAnnotationCircle ()*PdfAnnotationCircle {_dda :=NewPdfAnnotation ();_facbb :=&PdfAnnotationCircle {};_facbb .PdfAnnotation =_dda ;_facbb .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_dda .SetContext (_facbb );return _facbb ;};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// components. The slice should contain a single PdfObjectFloat element.
func (_ecff *PdfColorspaceSpecialIndexed )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_beeff ,_gfddf :=_bf .GetNumbersAsFloat (objects );
if _gfddf !=nil {return nil ,_gfddf ;};return _ecff .ColorFromFloats (_beeff );};func _debgd (_ddece *_bf .PdfObjectDictionary )(*PdfTilingPattern ,error ){_fccgf :=&PdfTilingPattern {};_cecec :=_ddece .Get ("\u0050a\u0069\u006e\u0074\u0054\u0079\u0070e");
if _cecec ==nil {_bc .Log .Debug ("\u0050\u0061\u0069\u006e\u0074\u0054\u0079\u0070\u0065\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");return nil ,ErrRequiredAttributeMissing ;};_cdbff ,_eacgd :=_cecec .(*_bf .PdfObjectInteger );if !_eacgd {_bc .Log .Debug ("\u0050\u0061\u0069\u006e\u0074\u0054y\u0070\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074e\u0067\u0065\u0072\u0020\u0028\u0067\u006ft\u0020\u0025\u0054\u0029",_cecec );
return nil ,_bf .ErrTypeError ;};_fccgf .PaintType =_cdbff ;_cecec =_ddece .Get ("\u0054\u0069\u006c\u0069\u006e\u0067\u0054\u0079\u0070\u0065");if _cecec ==nil {_bc .Log .Debug ("\u0054i\u006ci\u006e\u0067\u0054\u0079\u0070e\u0020\u006di\u0073\u0073\u0069\u006e\u0067");
return nil ,ErrRequiredAttributeMissing ;};_aafff ,_eacgd :=_cecec .(*_bf .PdfObjectInteger );if !_eacgd {_bc .Log .Debug ("\u0054\u0069\u006cin\u0067\u0054\u0079\u0070\u0065\u0020\u006e\u006f\u0074 \u0061n\u0020i\u006et\u0065\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_cecec );
return nil ,_bf .ErrTypeError ;};_fccgf .TilingType =_aafff ;_cecec =_ddece .Get ("\u0042\u0042\u006f\u0078");if _cecec ==nil {_bc .Log .Debug ("\u0042\u0042\u006fx\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");return nil ,ErrRequiredAttributeMissing ;
};_cecec =_bf .TraceToDirectObject (_cecec );_dffca ,_eacgd :=_cecec .(*_bf .PdfObjectArray );if !_eacgd {_bc .Log .Debug ("\u0042B\u006f\u0078 \u0073\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0079\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061y\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_cecec );
return nil ,_bf .ErrTypeError ;};_daecca ,_ggbga :=NewPdfRectangle (*_dffca );if _ggbga !=nil {_bc .Log .Debug ("\u0042\u0042\u006f\u0078\u0020\u0065\u0072\u0072\u006fr\u003a\u0020\u0025\u0076",_ggbga );return nil ,_ggbga ;};_fccgf .BBox =_daecca ;_cecec =_ddece .Get ("\u0058\u0053\u0074e\u0070");
if _cecec ==nil {_bc .Log .Debug ("\u0058\u0053\u0074\u0065\u0070\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");return nil ,ErrRequiredAttributeMissing ;};_agbba ,_ggbga :=_bf .GetNumberAsFloat (_cecec );if _ggbga !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0058S\u0074e\u0070\u0020\u0061\u0073\u0020\u0066\u006c\u006f\u0061\u0074\u003a\u0020\u0025\u0076",_agbba );
return nil ,_ggbga ;};_fccgf .XStep =_bf .MakeFloat (_agbba );_cecec =_ddece .Get ("\u0059\u0053\u0074e\u0070");if _cecec ==nil {_bc .Log .Debug ("\u0059\u0053\u0074\u0065\u0070\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");return nil ,ErrRequiredAttributeMissing ;
};_bcege ,_ggbga :=_bf .GetNumberAsFloat (_cecec );if _ggbga !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0059S\u0074e\u0070\u0020\u0061\u0073\u0020\u0066\u006c\u006f\u0061\u0074\u003a\u0020\u0025\u0076",_bcege );
return nil ,_ggbga ;};_fccgf .YStep =_bf .MakeFloat (_bcege );_cecec =_ddece .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s");if _cecec ==nil {_bc .Log .Debug ("\u0052\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");
return nil ,ErrRequiredAttributeMissing ;};_ddece ,_eacgd =_bf .TraceToDirectObject (_cecec ).(*_bf .PdfObjectDictionary );if !_eacgd {return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063e\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0028\u0025\u0054\u0029",_cecec );
};_ffadc ,_ggbga :=NewPdfPageResourcesFromDict (_ddece );if _ggbga !=nil {return nil ,_ggbga ;};_fccgf .Resources =_ffadc ;if _gdbee :=_ddece .Get ("\u004d\u0061\u0074\u0072\u0069\u0078");_gdbee !=nil {_eeee ,_aagbe :=_gdbee .(*_bf .PdfObjectArray );if !_aagbe {_bc .Log .Debug ("\u004d\u0061\u0074\u0072i\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_gdbee );
return nil ,_bf .ErrTypeError ;};_fccgf .Matrix =_eeee ;};return _fccgf ,nil ;};

// GetNumComponents returns the number of color components of the colorspace device.
// Returns 4 for a CMYK32 device.
func (_addb *PdfColorspaceDeviceCMYK )GetNumComponents ()int {return 4};func (_dgda *PdfReader )newPdfAnnotationStampFromDict (_bbf *_bf .PdfObjectDictionary )(*PdfAnnotationStamp ,error ){_ggd :=PdfAnnotationStamp {};_gca ,_dbbae :=_dgda .newPdfAnnotationMarkupFromDict (_bbf );
if _dbbae !=nil {return nil ,_dbbae ;};_ggd .PdfAnnotationMarkup =_gca ;_ggd .Name =_bbf .Get ("\u004e\u0061\u006d\u0065");return &_ggd ,nil ;};

// NewPdfColorspaceDeviceGray returns a new grayscale colorspace.
func NewPdfColorspaceDeviceGray ()*PdfColorspaceDeviceGray {return &PdfColorspaceDeviceGray {}};

// IsSimple returns true if `font` is a simple font.
func (_decd *PdfFont )IsSimple ()bool {_ ,_adfe :=_decd ._cacce .(*pdfFontSimple );return _adfe };type crossReference struct{Type int ;

// Type 1
Offset int64 ;Generation int64 ;

// Type 2
ObjectNumber int ;Index int ;};

// CharcodesToUnicode converts the character codes `charcodes` to a slice of runes.
// How it works:
//  1) Use the ToUnicode CMap if there is one.
//  2) Use the underlying font's encoding.
func (_cdgf *PdfFont )CharcodesToUnicode (charcodes []_faf .CharCode )[]rune {_eagba ,_ ,_ :=_cdgf .CharcodesToUnicodeWithStats (charcodes );return _eagba ;};

// SetEncoder sets the encoding for the underlying font.
// TODO(peterwilliams97): Change function signature to SetEncoder(encoder *textencoding.simpleEncoder).
// TODO(gunnsth): Makes sense if SetEncoder is removed from the interface fonts.Font as proposed in PR #260.
func (_gcbc *pdfFontSimple )SetEncoder (encoder _faf .TextEncoder ){_gcbc ._adbcf =encoder };

// String returns a string that describes `font`.
func (_fbefg *PdfFont )String ()string {_bbdg :="";if _fbefg ._cacce .Encoder ()!=nil {_bbdg =_fbefg ._cacce .Encoder ().String ();};return _af .Sprintf ("\u0046\u004f\u004e\u0054\u007b\u0025\u0054\u0020\u0025s\u0020\u0025\u0073\u007d",_fbefg ._cacce ,_fbefg .baseFields ().coreString (),_bbdg );
};

// GetContainingPdfObject returns the XObject Form's containing object (indirect object).
func (_fggbg *XObjectForm )GetContainingPdfObject ()_bf .PdfObject {return _fggbg ._cdaggd };func (_cdegf *PdfReader )newPdfAcroFormFromDict (_bfacc *_bf .PdfIndirectObject ,_gede *_bf .PdfObjectDictionary )(*PdfAcroForm ,error ){_dgddf :=NewPdfAcroForm ();
if _bfacc !=nil {_dgddf ._ccfccd =_bfacc ;_bfacc .PdfObject =_bf .MakeDict ();};if _afbfc :=_gede .Get ("\u0046\u0069\u0065\u006c\u0064\u0073");_afbfc !=nil &&!_bf .IsNullObject (_afbfc ){_cfbf ,_cbege :=_bf .GetArray (_afbfc );if !_cbege {return nil ,_af .Errorf ("\u0066i\u0065\u006c\u0064\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006e \u0061\u0072\u0072\u0061\u0079\u0020\u0028\u0025\u0054\u0029",_afbfc );
};var _ccbgc []*PdfField ;for _ ,_egade :=range _cfbf .Elements (){_debd ,_cccce :=_bf .GetIndirect (_egade );if !_cccce {if _ ,_aeccd :=_egade .(*_bf .PdfObjectNull );_aeccd {_bc .Log .Trace ("\u0053k\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072 \u006e\u0075\u006c\u006c\u0020\u0066\u0069\u0065\u006c\u0064");
continue ;};_bc .Log .Debug ("\u0046\u0069\u0065\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0064 \u0069\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0025\u0054",_egade );
return nil ,_af .Errorf ("\u0066\u0069\u0065l\u0064\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u0061\u006e\u0020i\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_ggge ,_bcab :=_cdegf .newPdfFieldFromIndirectObject (_debd ,nil );
if _bcab !=nil {return nil ,_bcab ;};_bc .Log .Trace ("\u0041\u0063\u0072\u006fFo\u0072\u006d\u0020\u0046\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u002b\u0076",*_ggge );_ccbgc =append (_ccbgc ,_ggge );};_dgddf .Fields =&_ccbgc ;};if _cebaa :=_gede .Get ("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073");
_cebaa !=nil {_ccce ,_dedca :=_bf .GetBool (_cebaa );if _dedca {_dgddf .NeedAppearances =_ccce ;}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u0065\u0065\u0064\u0041\u0070p\u0065\u0061\u0072\u0061\u006e\u0063e\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0067\u006ft\u0020\u0025\u0054\u0029",_cebaa );
};};if _adfed :=_gede .Get ("\u0053\u0069\u0067\u0046\u006c\u0061\u0067\u0073");_adfed !=nil {_gdddb ,_dded :=_bf .GetInt (_adfed );if _dded {_dgddf .SigFlags =_gdddb ;}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0053\u0069\u0067\u0046\u006c\u0061\u0067\u0073 \u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_adfed );
};};if _ebeb :=_gede .Get ("\u0043\u004f");_ebeb !=nil {_ddfdb ,_ebcc :=_bf .GetArray (_ebeb );if _ebcc {_dgddf .CO =_ddfdb ;}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u004f\u0020\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0067\u006f\u0074 \u0025\u0054\u0029",_ebeb );
};};if _cgfdf :=_gede .Get ("\u0044\u0052");_cgfdf !=nil {if _bfgf ,_cfbge :=_bf .GetDict (_cgfdf );_cfbge {_fbge ,_aeec :=NewPdfPageResourcesFromDict (_bfgf );if _aeec !=nil {_bc .Log .Error ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0044R\u003a\u0020\u0025\u0076",_aeec );
return nil ,_aeec ;};_dgddf .DR =_fbge ;}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0044\u0052\u0020\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0067\u006f\u0074 \u0025\u0054\u0029",_cgfdf );};};if _aggd :=_gede .Get ("\u0044\u0041");
_aggd !=nil {_fecg ,_ccgff :=_bf .GetString (_aggd );if _ccgff {_dgddf .DA =_fecg ;}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0044\u0041\u0020\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0067\u006f\u0074 \u0025\u0054\u0029",_aggd );
};};if _aabca :=_gede .Get ("\u0051");_aabca !=nil {_ddbbe ,_gegeg :=_bf .GetInt (_aabca );if _gegeg {_dgddf .Q =_ddbbe ;}else {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0051\u0020\u0069\u006e\u0076a\u006ci\u0064 \u0028\u0067\u006f\u0074\u0020\u0025\u0054)",_aabca );
};};if _bbdbc :=_gede .Get ("\u0058\u0046\u0041");_bbdbc !=nil {_dgddf .XFA =_bbdbc ;};_dgddf .ToPdfObject ();return _dgddf ,nil ;};

// ToPdfObject returns the PDF representation of the page resources.
func (_aadbb *PdfPageResources )ToPdfObject ()_bf .PdfObject {_gbdad :=_aadbb ._dbfed ;_gbdad .SetIfNotNil ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e",_aadbb .ExtGState );if _aadbb ._dbcab !=nil {_aadbb .ColorSpace =_aadbb ._dbcab .ToPdfObject ();};
_gbdad .SetIfNotNil ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065",_aadbb .ColorSpace );_gbdad .SetIfNotNil ("\u0050a\u0074\u0074\u0065\u0072\u006e",_aadbb .Pattern );_gbdad .SetIfNotNil ("\u0053h\u0061\u0064\u0069\u006e\u0067",_aadbb .Shading );
_gbdad .SetIfNotNil ("\u0058O\u0062\u006a\u0065\u0063\u0074",_aadbb .XObject );_gbdad .SetIfNotNil ("\u0046\u006f\u006e\u0074",_aadbb .Font );_gbdad .SetIfNotNil ("\u0050r\u006f\u0063\u0053\u0065\u0074",_aadbb .ProcSet );_gbdad .SetIfNotNil ("\u0050\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073",_aadbb .Properties );
return _gbdad ;};

// NewXObjectImage returns a new XObjectImage.
func NewXObjectImage ()*XObjectImage {_gbfcde :=&XObjectImage {};_eccae :=&_bf .PdfObjectStream {};_eccae .PdfObjectDictionary =_bf .MakeDict ();_gbfcde ._bccdb =_eccae ;return _gbfcde ;};

// NewPdfColorLab returns a new Lab color.
func NewPdfColorLab (l ,a ,b float64 )*PdfColorLab {_fdde :=PdfColorLab {l ,a ,b };return &_fdde };

// ImageToRGB returns the passed in image. Method exists in order to satisfy
// the PdfColorspace interface.
func (_fecde *PdfColorspaceDeviceRGB )ImageToRGB (img Image )(Image ,error ){return img ,nil };func _bcegce ()string {_ggeae .Lock ();defer _ggeae .Unlock ();return _bfaacc };

// ToPdfObject implements interface PdfModel.
func (_cda *PdfActionLaunch )ToPdfObject ()_bf .PdfObject {_cda .PdfAction .ToPdfObject ();_gfd :=_cda ._fda ;_bb :=_gfd .PdfObject .(*_bf .PdfObjectDictionary );_bb .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeLaunch )));if _cda .F !=nil {_bb .Set ("\u0046",_cda .F .ToPdfObject ());
};_bb .SetIfNotNil ("\u0057\u0069\u006e",_cda .Win );_bb .SetIfNotNil ("\u004d\u0061\u0063",_cda .Mac );_bb .SetIfNotNil ("\u0055\u006e\u0069\u0078",_cda .Unix );_bb .SetIfNotNil ("\u004ee\u0077\u0057\u0069\u006e\u0064\u006fw",_cda .NewWindow );return _gfd ;
};

// ToPdfObject implements interface PdfModel.
func (_egda *PdfAnnotationWidget )ToPdfObject ()_bf .PdfObject {_egda .PdfAnnotation .ToPdfObject ();_caa :=_egda ._cdaf ;_afgdc :=_caa .PdfObject .(*_bf .PdfObjectDictionary );if _egda ._ceff {return _caa ;};_egda ._ceff =true ;_afgdc .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0057\u0069\u0064\u0067\u0065\u0074"));
_afgdc .SetIfNotNil ("\u0048",_egda .H );_afgdc .SetIfNotNil ("\u004d\u004b",_egda .MK );_afgdc .SetIfNotNil ("\u0041",_egda .A );_afgdc .SetIfNotNil ("\u0041\u0041",_egda .AA );_afgdc .SetIfNotNil ("\u0042\u0053",_egda .BS );_fbdb :=_egda .Parent ;if _egda ._adf !=nil {if _egda ._adf ._fgcdf ==_egda ._cdaf {_egda ._adf .ToPdfObject ();
};_fbdb =_egda ._adf .GetContainingPdfObject ();};if _fbdb !=_caa {_afgdc .SetIfNotNil ("\u0050\u0061\u0072\u0065\u006e\u0074",_fbdb );};_egda ._ceff =false ;return _caa ;};

// HasXObjectByName checks if an XObject with a specified keyName is defined.
func (_baaee *PdfPageResources )HasXObjectByName (keyName _bf .PdfObjectName )bool {_fbec ,_ :=_baaee .GetXObjectByName (keyName );return _fbec !=nil ;};

// ToPdfObject converts colorspace to a PDF object. [/Indexed base hival lookup]
func (_gdbd *PdfColorspaceSpecialIndexed )ToPdfObject ()_bf .PdfObject {_eabfa :=_bf .MakeArray (_bf .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"));_eabfa .Append (_gdbd .Base .ToPdfObject ());_eabfa .Append (_bf .MakeInteger (int64 (_gdbd .HiVal )));
_eabfa .Append (_gdbd .Lookup );if _gdbd ._gbfc !=nil {_gdbd ._gbfc .PdfObject =_eabfa ;return _gdbd ._gbfc ;};return _eabfa ;};

// SetOpenAction sets the OpenAction in the PDF catalog.
// The value shall be either an array defining a destination (12.3.2 "Destinations" PDF32000_2008),
// or an action dictionary representing an action (12.6 "Actions" PDF32000_2008).
func (_dcceb *PdfWriter )SetOpenAction (dest _bf .PdfObject )error {if dest ==nil ||_bf .IsNullObject (dest ){return nil ;};_dcceb ._cecba .Set ("\u004f\u0070\u0065\u006e\u0041\u0063\u0074\u0069\u006f\u006e",dest );return _dcceb .addObjects (dest );};

// ReaderOpts defines options for creating PdfReader instances.
type ReaderOpts struct{

// Password password of the PDF file encryption.
// Default: empty ("").
Password string ;

// LazyLoad set if the PDF file would be loaded using lazy-loading mode.
// Default: true.
LazyLoad bool ;

// ComplianceMode set if parsed PDF file should contain meta information for the verifiers of the compliance standards like PDF/A.
ComplianceMode bool ;};

// LTV represents an LTV (Long-Term Validation) client. It is used to LTV
// enable signatures by adding validation and revocation data (certificate,
// OCSP and CRL information) to the DSS dictionary of a PDF document.
//
// LTV is added through the DSS by:
// - Adding certificates, OCSP and CRL information in the global scope of the
//   DSS. The global data is used for validating any of the signatures present
//   in the document.
// - Adding certificates, OCSP and CRL information for a single signature,
//   through an entry in the VRI dictionary of the DSS. The added data is used
//   for validating that particular signature only. This is the recommended
//   method for adding validation data for a signature. However, this is not
//   is not possible in the same revision the signature is applied. Validation
//   data for a signature is added based on the Contents entry of the signature,
//   which is known only after the revision is written. Even if the Contents
//   are known (e.g. when signing externally), updating the DSS at that point
//   would invalidate the calculated signature. As a result, if adding LTV
//   in the same revision is a requirement, use the first method.
//   See LTV.EnableChain.
// The client applies both methods, when possible.
//
// If `LTV.SkipExisting` is set to true (the default), validations are
// not added for signatures which are already present in the VRI entry of the
// document's DSS dictionary.
type LTV struct{

// CertClient is the client used to retrieve certificates.
CertClient *_fag .CertClient ;

// OCSPClient is the client used to retrieve OCSP validation information.
OCSPClient *_fag .OCSPClient ;

// CRLClient is the client used to retrieve CRL validation information.
CRLClient *_fag .CRLClient ;

// SkipExisting specifies whether existing signature validations
// should be skipped.
SkipExisting bool ;_ceaaf *PdfAppender ;_gcgg *DSS ;};

// PdfAnnotationFreeText represents FreeText annotations.
// (Section 12.5.6.6).
type PdfAnnotationFreeText struct{*PdfAnnotation ;*PdfAnnotationMarkup ;DA _bf .PdfObject ;Q _bf .PdfObject ;RC _bf .PdfObject ;DS _bf .PdfObject ;CL _bf .PdfObject ;IT _bf .PdfObject ;BE _bf .PdfObject ;RD _bf .PdfObject ;BS _bf .PdfObject ;LE _bf .PdfObject ;
};

// String returns a human readable description of `fontfile`.
func (_ggef *fontFile )String ()string {_fegfa :="\u005b\u004e\u006f\u006e\u0065\u005d";if _ggef ._bdbe !=nil {_fegfa =_ggef ._bdbe .String ();};return _af .Sprintf ("\u0046O\u004e\u0054\u0046\u0049\u004c\u0045\u007b\u0025\u0023\u0071\u0020e\u006e\u0063\u006f\u0064\u0065\u0072\u003d\u0025\u0073\u007d",_ggef ._cgbb ,_fegfa );
};

// GetRuneMetrics returns the char metrics for a rune.
// TODO(peterwilliams97) There is nothing callers can do if no CharMetrics are found so we might as
//                       well give them 0 width. There is no need for the bool return.
func (_dedae *PdfFont )GetRuneMetrics (r rune )(CharMetrics ,bool ){_acff :=_dedae .actualFont ();if _acff ==nil {_bc .Log .Debug ("ER\u0052\u004fR\u003a\u0020\u0047\u0065\u0074\u0047\u006c\u0079\u0070h\u0043\u0068\u0061\u0072\u004d\u0065\u0074\u0072\u0069\u0063\u0073\u0020\u004e\u006f\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0065\u0064\u0020f\u006fr\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079p\u0065=\u0025\u0023T",_dedae ._cacce );
return _eb .CharMetrics {},false ;};if _cdbc ,_deac :=_acff .GetRuneMetrics (r );_deac {return _cdbc ,true ;};if _acffg ,_abge :=_dedae .GetFontDescriptor ();_abge ==nil &&_acffg !=nil {return _eb .CharMetrics {Wx :_acffg ._dbdgeb },true ;};_bc .Log .Debug ("\u0047\u0065\u0074\u0047\u006c\u0079\u0070h\u0043\u0068\u0061r\u004d\u0065\u0074\u0072i\u0063\u0073\u003a\u0020\u004e\u006f\u0020\u006d\u0065\u0074\u0072\u0069\u0063\u0073\u0020\u0066\u006f\u0072\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_dedae );
return _eb .CharMetrics {},false ;};

// ToWriter creates a new writer from the current reader, based on the specified options.
// If no options are provided, all reader properties are copied to the writer.
func (_abgfd *PdfReader )ToWriter (opts *ReaderToWriterOpts )(*PdfWriter ,error ){_fecaa :=NewPdfWriter ();if opts ==nil {opts =&ReaderToWriterOpts {};};_ffdb ,_cbff :=_abgfd .GetNumPages ();if _cbff !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbff );
return nil ,_cbff ;};for _cfgab :=1;_cfgab <=_ffdb ;_cfgab ++{_bbdag ,_fgbff :=_abgfd .GetPage (_cfgab );if _fgbff !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fgbff );return nil ,_fgbff ;};if opts .PageProcessCallback !=nil {_fgbff =opts .PageProcessCallback (_cfgab ,_bbdag );
if _fgbff !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fgbff );return nil ,_fgbff ;};}else if opts .PageCallback !=nil {opts .PageCallback (_cfgab ,_bbdag );};_fgbff =_fecaa .AddPage (_bbdag );if _fgbff !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fgbff );
return nil ,_fgbff ;};};_fecaa ._abccg =_abgfd .PdfVersion ();if !opts .SkipInfo {_fadba ,_dggaf :=_abgfd .GetPdfInfo ();if _dggaf !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dggaf );}else {_fecaa ._efddb .PdfObject =_fadba .ToPdfObject ();
};};if !opts .SkipMetadata {if _agaebd :=_abgfd ._dbaea .Get ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061");_agaebd !=nil {if _cfegg :=_fecaa .SetCatalogMetadata (_agaebd );_cfegg !=nil {return nil ,_cfegg ;};};};if !opts .SkipAcroForm {_cabb :=_fecaa .SetForms (_abgfd .AcroForm );
if _cabb !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cabb );return nil ,_cabb ;};};if !opts .SkipOutlines {_fecaa .AddOutlineTree (_abgfd .GetOutlineTree ());};if !opts .SkipOCProperties {_fcda ,_dcgee :=_abgfd .GetOCProperties ();
if _dcgee !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dcgee );}else {_dcgee =_fecaa .SetOCProperties (_fcda );if _dcgee !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dcgee );};};};if !opts .SkipPageLabels {_fdafa ,_bfaac :=_abgfd .GetPageLabels ();
if _bfaac !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_bfaac );}else {_bfaac =_fecaa .SetPageLabels (_fdafa );if _bfaac !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_bfaac );};};};if !opts .SkipNamedDests {_bgbee ,_fabdf :=_abgfd .GetNamedDestinations ();
if _fabdf !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fabdf );}else {_fabdf =_fecaa .SetNamedDestinations (_bgbee );if _fabdf !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fabdf );};};};if !opts .SkipNameDictionary {_fdddf ,_cfcfb :=_abgfd .GetNameDictionary ();
if _cfcfb !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cfcfb );}else {_cfcfb =_fecaa .SetNameDictionary (_fdddf );if _cfcfb !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cfcfb );};};};if !opts .SkipRotation &&_abgfd .Rotate !=nil {if _ggccg :=_fecaa .SetRotation (*_abgfd .Rotate );
_ggccg !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ggccg );};};return &_fecaa ,nil ;};

// PdfSignatureReference represents a PDF signature reference dictionary and is used for signing via form signature fields.
// (Section 12.8.1, Table 253 - Entries in a signature reference dictionary p. 469 in PDF32000_2008).
type PdfSignatureReference struct{_fabfb *_bf .PdfObjectDictionary ;Type *_bf .PdfObjectName ;TransformMethod *_bf .PdfObjectName ;TransformParams _bf .PdfObject ;Data _bf .PdfObject ;DigestMethod *_bf .PdfObjectName ;};

// ToOutlineTree returns a low level PdfOutlineTreeNode object, based on
// the current instance.
func (_fafbg *Outline )ToOutlineTree ()*PdfOutlineTreeNode {return &_fafbg .ToPdfOutline ().PdfOutlineTreeNode ;};

// NewPdfAnnotationText returns a new text annotation.
func NewPdfAnnotationText ()*PdfAnnotationText {_ffbb :=NewPdfAnnotation ();_agd :=&PdfAnnotationText {};_agd .PdfAnnotation =_ffbb ;_agd .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_ffbb .SetContext (_agd );return _agd ;};

// PageFromIndirectObject returns the PdfPage and page number for a given indirect object.
func (_eefgd *PdfReader )PageFromIndirectObject (ind *_bf .PdfIndirectObject )(*PdfPage ,int ,error ){if len (_eefgd .PageList )!=len (_eefgd ._ggdg ){return nil ,0,_eff .New ("\u0070\u0061\u0067\u0065\u0020\u006c\u0069\u0073\u0074\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};for _dccd ,_agadg :=range _eefgd ._ggdg {if _agadg ==ind {return _eefgd .PageList [_dccd ],_dccd +1,nil ;};};return nil ,0,_eff .New ("\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");};

// SetPdfProducer sets the Producer attribute of the output PDF.
func SetPdfProducer (producer string ){_ggeae .Lock ();defer _ggeae .Unlock ();_cfbed =producer };func (_cddef *PdfReader )loadOutlines ()(*PdfOutlineTreeNode ,error ){if _cddef ._gafdb .GetCrypter ()!=nil &&!_cddef ._gafdb .IsAuthenticated (){return nil ,_af .Errorf ("\u0066\u0069\u006ce\u0020\u006e\u0065\u0065d\u0020\u0074\u006f\u0020\u0062\u0065\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");
};_abdfd :=_cddef ._dbaea ;_cgaeeg :=_abdfd .Get ("\u004f\u0075\u0074\u006c\u0069\u006e\u0065\u0073");if _cgaeeg ==nil {return nil ,nil ;};_bc .Log .Trace ("\u002d\u0048\u0061\u0073\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065\u0073");_ebada :=_bf .ResolveReference (_cgaeeg );
_bc .Log .Trace ("\u004f\u0075t\u006c\u0069\u006ee\u0020\u0072\u006f\u006f\u0074\u003a\u0020\u0025\u0076",_ebada );if _cgada :=_bf .IsNullObject (_ebada );_cgada {_bc .Log .Trace ("\u004f\u0075\u0074li\u006e\u0065\u0020\u0072\u006f\u006f\u0074\u0020\u0069s\u0020n\u0075l\u006c \u002d\u0020\u006e\u006f\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065\u0073");
return nil ,nil ;};_afefg ,_aagce :=_ebada .(*_bf .PdfIndirectObject );if !_aagce {if _ ,_begdb :=_bf .GetDict (_ebada );!_begdb {_bc .Log .Debug ("\u0049\u006e\u0076a\u006c\u0069\u0064\u0020o\u0075\u0074\u006c\u0069\u006e\u0065\u0020r\u006f\u006f\u0074\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
return nil ,nil ;};_bc .Log .Debug ("\u004f\u0075t\u006c\u0069\u006e\u0065\u0020r\u006f\u006f\u0074\u0020\u0069s\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u002e\u0020\u0053\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
_afefg =_bf .MakeIndirectObject (_ebada );};_eafcg ,_aagce :=_afefg .PdfObject .(*_bf .PdfObjectDictionary );if !_aagce {return nil ,_eff .New ("\u006f\u0075\u0074\u006c\u0069n\u0065\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072y");
};_bc .Log .Trace ("O\u0075\u0074\u006c\u0069ne\u0020r\u006f\u006f\u0074\u0020\u0064i\u0063\u0074\u003a\u0020\u0025\u0076",_eafcg );_dgabb ,_ ,_addae :=_cddef .buildOutlineTree (_afefg ,nil ,nil ,nil );if _addae !=nil {return nil ,_addae ;};_bc .Log .Trace ("\u0052\u0065\u0073\u0075\u006c\u0074\u0069\u006e\u0067\u0020\u006fu\u0074\u006c\u0069\u006e\u0065\u0020\u0074\u0072\u0065\u0065:\u0020\u0025\u0076",_dgabb );
return _dgabb ,nil ;};func (_cdfa *DSS )addOCSPs (_bffebc [][]byte )([]*_bf .PdfObjectStream ,error ){return _cdfa .add (&_cdfa .OCSPs ,_cdfa ._eabfad ,_bffebc );};

// NewReaderForText makes a new PdfReader for an input PDF content string. For use in testing.
func NewReaderForText (txt string )*PdfReader {return &PdfReader {_eddf :map[_bf .PdfObject ]struct{}{},_fgac :_bbebd (),_gafdb :_bf .NewParserFromString (txt )};};func (_gfdda *PdfPage )getParentResources ()(*PdfPageResources ,error ){_cbee :=_gfdda .Parent ;
for _cbee !=nil {_affb ,_cfded :=_bf .GetDict (_cbee );if !_cfded {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0070\u0061\u0072\u0065\u006e\u0074\u0020n\u006f\u0064\u0065");return nil ,_eff .New ("i\u006e\u0076\u0061\u006cid\u0020p\u0061\u0072\u0065\u006e\u0074 \u006f\u0062\u006a\u0065\u0063\u0074");
};if _gcce :=_affb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s");_gcce !=nil {_gdea ,_caaeb :=_bf .GetDict (_gcce );if !_caaeb {return nil ,_eff .New ("i\u006e\u0076\u0061\u006cid\u0020r\u0065\u0073\u006f\u0075\u0072c\u0065\u0020\u0064\u0069\u0063\u0074");
};_fecb ,_dcbg :=NewPdfPageResourcesFromDict (_gdea );if _dcbg !=nil {return nil ,_dcbg ;};return _fecb ,nil ;};_cbee =_affb .Get ("\u0050\u0061\u0072\u0065\u006e\u0074");};return nil ,nil ;};

// GetCharMetrics returns the character metrics for the specified character code.  A bool flag is
// returned to indicate whether or not the entry was found in the glyph to charcode mapping.
// How it works:
//  1) Return a value the /Widths array (charWidths) if there is one.
//  2) If the font has the same name as a standard 14 font then return width=250.
//  3) Otherwise return no match and let the caller substitute a default.
func (_gdfd pdfFontSimple )GetCharMetrics (code _faf .CharCode )(_eb .CharMetrics ,bool ){if _fbcg ,_adgcc :=_gdfd ._fabb [code ];_adgcc {return _eb .CharMetrics {Wx :_fbcg },true ;};if _eb .IsStdFont (_eb .StdFontName (_gdfd ._adccf )){return _eb .CharMetrics {Wx :250},true ;
};return _eb .CharMetrics {},false ;};func _dcgfc (_adeff _bf .PdfObject )(*PdfFunctionType2 ,error ){_fafca :=&PdfFunctionType2 {};var _bgdb *_bf .PdfObjectDictionary ;if _cfaeg ,_acfcd :=_adeff .(*_bf .PdfIndirectObject );_acfcd {_gecd ,_dbbg :=_cfaeg .PdfObject .(*_bf .PdfObjectDictionary );
if !_dbbg {return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fafca ._afceg =_cfaeg ;_bgdb =_gecd ;}else if _dggce ,_bbbeb :=_adeff .(*_bf .PdfObjectDictionary );_bbbeb {_bgdb =_dggce ;}else {return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
};_bc .Log .Trace ("\u0046U\u004e\u0043\u0032\u003a\u0020\u0025s",_bgdb .String ());_bccgb ,_gfef :=_bf .TraceToDirectObject (_bgdb .Get ("\u0044\u006f\u006d\u0061\u0069\u006e")).(*_bf .PdfObjectArray );if !_gfef {_bc .Log .Error ("D\u006fm\u0061\u0069\u006e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063\u0069fi\u0065\u0064");
return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if _bccgb .Len ()< 0||_bccgb .Len ()%2!=0{_bc .Log .Error ("D\u006fm\u0061\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u0069\u006e\u0076al\u0069\u0064");
return nil ,_eff .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0064\u006f\u006da\u0069\u006e\u0020\u0072an\u0067\u0065");};_deedf ,_efagc :=_bccgb .ToFloat64Array ();if _efagc !=nil {return nil ,_efagc ;};_fafca .Domain =_deedf ;_bccgb ,_gfef =_bf .TraceToDirectObject (_bgdb .Get ("\u0052\u0061\u006eg\u0065")).(*_bf .PdfObjectArray );
if _gfef {if _bccgb .Len ()< 0||_bccgb .Len ()%2!=0{return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");};_fdfec ,_cddfff :=_bccgb .ToFloat64Array ();if _cddfff !=nil {return nil ,_cddfff ;};_fafca .Range =_fdfec ;
};_bccgb ,_gfef =_bf .TraceToDirectObject (_bgdb .Get ("\u0043\u0030")).(*_bf .PdfObjectArray );if _gfef {_ffadd ,_dffc :=_bccgb .ToFloat64Array ();if _dffc !=nil {return nil ,_dffc ;};_fafca .C0 =_ffadd ;};_bccgb ,_gfef =_bf .TraceToDirectObject (_bgdb .Get ("\u0043\u0031")).(*_bf .PdfObjectArray );
if _gfef {_adge ,_accd :=_bccgb .ToFloat64Array ();if _accd !=nil {return nil ,_accd ;};_fafca .C1 =_adge ;};if len (_fafca .C0 )!=len (_fafca .C1 ){_bc .Log .Error ("\u0043\u0030\u0020\u0061nd\u0020\u0043\u0031\u0020\u006e\u006f\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0069n\u0067");
return nil ,_bf .ErrRangeError ;};N ,_efagc :=_bf .GetNumberAsFloat (_bf .TraceToDirectObject (_bgdb .Get ("\u004e")));if _efagc !=nil {_bc .Log .Error ("\u004e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020o\u0072\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u002c\u0020\u0064\u0069\u0063\u0074\u003a\u0020\u0025\u0073",_bgdb .String ());
return nil ,_efagc ;};_fafca .N =N ;return _fafca ,nil ;};func _faafd ()_g .Time {_ggeae .Lock ();defer _ggeae .Unlock ();return _gfacae };func (_dfc *PdfReader )newPdfAnnotationMarkupFromDict (_ffed *_bf .PdfObjectDictionary )(*PdfAnnotationMarkup ,error ){_gge :=&PdfAnnotationMarkup {};
if _dge :=_ffed .Get ("\u0054");_dge !=nil {_gge .T =_dge ;};if _cdfb :=_ffed .Get ("\u0050\u006f\u0070u\u0070");_cdfb !=nil {_dfb ,_adg :=_cdfb .(*_bf .PdfIndirectObject );if !_adg {if _ ,_fade :=_cdfb .(*_bf .PdfObjectNull );!_fade {return nil ,_eff .New ("p\u006f\u0070\u0075\u0070\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0070\u006f\u0069\u006e\u0074\u0020t\u006f\u0020\u0061\u006e\u0020\u0069\u006e\u0064\u0069\u0072ec\u0074\u0020\u006fb\u006ae\u0063\u0074");
};}else {_dag ,_aeg :=_dfc .newPdfAnnotationFromIndirectObject (_dfb );if _aeg !=nil {return nil ,_aeg ;};if _dag !=nil {_egf ,_edda :=_dag ._fgc .(*PdfAnnotationPopup );if !_edda {return nil ,_eff .New ("\u006f\u0062\u006ae\u0063\u0074\u0020\u006e\u006f\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0072\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0061\u0020\u0070\u006f\u0070\u0075\u0070\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e");
};_gge .Popup =_egf ;};};};if _ffdf :=_ffed .Get ("\u0043\u0041");_ffdf !=nil {_gge .CA =_ffdf ;};if _bcaff :=_ffed .Get ("\u0052\u0043");_bcaff !=nil {_gge .RC =_bcaff ;};if _agea :=_ffed .Get ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065");
_agea !=nil {_gge .CreationDate =_agea ;};if _gddc :=_ffed .Get ("\u0049\u0052\u0054");_gddc !=nil {_gge .IRT =_gddc ;};if _gcd :=_ffed .Get ("\u0053\u0075\u0062\u006a");_gcd !=nil {_gge .Subj =_gcd ;};if _ddb :=_ffed .Get ("\u0052\u0054");_ddb !=nil {_gge .RT =_ddb ;
};if _cccg :=_ffed .Get ("\u0049\u0054");_cccg !=nil {_gge .IT =_cccg ;};if _gadg :=_ffed .Get ("\u0045\u0078\u0044\u0061\u0074\u0061");_gadg !=nil {_gge .ExData =_gadg ;};return _gge ,nil ;};

// ToPdfObject converts date to a PDF string object.
func (_abcdb *PdfDate )ToPdfObject ()_bf .PdfObject {_gdba :=_af .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_abcdb ._ddgda ,_abcdb ._eeaeb ,_abcdb ._fcdcc ,_abcdb ._bbbc ,_abcdb ._gddgc ,_abcdb ._bdgge ,_abcdb ._fdffd ,_abcdb ._bgfda ,_abcdb ._egbag );
return _bf .MakeString (_gdba );};

// GetNumComponents returns the number of color components of the colorspace device.
// Returns 1 for a CalGray device.
func (_ddec *PdfColorspaceCalGray )GetNumComponents ()int {return 1};

// NewPdfAnnotationSound returns a new sound annotation.
func NewPdfAnnotationSound ()*PdfAnnotationSound {_gece :=NewPdfAnnotation ();_gadc :=&PdfAnnotationSound {};_gadc .PdfAnnotation =_gece ;_gadc .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_gece .SetContext (_gadc );return _gadc ;};func (_gba *PdfReader )newPdfAnnotationTrapNetFromDict (_daa *_bf .PdfObjectDictionary )(*PdfAnnotationTrapNet ,error ){_abfd :=PdfAnnotationTrapNet {};
return &_abfd ,nil ;};

// BorderEffect represents a border effect (Table 167 p. 395).
type BorderEffect int ;

// GetCharMetrics returns the char metrics for character code `code`.
func (_affgeg pdfFontType3 )GetCharMetrics (code _faf .CharCode )(_eb .CharMetrics ,bool ){if _cfgae ,_cgeg :=_affgeg ._cbgba [code ];_cgeg {return _eb .CharMetrics {Wx :_cfgae },true ;};if _eb .IsStdFont (_eb .StdFontName (_affgeg ._adccf )){return _eb .CharMetrics {Wx :250},true ;
};return _eb .CharMetrics {},false ;};func (_ecb *PdfReader )newPdfActionGotoFromDict (_gaaf *_bf .PdfObjectDictionary )(*PdfActionGoTo ,error ){return &PdfActionGoTo {D :_gaaf .Get ("\u0044")},nil ;};

// SubsetRegistered subsets the font to only the glyphs that have been registered by the encoder.
// NOTE: This only works on fonts that support subsetting. For unsupported fonts this is a no-op, although a debug
//   message is emitted.  Currently supported fonts are embedded Truetype CID fonts (type 0).
// NOTE: Make sure to call this soon before writing (once all needed runes have been registered).
// If using package creator, use its EnableFontSubsetting method instead.
func (_edagf *PdfFont )SubsetRegistered ()error {switch _eadb :=_edagf ._cacce .(type ){case *pdfFontType0 :_ccff :=_eadb .subsetRegistered ();if _ccff !=nil {_bc .Log .Debug ("\u0053\u0075b\u0073\u0065\u0074 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_ccff );
return _ccff ;};if _eadb ._edabb !=nil {if _eadb ._aecc !=nil {_eadb ._aecc .ToPdfObject ();};_eadb .ToPdfObject ();};default:_bc .Log .Debug ("F\u006f\u006e\u0074\u0020\u0025\u0054 \u0064\u006f\u0065\u0073\u0020\u006eo\u0074\u0020\u0073\u0075\u0070\u0070\u006fr\u0074\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069n\u0067",_eadb );
};return nil ;};

// SetDocInfo sets the document /Info metadata.
// This will overwrite any globally declared document info.
func (_fecd *PdfAppender )SetDocInfo (info *PdfInfo ){_fecd ._bgd =info };

// ToPdfObject returns the PdfFontDescriptor as a PDF dictionary inside an indirect object.
func (_cace *PdfFontDescriptor )ToPdfObject ()_bf .PdfObject {_faaeg :=_bf .MakeDict ();if _cace ._cebg ==nil {_cace ._cebg =&_bf .PdfIndirectObject {};};_cace ._cebg .PdfObject =_faaeg ;_faaeg .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0046\u006f\u006e\u0074\u0044\u0065\u0073\u0063\u0072i\u0070\u0074\u006f\u0072"));
if _cace .FontName !=nil {_faaeg .Set ("\u0046\u006f\u006e\u0074\u004e\u0061\u006d\u0065",_cace .FontName );};if _cace .FontFamily !=nil {_faaeg .Set ("\u0046\u006f\u006e\u0074\u0046\u0061\u006d\u0069\u006c\u0079",_cace .FontFamily );};if _cace .FontStretch !=nil {_faaeg .Set ("F\u006f\u006e\u0074\u0053\u0074\u0072\u0065\u0074\u0063\u0068",_cace .FontStretch );
};if _cace .FontWeight !=nil {_faaeg .Set ("\u0046\u006f\u006e\u0074\u0057\u0065\u0069\u0067\u0068\u0074",_cace .FontWeight );};if _cace .Flags !=nil {_faaeg .Set ("\u0046\u006c\u0061g\u0073",_cace .Flags );};if _cace .FontBBox !=nil {_faaeg .Set ("\u0046\u006f\u006e\u0074\u0042\u0042\u006f\u0078",_cace .FontBBox );
};if _cace .ItalicAngle !=nil {_faaeg .Set ("I\u0074\u0061\u006c\u0069\u0063\u0041\u006e\u0067\u006c\u0065",_cace .ItalicAngle );};if _cace .Ascent !=nil {_faaeg .Set ("\u0041\u0073\u0063\u0065\u006e\u0074",_cace .Ascent );};if _cace .Descent !=nil {_faaeg .Set ("\u0044e\u0073\u0063\u0065\u006e\u0074",_cace .Descent );
};if _cace .Leading !=nil {_faaeg .Set ("\u004ce\u0061\u0064\u0069\u006e\u0067",_cace .Leading );};if _cace .CapHeight !=nil {_faaeg .Set ("\u0043a\u0070\u0048\u0065\u0069\u0067\u0068t",_cace .CapHeight );};if _cace .XHeight !=nil {_faaeg .Set ("\u0058H\u0065\u0069\u0067\u0068\u0074",_cace .XHeight );
};if _cace .StemV !=nil {_faaeg .Set ("\u0053\u0074\u0065m\u0056",_cace .StemV );};if _cace .StemH !=nil {_faaeg .Set ("\u0053\u0074\u0065m\u0048",_cace .StemH );};if _cace .AvgWidth !=nil {_faaeg .Set ("\u0041\u0076\u0067\u0057\u0069\u0064\u0074\u0068",_cace .AvgWidth );
};if _cace .MaxWidth !=nil {_faaeg .Set ("\u004d\u0061\u0078\u0057\u0069\u0064\u0074\u0068",_cace .MaxWidth );};if _cace .MissingWidth !=nil {_faaeg .Set ("\u004d\u0069\u0073s\u0069\u006e\u0067\u0057\u0069\u0064\u0074\u0068",_cace .MissingWidth );};if _cace .FontFile !=nil {_faaeg .Set ("\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065",_cace .FontFile );
};if _cace .FontFile2 !=nil {_faaeg .Set ("\u0046o\u006e\u0074\u0046\u0069\u006c\u00652",_cace .FontFile2 );};if _cace .FontFile3 !=nil {_faaeg .Set ("\u0046o\u006e\u0074\u0046\u0069\u006c\u00653",_cace .FontFile3 );};if _cace .CharSet !=nil {_faaeg .Set ("\u0043h\u0061\u0072\u0053\u0065\u0074",_cace .CharSet );
};if _cace .Style !=nil {_faaeg .Set ("\u0046\u006f\u006e\u0074\u004e\u0061\u006d\u0065",_cace .FontName );};if _cace .Lang !=nil {_faaeg .Set ("\u004c\u0061\u006e\u0067",_cace .Lang );};if _cace .FD !=nil {_faaeg .Set ("\u0046\u0044",_cace .FD );};if _cace .CIDSet !=nil {_faaeg .Set ("\u0043\u0049\u0044\u0053\u0065\u0074",_cace .CIDSet );
};return _cace ._cebg ;};func (_bdgac *PdfReader )loadStructure ()error {if _bdgac ._gafdb .GetCrypter ()!=nil &&!_bdgac ._gafdb .IsAuthenticated (){return _af .Errorf ("\u0066\u0069\u006ce\u0020\u006e\u0065\u0065d\u0020\u0074\u006f\u0020\u0062\u0065\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");
};_bfgfc :=_bdgac ._gafdb .GetTrailer ();if _bfgfc ==nil {return _af .Errorf ("\u006di\u0073s\u0069\u006e\u0067\u0020\u0074\u0072\u0061\u0069\u006c\u0065\u0072");};_ecegb ,_afggd :=_bfgfc .Get ("\u0052\u006f\u006f\u0074").(*_bf .PdfObjectReference );if !_afggd {return _af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0052\u006f\u006ft\u0020\u0028\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u003a \u0025\u0073\u0029",_bfgfc );
};_egfdd ,_faab :=_bdgac ._gafdb .LookupByReference (*_ecegb );if _faab !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0072\u0065\u0061\u0064\u0020\u0072\u006f\u006f\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u003a\u0020\u0025\u0073",_faab );
return _faab ;};_gdaaa ,_afggd :=_egfdd .(*_bf .PdfIndirectObject );if !_afggd {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u003a\u0020\u0028\u0072\u006f\u006f\u0074\u0020\u0025\u0071\u0029\u0020\u0028\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u0020\u0025\u0073\u0029",_egfdd ,*_bfgfc );
return _eff .New ("\u006di\u0073s\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067");};_gfacf ,_afggd :=(*_gdaaa ).PdfObject .(*_bf .PdfObjectDictionary );if !_afggd {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0061t\u0061\u006c\u006fg\u0020(\u0025\u0073\u0029",_gdaaa .PdfObject );
return _eff .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067");};_bc .Log .Trace ("C\u0061\u0074\u0061\u006c\u006f\u0067\u003a\u0020\u0025\u0073",_gfacf );_dadbf ,_afggd :=_gfacf .Get ("\u0050\u0061\u0067e\u0073").(*_bf .PdfObjectReference );
if !_afggd {return _eff .New ("\u0070\u0061\u0067\u0065\u0073\u0020\u0069\u006e\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0061\u0020\u0072e\u0066\u0065r\u0065\u006e\u0063\u0065");};_ebdbg ,_faab :=_bdgac ._gafdb .LookupByReference (*_dadbf );
if _faab !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020F\u0061\u0069\u006c\u0065\u0064\u0020\u0074\u006f\u0020r\u0065\u0061\u0064 \u0070a\u0067\u0065\u0073");return _faab ;};_gfaab ,_afggd :=_ebdbg .(*_bf .PdfIndirectObject );if !_afggd {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020P\u0061\u0067\u0065\u0073\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u0069n\u0076a\u006c\u0069\u0064");
_bc .Log .Debug ("\u006f\u0070\u003a\u0020\u0025\u0070",_gfaab );return _eff .New ("p\u0061g\u0065\u0073\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0069\u006e\u0076al\u0069\u0064");};_bffcg ,_afggd :=_gfaab .PdfObject .(*_bf .PdfObjectDictionary );if !_afggd {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0050\u0061\u0067\u0065\u0073\u0020\u006f\u0062j\u0065c\u0074\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0028\u0025\u0073\u0029",_gfaab );
return _eff .New ("p\u0061g\u0065\u0073\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0069\u006e\u0076al\u0069\u0064");};_cefecg ,_afggd :=_bf .GetInt (_bffcg .Get ("\u0043\u006f\u0075n\u0074"));if !_afggd {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0050\u0061\u0067\u0065\u0073\u0020\u0063\u006f\u0075\u006e\u0074\u0020\u006fb\u006a\u0065\u0063\u0074\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
return _eff .New ("\u0070\u0061\u0067\u0065s \u0063\u006f\u0075\u006e\u0074\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};if _ ,_afggd =_bf .GetName (_bffcg .Get ("\u0054\u0079\u0070\u0065"));!_afggd {_bc .Log .Debug ("\u0050\u0061\u0067\u0065\u0073\u0020\u0064\u0069\u0063\u0074\u0020T\u0079\u0070\u0065\u0020\u0066\u0069\u0065\u006cd\u0020n\u006f\u0074\u0020\u0073\u0065\u0074\u002e\u0020\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0054\u0079p\u0065\u0020\u0074\u006f\u0020\u0050\u0061\u0067\u0065\u0073\u002e");
_bffcg .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0050\u0061\u0067e\u0073"));};if _fafgf ,_afdg :=_bf .GetInt (_bffcg .Get ("\u0052\u006f\u0074\u0061\u0074\u0065"));_afdg {_gdac :=int64 (*_fafgf );_bdgac .Rotate =&_gdac ;};_bdgac ._bbgaa =_ecegb ;
_bdgac ._dbaea =_gfacf ;_bdgac ._efcfed =_bffcg ;_bdgac ._afece =_gfaab ;_bdgac ._gdebc =int (*_cefecg );_bdgac ._ggdg =[]*_bf .PdfIndirectObject {};_baagb :=map[_bf .PdfObject ]struct{}{};_faab =_bdgac .buildPageList (_gfaab ,nil ,_baagb );if _faab !=nil {return _faab ;
};_bc .Log .Trace ("\u002d\u002d\u002d");_bc .Log .Trace ("\u0054\u004f\u0043");_bc .Log .Trace ("\u0050\u0061\u0067e\u0073");_bc .Log .Trace ("\u0025\u0064\u003a\u0020\u0025\u0073",len (_bdgac ._ggdg ),_bdgac ._ggdg );_bdgac ._bgdac ,_faab =_bdgac .loadOutlines ();
if _faab !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0062\u0075i\u006c\u0064\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065 t\u0072\u0065\u0065 \u0028%\u0073\u0029",_faab );
return _faab ;};_bdgac .AcroForm ,_faab =_bdgac .loadForms ();if _faab !=nil {return _faab ;};_bdgac .DSS ,_faab =_bdgac .loadDSS ();if _faab !=nil {return _faab ;};_bdgac ._eggf ,_faab =_bdgac .loadPerms ();if _faab !=nil {return _faab ;};return nil ;
};

// NewPdfFilespecFromObj creates and returns a new PdfFilespec object.
func NewPdfFilespecFromObj (obj _bf .PdfObject )(*PdfFilespec ,error ){_eacg :=&PdfFilespec {};var _dfda *_bf .PdfObjectDictionary ;if _gfed ,_cgdd :=_bf .GetIndirect (obj );_cgdd {_eacg ._fbbg =_gfed ;_dgfd ,_aeaa :=_bf .GetDict (_gfed .PdfObject );if !_aeaa {_bc .Log .Debug ("\u004f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069c\u0074i\u006f\u006e\u0061\u0072\u0079\u0020\u0074y\u0070\u0065");
return nil ,_bf .ErrTypeError ;};_dfda =_dgfd ;}else if _cdfe ,_ccea :=_bf .GetDict (obj );_ccea {_eacg ._fbbg =_cdfe ;_dfda =_cdfe ;}else {_bc .Log .Debug ("O\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0075\u006e\u0065\u0078\u0070e\u0063\u0074\u0065d\u0020(\u0025\u0054\u0029",obj );
return nil ,_bf .ErrTypeError ;};if _dfda ==nil {_bc .Log .Debug ("\u0044i\u0063t\u0069\u006f\u006e\u0061\u0072y\u0020\u006di\u0073\u0073\u0069\u006e\u0067");return nil ,_eff .New ("\u0064\u0069\u0063t\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};if _ccad :=_dfda .Get ("\u0054\u0079\u0070\u0065");_ccad !=nil {_ddfe ,_afdda :=_ccad .(*_bf .PdfObjectName );if !_afdda {_bc .Log .Trace ("\u0049\u006e\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u0021\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u006f\u0066\u0020\u0054\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u0029\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u004e\u0061m\u0065",_ccad );
}else {if *_ddfe !="\u0046\u0069\u006c\u0065\u0073\u0070\u0065\u0063"{_bc .Log .Trace ("\u0055\u006e\u0073\u0075\u0073\u0070e\u0063\u0074\u0065\u0064\u0020\u0054\u0079\u0070\u0065\u0020\u0021\u003d\u0020F\u0069\u006c\u0065\u0073\u0070\u0065\u0063 \u0028\u0025\u0073\u0029",*_ddfe );
};};};if _gagc :=_dfda .Get ("\u0046\u0053");_gagc !=nil {_eacg .FS =_gagc ;};if _bdcc :=_dfda .Get ("\u0046");_bdcc !=nil {_eacg .F =_bdcc ;};if _dffd :=_dfda .Get ("\u0055\u0046");_dffd !=nil {_eacg .UF =_dffd ;};if _cegb :=_dfda .Get ("\u0044\u004f\u0053");
_cegb !=nil {_eacg .DOS =_cegb ;};if _cceg :=_dfda .Get ("\u004d\u0061\u0063");_cceg !=nil {_eacg .Mac =_cceg ;};if _dafa :=_dfda .Get ("\u0055\u006e\u0069\u0078");_dafa !=nil {_eacg .Unix =_dafa ;};if _aebg :=_dfda .Get ("\u0049\u0044");_aebg !=nil {_eacg .ID =_aebg ;
};if _acgfb :=_dfda .Get ("\u0056");_acgfb !=nil {_eacg .V =_acgfb ;};if _bggf :=_dfda .Get ("\u0045\u0046");_bggf !=nil {_eacg .EF =_bggf ;};if _afffd :=_dfda .Get ("\u0052\u0046");_afffd !=nil {_eacg .RF =_afffd ;};if _acfbb :=_dfda .Get ("\u0044\u0065\u0073\u0063");
_acfbb !=nil {_eacg .Desc =_acfbb ;};if _ebedd :=_dfda .Get ("\u0043\u0049");_ebedd !=nil {_eacg .CI =_ebedd ;};return _eacg ,nil ;};

// WriteToFile writes the Appender output to file specified by path.
func (_cfacg *PdfAppender )WriteToFile (outputPath string )error {_cbbc ,_gbd :=_db .Create (outputPath );if _gbd !=nil {return _gbd ;};defer _cbbc .Close ();return _cfacg .Write (_cbbc );};func (_gfcab *PdfReader )newPdfAnnotationStrikeOut (_dgfc *_bf .PdfObjectDictionary )(*PdfAnnotationStrikeOut ,error ){_geff :=PdfAnnotationStrikeOut {};
_dbce ,_dgge :=_gfcab .newPdfAnnotationMarkupFromDict (_dgfc );if _dgge !=nil {return nil ,_dgge ;};_geff .PdfAnnotationMarkup =_dbce ;_geff .QuadPoints =_dgfc .Get ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073");return &_geff ,nil ;};


// NewPdfOutlineItem returns an initialized PdfOutlineItem.
func NewPdfOutlineItem ()*PdfOutlineItem {_efeaee :=&PdfOutlineItem {_aabdd :_bf .MakeIndirectObject (_bf .MakeDict ())};_efeaee ._bacb =_efeaee ;return _efeaee ;};

// SetAlpha sets the alpha layer for the image.
func (_fbcbb *Image )SetAlpha (alpha []byte ){_fbcbb ._gfegf =alpha };func (_afcfc *LTV )buildCertChain (_gebef ,_dgdg []*_d .Certificate )([]*_d .Certificate ,map[string ]*_d .Certificate ,error ){_bfga :=map[string ]*_d .Certificate {};for _ ,_cecb :=range _gebef {_bfga [_cecb .Subject .CommonName ]=_cecb ;
};_gbegd :=_gebef ;for _ ,_fcgba :=range _dgdg {_gdfad :=_fcgba .Subject .CommonName ;if _ ,_ccbc :=_bfga [_gdfad ];_ccbc {continue ;};_bfga [_gdfad ]=_fcgba ;_gbegd =append (_gbegd ,_fcgba );};if len (_gbegd )==0{return nil ,nil ,ErrSignNoCertificates ;
};var _agafb error ;for _cbeba :=_gbegd [0];_cbeba !=nil &&!_afcfc .CertClient .IsCA (_cbeba );{_egfa ,_caggb :=_bfga [_cbeba .Issuer .CommonName ];if !_caggb {if _egfa ,_agafb =_afcfc .CertClient .GetIssuer (_cbeba );_agafb !=nil {_bc .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043\u006f\u0075\u006cd\u0020\u006e\u006f\u0074\u0020\u0072\u0065tr\u0069\u0065\u0076\u0065 \u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063\u0061te\u0020\u0069s\u0073\u0075\u0065\u0072\u003a\u0020\u0025\u0076",_agafb );
break ;};_bfga [_cbeba .Issuer .CommonName ]=_egfa ;_gbegd =append (_gbegd ,_egfa );};_cbeba =_egfa ;};return _gbegd ,_bfga ,nil ;};func (_ced *PdfReader )newPdfActionGotoEFromDict (_aedc *_bf .PdfObjectDictionary )(*PdfActionGoToE ,error ){_gdd ,_bfa :=_aac (_aedc .Get ("\u0046"));
if _bfa !=nil {return nil ,_bfa ;};return &PdfActionGoToE {D :_aedc .Get ("\u0044"),NewWindow :_aedc .Get ("\u004ee\u0077\u0057\u0069\u006e\u0064\u006fw"),T :_aedc .Get ("\u0054"),F :_gdd },nil ;};

// ToPdfObject returns colorspace in a PDF object format [name stream]
func (_addbb *PdfColorspaceICCBased )ToPdfObject ()_bf .PdfObject {_ddag :=&_bf .PdfObjectArray {};_ddag .Append (_bf .MakeName ("\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064"));var _bbec *_bf .PdfObjectStream ;if _addbb ._gadcf !=nil {_bbec =_addbb ._gadcf ;
}else {_bbec =&_bf .PdfObjectStream {};};_dfed :=_bf .MakeDict ();_dfed .Set ("\u004e",_bf .MakeInteger (int64 (_addbb .N )));if _addbb .Alternate !=nil {_dfed .Set ("\u0041l\u0074\u0065\u0072\u006e\u0061\u0074e",_addbb .Alternate .ToPdfObject ());};if _addbb .Metadata !=nil {_dfed .Set ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061",_addbb .Metadata );
};if _addbb .Range !=nil {var _dbgcb []_bf .PdfObject ;for _ ,_ceegc :=range _addbb .Range {_dbgcb =append (_dbgcb ,_bf .MakeFloat (_ceegc ));};_dfed .Set ("\u0052\u0061\u006eg\u0065",_bf .MakeArray (_dbgcb ...));};_dfed .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_addbb .Data ))));
_bbec .Stream =_addbb .Data ;_bbec .PdfObjectDictionary =_dfed ;_ddag .Append (_bbec );if _addbb ._ecee !=nil {_addbb ._ecee .PdfObject =_ddag ;return _addbb ._ecee ;};return _ddag ;};func (_agbg *PdfReader )newPdfSignatureReferenceFromDict (_gcdgd *_bf .PdfObjectDictionary )(*PdfSignatureReference ,error ){if _cgbgc ,_dgbag :=_agbg ._fgac .GetModelFromPrimitive (_gcdgd ).(*PdfSignatureReference );
_dgbag {return _cgbgc ,nil ;};_cdccg :=&PdfSignatureReference {_fabfb :_gcdgd ,Data :_gcdgd .Get ("\u0044\u0061\u0074\u0061")};var _bfeg bool ;_cdccg .Type ,_ =_bf .GetName (_gcdgd .Get ("\u0054\u0079\u0070\u0065"));_cdccg .TransformMethod ,_bfeg =_bf .GetName (_gcdgd .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u004d\u0065\u0074\u0068\u006f\u0064"));
if !_bfeg {_bc .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0053\u0069g\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0054\u0072\u0061\u006e\u0073\u0066o\u0072\u006dM\u0065\u0074h\u006f\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020in\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0072\u0020m\u0069\u0073\u0073\u0069\u006e\u0067");
return nil ,ErrInvalidAttribute ;};_cdccg .TransformParams ,_ =_bf .GetDict (_gcdgd .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u0050\u0061\u0072\u0061\u006d\u0073"));_cdccg .DigestMethod ,_ =_bf .GetName (_gcdgd .Get ("\u0044\u0069\u0067e\u0073\u0074\u004d\u0065\u0074\u0068\u006f\u0064"));
return _cdccg ,nil ;};

// WatermarkImageOptions contains options for configuring the watermark process.
type WatermarkImageOptions struct{Alpha float64 ;FitToWidth bool ;PreserveAspectRatio bool ;};const (ButtonTypeCheckbox ButtonType =iota ;ButtonTypePush ButtonType =iota ;ButtonTypeRadio ButtonType =iota ;);

// SetSamples convert samples to byte-data and sets for the image.
// NOTE: The method resamples the data and this could lead to high memory usage,
// especially on large images. It should be used only when it is not possible
// to work with the image byte data directly.
func (_cebda *Image )SetSamples (samples []uint32 ){if _cebda .BitsPerComponent < 8{samples =_cebda .samplesAddPadding (samples );};_accgf :=_de .ResampleUint32 (samples ,int (_cebda .BitsPerComponent ),8);_beagg :=make ([]byte ,len (_accgf ));for _gaac ,_becfg :=range _accgf {_beagg [_gaac ]=byte (_becfg );
};_cebda .Data =_beagg ;};

// GetContainingPdfObject implements model.PdfModel interface.
func (_gbecc *PdfOutputIntent )GetContainingPdfObject ()_bf .PdfObject {return _gbecc ._dacca };

// ToPdfObject implements interface PdfModel.
func (_eeb *PdfActionSound )ToPdfObject ()_bf .PdfObject {_eeb .PdfAction .ToPdfObject ();_cee :=_eeb ._fda ;_dbd :=_cee .PdfObject .(*_bf .PdfObjectDictionary );_dbd .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeSound )));_dbd .SetIfNotNil ("\u0053\u006f\u0075n\u0064",_eeb .Sound );
_dbd .SetIfNotNil ("\u0056\u006f\u006c\u0075\u006d\u0065",_eeb .Volume );_dbd .SetIfNotNil ("S\u0079\u006e\u0063\u0068\u0072\u006f\u006e\u006f\u0075\u0073",_eeb .Synchronous );_dbd .SetIfNotNil ("\u0052\u0065\u0070\u0065\u0061\u0074",_eeb .Repeat );_dbd .SetIfNotNil ("\u004d\u0069\u0078",_eeb .Mix );
return _cee ;};

// PdfField contains the common attributes of a form field. The context object contains the specific field data
// which can represent a button, text, choice or signature.
// The PdfField is typically not used directly, but is encapsulated by the more specific field types such as
// PdfFieldButton etc (i.e. the context attribute).
type PdfField struct{_gfbeb PdfModel ;_fgcdf *_bf .PdfIndirectObject ;Parent *PdfField ;Annotations []*PdfAnnotationWidget ;Kids []*PdfField ;FT *_bf .PdfObjectName ;T *_bf .PdfObjectString ;TU *_bf .PdfObjectString ;TM *_bf .PdfObjectString ;Ff *_bf .PdfObjectInteger ;
V _bf .PdfObject ;DV _bf .PdfObject ;AA _bf .PdfObject ;VariableText *VariableText ;};func (_facead *PdfWriter )writeBytes (_eabdgf []byte ){if _facead ._cgebb !=nil {return ;};_fadda ,_bcefb :=_facead ._fddfe .Write (_eabdgf );_facead ._feddc +=int64 (_fadda );
_facead ._cgebb =_bcefb ;};func _cegc (_bagge _bf .PdfObject )(*PdfPattern ,error ){_dffbe :=&PdfPattern {};var _dceg *_bf .PdfObjectDictionary ;if _acbfa ,_cedd :=_bf .GetIndirect (_bagge );_cedd {_dffbe ._bfcdg =_acbfa ;_ggcc ,_aggg :=_acbfa .PdfObject .(*_bf .PdfObjectDictionary );
if !_aggg {_bc .Log .Debug ("\u0050\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006ae\u0063\u0074\u0020\u006e\u006f\u0074\u0020\u0063\u006fn\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079\u0020\u0028g\u006f\u0074\u0020%\u0054\u0029",_acbfa .PdfObject );
return nil ,_bf .ErrTypeError ;};_dceg =_ggcc ;}else if _bafgg ,_cafg :=_bf .GetStream (_bagge );_cafg {_dffbe ._bfcdg =_bafgg ;_dceg =_bafgg .PdfObjectDictionary ;}else {_bc .Log .Debug ("\u0050a\u0074\u0074e\u0072\u006e\u0020\u006eo\u0074\u0020\u0061n\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074 o\u0062\u006a\u0065c\u0074\u0020o\u0072\u0020\u0073\u0074\u0072\u0065a\u006d\u002e \u0025\u0054",_bagge );
return nil ,_bf .ErrTypeError ;};_gbfcg :=_dceg .Get ("P\u0061\u0074\u0074\u0065\u0072\u006e\u0054\u0079\u0070\u0065");if _gbfcg ==nil {_bc .Log .Debug ("\u0050\u0064\u0066\u0020\u0050\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069n\u0067\u0020\u0050\u0061\u0074t\u0065\u0072n\u0054\u0079\u0070\u0065");
return nil ,ErrRequiredAttributeMissing ;};_abfb ,_fegfc :=_gbfcg .(*_bf .PdfObjectInteger );if !_fegfc {_bc .Log .Debug ("\u0050\u0061tt\u0065\u0072\u006e \u0074\u0079\u0070\u0065 no\u0074 a\u006e\u0020\u0069\u006e\u0074\u0065\u0067er\u0020\u0028\u0067\u006f\u0074\u0020\u0025T\u0029",_gbfcg );
return nil ,_bf .ErrTypeError ;};if *_abfb !=1&&*_abfb !=2{_bc .Log .Debug ("\u0050\u0061\u0074\u0074e\u0072\u006e\u0020\u0074\u0079\u0070\u0065\u0020\u0021\u003d \u0031/\u0032\u0020\u0028\u0067\u006f\u0074\u0020%\u0064\u0029",*_abfb );return nil ,_bf .ErrRangeError ;
};_dffbe .PatternType =int64 (*_abfb );switch *_abfb {case 1:_fcgfd ,_ececc :=_debgd (_dceg );if _ececc !=nil {return nil ,_ececc ;};_fcgfd .PdfPattern =_dffbe ;_dffbe ._adccfb =_fcgfd ;return _dffbe ,nil ;case 2:_afcge ,_edgf :=_cbcde (_dceg );if _edgf !=nil {return nil ,_edgf ;
};_afcge .PdfPattern =_dffbe ;_dffbe ._adccfb =_afcge ;return _dffbe ,nil ;};return nil ,_eff .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0070\u0061\u0074\u0074\u0065\u0072\u006e");};func _gcfe (_fcfbf *_bf .PdfIndirectObject ,_ddae *_bf .PdfObjectDictionary )(*DSS ,error ){if _fcfbf ==nil {_fcfbf =_bf .MakeIndirectObject (nil );
};_fcfbf .PdfObject =_bf .MakeDict ();_ddef :=map[string ]*VRI {};if _dbdda ,_ceag :=_bf .GetDict (_ddae .Get ("\u0056\u0052\u0049"));_ceag {for _ ,_bafed :=range _dbdda .Keys (){if _gcgc ,_acag :=_bf .GetDict (_dbdda .Get (_bafed ));_acag {_ddef [_gf .ToUpper (_bafed .String ())]=_ecga (_gcgc );
};};};return &DSS {Certs :_decef (_ddae .Get ("\u0043\u0065\u0072t\u0073")),OCSPs :_decef (_ddae .Get ("\u004f\u0043\u0053P\u0073")),CRLs :_decef (_ddae .Get ("\u0043\u0052\u004c\u0073")),VRI :_ddef ,_agagg :_fcfbf },nil ;};

// GetContentStreams returns the content stream as an array of strings.
func (_fgcdcb *PdfPage )GetContentStreams ()([]string ,error ){_bgadda :=_fgcdcb .GetContentStreamObjs ();var _dgdbe []string ;for _ ,_bfge :=range _bgadda {_bgebc ,_geabb :=_egbb (_bfge );if _geabb !=nil {return nil ,_geabb ;};_dgdbe =append (_dgdbe ,_bgebc );
};return _dgdbe ,nil ;};

// ToInteger convert to an integer format.
func (_cegef *PdfColorDeviceRGB )ToInteger (bits int )[3]uint32 {_acgf :=_fg .Pow (2,float64 (bits ))-1;return [3]uint32 {uint32 (_acgf *_cegef .R ()),uint32 (_acgf *_cegef .G ()),uint32 (_acgf *_cegef .B ())};};

// PdfShadingType4 is a Free-form Gouraud-shaded triangle mesh.
type PdfShadingType4 struct{*PdfShading ;BitsPerCoordinate *_bf .PdfObjectInteger ;BitsPerComponent *_bf .PdfObjectInteger ;BitsPerFlag *_bf .PdfObjectInteger ;Decode *_bf .PdfObjectArray ;Function []PdfFunction ;};

// PdfColorspaceLab is a L*, a*, b* 3 component colorspace.
type PdfColorspaceLab struct{WhitePoint []float64 ;BlackPoint []float64 ;Range []float64 ;_bggg *_bf .PdfIndirectObject ;};const (XObjectTypeUndefined XObjectType =iota ;XObjectTypeImage ;XObjectTypeForm ;XObjectTypePS ;XObjectTypeUnknown ;);

// ToPdfObject returns a *PdfIndirectObject containing a *PdfObjectArray representation of the DeviceN colorspace.
// Format: [/DeviceN names alternateSpace tintTransform]
//     or: [/DeviceN names alternateSpace tintTransform attributes]
func (_ccca *PdfColorspaceDeviceN )ToPdfObject ()_bf .PdfObject {_dgdad :=_bf .MakeArray (_bf .MakeName ("\u0044e\u0076\u0069\u0063\u0065\u004e"));_dgdad .Append (_ccca .ColorantNames );_dgdad .Append (_ccca .AlternateSpace .ToPdfObject ());_dgdad .Append (_ccca .TintTransform .ToPdfObject ());
if _ccca .Attributes !=nil {_dgdad .Append (_ccca .Attributes .ToPdfObject ());};if _ccca ._bcfcf !=nil {_ccca ._bcfcf .PdfObject =_dgdad ;return _ccca ._bcfcf ;};return _dgdad ;};

// GetRuneMetrics returns the character metrics for the specified rune.
// A bool flag is returned to indicate whether or not the entry was found.
func (_fffa pdfCIDFontType0 )GetRuneMetrics (r rune )(_eb .CharMetrics ,bool ){return _eb .CharMetrics {Wx :_fffa ._ededd },true ;};

// RepairAcroForm attempts to rebuild the AcroForm fields using the widget
// annotations present in the document pages. Pass nil for the opts parameter
// in order to use the default options.
// NOTE: Currently, the opts parameter is declared in order to enable adding
// future options, but passing nil will always result in the default options
// being used.
func (_fcfda *PdfReader )RepairAcroForm (opts *AcroFormRepairOptions )error {var _abfda []*PdfField ;_gadcc :=map[*_bf .PdfIndirectObject ]struct{}{};for _ ,_cbeac :=range _fcfda .PageList {_bgaca ,_aeacc :=_cbeac .GetAnnotations ();if _aeacc !=nil {return _aeacc ;
};for _ ,_geead :=range _bgaca {var _ggcbd *PdfField ;switch _afacf :=_geead .GetContext ().(type ){case *PdfAnnotationWidget :if _afacf ._adf !=nil {_ggcbd =_afacf ._adf ;break ;};if _efbgd ,_gface :=_bf .GetIndirect (_afacf .Parent );_gface {_ggcbd ,_aeacc =_fcfda .newPdfFieldFromIndirectObject (_efbgd ,nil );
if _aeacc ==nil {break ;};_bc .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0070\u0061\u0072s\u0065\u0020\u0066\u006f\u0072\u006d\u0020\u0066\u0069\u0065ld\u0020\u0025\u002bv\u003a \u0025\u0076",_efbgd ,_aeacc );
};if _afacf ._cdaf !=nil {_ggcbd ,_aeacc =_fcfda .newPdfFieldFromIndirectObject (_afacf ._cdaf ,nil );if _aeacc ==nil {break ;};_bc .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0070\u0061\u0072s\u0065\u0020\u0066\u006f\u0072\u006d\u0020\u0066\u0069\u0065ld\u0020\u0025\u002bv\u003a \u0025\u0076",_afacf ._cdaf ,_aeacc );
};};if _ggcbd ==nil {continue ;};if _ ,_efdeca :=_gadcc [_ggcbd ._fgcdf ];_efdeca {continue ;};_gadcc [_ggcbd ._fgcdf ]=struct{}{};_abfda =append (_abfda ,_ggcbd );};};if len (_abfda )==0{return nil ;};if _fcfda .AcroForm ==nil {_fcfda .AcroForm =NewPdfAcroForm ();
};_fcfda .AcroForm .Fields =&_abfda ;return nil ;};func (_afefb *pdfCIDFontType0 )getFontDescriptor ()*PdfFontDescriptor {return _afefb ._cedfe };

// GetAllContentStreams gets all the content streams for a page as one string.
func (_eead *PdfPage )GetAllContentStreams ()(string ,error ){_cbecd ,_agbab :=_eead .GetContentStreams ();if _agbab !=nil {return "",_agbab ;};return _gf .Join (_cbecd ,"\u0020"),nil ;};

// GetContainingPdfObject gets the primitive used to parse the color space.
func (_bef *PdfColorspaceICCBased )GetContainingPdfObject ()_bf .PdfObject {return _bef ._gadcf };

// SetPdfKeywords sets the Keywords attribute of the output PDF.
func SetPdfKeywords (keywords string ){_ggeae .Lock ();defer _ggeae .Unlock ();_dafd =keywords };

// GetVersion gets the document version.
func (_bccda *PdfWriter )GetVersion ()_bf .Version {return _bccda ._abccg };

// ApplyStandard is used to apply changes required on the document to match the rules required by the input standard.
// The writer's content would be changed after all the document parts are already established during the Write method.
// A good example of the StandardApplier could be a PDF/A Profile (i.e.: pdfa.Profile1A). In such a case PdfWriter would
// set up all rules required by that Profile.
func (_dgbbc *PdfWriter )ApplyStandard (optimizer StandardApplier ){_dgbbc ._ggaa =optimizer };

// GetContainingPdfObject implements interface PdfModel.
func (_ddbe *PdfAnnotation )GetContainingPdfObject ()_bf .PdfObject {return _ddbe ._cdaf };

// SetContext sets the sub pattern (context).  Either PdfTilingPattern or PdfShadingPattern.
func (_abbfg *PdfPattern )SetContext (ctx PdfModel ){_abbfg ._adccfb =ctx };func _edded (_fcaee *_bf .PdfObjectDictionary )(*PdfShadingType1 ,error ){_dcebg :=PdfShadingType1 {};if _befab :=_fcaee .Get ("\u0044\u006f\u006d\u0061\u0069\u006e");_befab !=nil {_befab =_bf .TraceToDirectObject (_befab );
_gebcb ,_fbedeb :=_befab .(*_bf .PdfObjectArray );if !_fbedeb {_bc .Log .Debug ("\u0044\u006f\u006d\u0061i\u006e\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_befab );return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
};_dcebg .Domain =_gebcb ;};if _ecfe :=_fcaee .Get ("\u004d\u0061\u0074\u0072\u0069\u0078");_ecfe !=nil {_ecfe =_bf .TraceToDirectObject (_ecfe );_bfcaa ,_bcecgd :=_ecfe .(*_bf .PdfObjectArray );if !_bcecgd {_bc .Log .Debug ("\u004d\u0061\u0074\u0072i\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_ecfe );
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_dcebg .Matrix =_bfcaa ;};_ceaec :=_fcaee .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");if _ceaec ==nil {_bc .Log .Debug ("\u0052\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0020\u0046\u0075\u006ec\u0074\u0069\u006f\u006e");
return nil ,ErrRequiredAttributeMissing ;};_dcebg .Function =[]PdfFunction {};if _acacd ,_ffcfg :=_ceaec .(*_bf .PdfObjectArray );_ffcfg {for _ ,_aeefe :=range _acacd .Elements (){_daea ,_efcb :=_bbbbd (_aeefe );if _efcb !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_efcb );
return nil ,_efcb ;};_dcebg .Function =append (_dcebg .Function ,_daea );};}else {_egcfe ,_bfbdbf :=_bbbbd (_ceaec );if _bfbdbf !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_bfbdbf );
return nil ,_bfbdbf ;};_dcebg .Function =append (_dcebg .Function ,_egcfe );};return &_dcebg ,nil ;};var (_dgbc =_ca .MustCompile ("\u005cd\u002b\u0020\u0064\u0069c\u0074\u005c\u0073\u002b\u0028d\u0075p\u005cs\u002b\u0029\u003f\u0062\u0065\u0067\u0069n");
_acbee =_ca .MustCompile ("\u005e\u005cs\u002a\u002f\u0028\u005c\u0053\u002b\u003f\u0029\u005c\u0073\u002b\u0028\u002e\u002b\u003f\u0029\u005c\u0073\u002b\u0064\u0065\u0066\\s\u002a\u0024");_gacb =_ca .MustCompile ("\u005e\u005c\u0073*\u0064\u0075\u0070\u005c\u0073\u002b\u0028\u005c\u0064\u002b\u0029\u005c\u0073\u002a\u002f\u0028\u005c\u0077\u002b\u003f\u0029\u0028\u003f\u003a\u005c\u002e\u005c\u0064\u002b)\u003f\u005c\u0073\u002b\u0070\u0075\u0074\u0024");
_bcdea ="\u002f\u0045\u006e\u0063od\u0069\u006e\u0067\u0020\u0032\u0035\u0036\u0020\u0061\u0072\u0072\u0061\u0079";_bbfa ="\u0072\u0065\u0061d\u006f\u006e\u006c\u0079\u0020\u0064\u0065\u0066";_begce ="\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0066\u0069\u006c\u0065\u0020e\u0065\u0078\u0065\u0063";
);

// PageCallback callback function used in page loading
// that could be used to modify the page content.
//
// Deprecated: will be removed in v4. Use PageProcessCallback instead.
type PageCallback func (_ccdff int ,_gcgcd *PdfPage );

// GetType returns the button field type which returns one of the following
// - PdfFieldButtonPush for push button fields
// - PdfFieldButtonCheckbox for checkbox fields
// - PdfFieldButtonRadio for radio button fields
func (_cdca *PdfFieldButton )GetType ()ButtonType {_bcdbg :=ButtonTypeCheckbox ;if _cdca .Ff !=nil {if (uint32 (*_cdca .Ff )&FieldFlagPushbutton .Mask ())> 0{_bcdbg =ButtonTypePush ;}else if (uint32 (*_cdca .Ff )&FieldFlagRadio .Mask ())> 0{_bcdbg =ButtonTypeRadio ;
};};return _bcdbg ;};

// GetContainingPdfObject returns the container of the pattern object (indirect object).
func (_gfaa *PdfPattern )GetContainingPdfObject ()_bf .PdfObject {return _gfaa ._bfcdg };

// NewStandardPdfOutputIntent creates a new standard PdfOutputIntent.
func NewStandardPdfOutputIntent (outputCondition ,outputConditionIdentifier ,registryName string ,destOutputProfile []byte ,colorComponents int )*PdfOutputIntent {return &PdfOutputIntent {Type :"\u004f\u0075\u0074p\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074",OutputCondition :outputCondition ,OutputConditionIdentifier :outputConditionIdentifier ,RegistryName :registryName ,DestOutputProfile :destOutputProfile ,ColorComponents :colorComponents ,_dacca :_bf .MakeDict ()};
};

// ToPdfObject returns the PDF representation of the shading pattern.
func (_adcgdd *PdfShadingPattern )ToPdfObject ()_bf .PdfObject {_adcgdd .PdfPattern .ToPdfObject ();_dcbga :=_adcgdd .getDict ();if _adcgdd .Shading !=nil {_dcbga .Set ("\u0053h\u0061\u0064\u0069\u006e\u0067",_adcgdd .Shading .ToPdfObject ());};if _adcgdd .Matrix !=nil {_dcbga .Set ("\u004d\u0061\u0074\u0072\u0069\u0078",_adcgdd .Matrix );
};if _adcgdd .ExtGState !=nil {_dcbga .Set ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e",_adcgdd .ExtGState );};return _adcgdd ._bfcdg ;};

// PdfAnnotationWidget represents Widget annotations.
// Note: Widget annotations are used to display form fields.
// (Section 12.5.6.19).
type PdfAnnotationWidget struct{*PdfAnnotation ;H _bf .PdfObject ;MK _bf .PdfObject ;A _bf .PdfObject ;AA _bf .PdfObject ;BS _bf .PdfObject ;Parent _bf .PdfObject ;_adf *PdfField ;_ceff bool ;};func _gegdb (_aefaf *_bf .PdfObjectDictionary )(*PdfShadingType7 ,error ){_gfce :=PdfShadingType7 {};
_ceadd :=_aefaf .Get ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065");if _ceadd ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064 \u0061\u0074\u0074\u0072\u0069\u0062\u0075t\u0065\u0020\u006d\u0069\u0073\u0073i\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072C\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065");
return nil ,ErrRequiredAttributeMissing ;};_gaeed ,_ebfge :=_ceadd .(*_bf .PdfObjectInteger );if !_ebfge {_bc .Log .Debug ("\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065\u0020\u006eo\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_ceadd );
return nil ,_bf .ErrTypeError ;};_gfce .BitsPerCoordinate =_gaeed ;_ceadd =_aefaf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _ceadd ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064\u0020a\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073in\u0067\u003a\u0020B\u0069\u0074s\u0050\u0065\u0072\u0043\u006f\u006dp\u006f\u006ee\u006e\u0074");
return nil ,ErrRequiredAttributeMissing ;};_gaeed ,_ebfge =_ceadd .(*_bf .PdfObjectInteger );if !_ebfge {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065r \u0028\u0067\u006ft\u0020%\u0054\u0029",_ceadd );
return nil ,_bf .ErrTypeError ;};_gfce .BitsPerComponent =_gaeed ;_ceadd =_aefaf .Get ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0046\u006c\u0061\u0067");if _ceadd ==nil {_bc .Log .Debug ("\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065r\u0046\u006c\u0061\u0067");
return nil ,ErrRequiredAttributeMissing ;};_gaeed ,_ebfge =_ceadd .(*_bf .PdfObjectInteger );if !_ebfge {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072F\u006c\u0061\u0067\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074e\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025T\u0029",_ceadd );
return nil ,_bf .ErrTypeError ;};_gfce .BitsPerComponent =_gaeed ;_ceadd =_aefaf .Get ("\u0044\u0065\u0063\u006f\u0064\u0065");if _ceadd ==nil {_bc .Log .Debug ("\u0052\u0065\u0071ui\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069b\u0075t\u0065 \u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065");
return nil ,ErrRequiredAttributeMissing ;};_gddee ,_ebfge :=_ceadd .(*_bf .PdfObjectArray );if !_ebfge {_bc .Log .Debug ("\u0044\u0065\u0063\u006fd\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_ceadd );
return nil ,_bf .ErrTypeError ;};_gfce .Decode =_gddee ;if _eagbc :=_aefaf .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_eagbc !=nil {_gfce .Function =[]PdfFunction {};if _ceffe ,_eddeb :=_eagbc .(*_bf .PdfObjectArray );_eddeb {for _ ,_ggeef :=range _ceffe .Elements (){_ddecb ,_bbef :=_bbbbd (_ggeef );
if _bbef !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_bbef );return nil ,_bbef ;};_gfce .Function =append (_gfce .Function ,_ddecb );
};}else {_egdfg ,_dfcgb :=_bbbbd (_eagbc );if _dfcgb !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_dfcgb );return nil ,_dfcgb ;
};_gfce .Function =append (_gfce .Function ,_egdfg );};};return &_gfce ,nil ;};

// B returns the value of the B component of the color.
func (_dedg *PdfColorCalRGB )B ()float64 {return _dedg [1]};

// NewPdfAnnotationHighlight returns a new text highlight annotation.
func NewPdfAnnotationHighlight ()*PdfAnnotationHighlight {_dbf :=NewPdfAnnotation ();_fce :=&PdfAnnotationHighlight {};_fce .PdfAnnotation =_dbf ;_fce .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_dbf .SetContext (_fce );return _fce ;};func (_aedg *PdfColorspaceDeviceCMYK )String ()string {return "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};func _dgbf (_egaa []byte )bool {if len (_egaa )< 4{return true ;};for _degf :=range _egaa [:4]{_cfccg :=rune (_degf );if !_eag .Is (_eag .ASCII_Hex_Digit ,_cfccg )&&!_eag .IsSpace (_cfccg ){return true ;};};return false ;};

// PdfAnnotationText represents Text annotations.
// (Section 12.5.6.4 p. 402).
type PdfAnnotationText struct{*PdfAnnotation ;*PdfAnnotationMarkup ;Open _bf .PdfObject ;Name _bf .PdfObject ;State _bf .PdfObject ;StateModel _bf .PdfObject ;};

// GenerateXObjectName generates an unused XObject name that can be used for
// adding new XObjects. Uses format XObj1, XObj2, ...
func (_becge *PdfPageResources )GenerateXObjectName ()_bf .PdfObjectName {_bedgc :=1;for {_afcgeg :=_bf .MakeName (_af .Sprintf ("\u0058\u004f\u0062\u006a\u0025\u0064",_bedgc ));if !_becge .HasXObjectByName (*_afcgeg ){return *_afcgeg ;};_bedgc ++;};};


// PdfColorCalRGB represents a color in the Colorimetric CIE RGB colorspace.
// A, B, C components
// Each component is defined in the range 0.0 - 1.0 where 1.0 is the primary intensity.
type PdfColorCalRGB [3]float64 ;type pdfFontType0 struct{fontCommon ;_edabb *_bf .PdfIndirectObject ;_aecc _faf .TextEncoder ;Encoding _bf .PdfObject ;DescendantFont *PdfFont ;_caceg *_cf .CMap ;};

// ToPdfObject implements interface PdfModel.
func (_ace *PdfActionGoToE )ToPdfObject ()_bf .PdfObject {_ace .PdfAction .ToPdfObject ();_afc :=_ace ._fda ;_faga :=_afc .PdfObject .(*_bf .PdfObjectDictionary );_faga .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeGoToE )));if _ace .F !=nil {_faga .Set ("\u0046",_ace .F .ToPdfObject ());
};_faga .SetIfNotNil ("\u0044",_ace .D );_faga .SetIfNotNil ("\u004ee\u0077\u0057\u0069\u006e\u0064\u006fw",_ace .NewWindow );_faga .SetIfNotNil ("\u0054",_ace .T );return _afc ;};func _degg (_abgd _bf .PdfObject )(*PdfColorspaceICCBased ,error ){_gecg :=&PdfColorspaceICCBased {};
if _bdcdg ,_adag :=_abgd .(*_bf .PdfIndirectObject );_adag {_gecg ._ecee =_bdcdg ;};_abgd =_bf .TraceToDirectObject (_abgd );_cdfbc ,_fgdc :=_abgd .(*_bf .PdfObjectArray );if !_fgdc {return nil ,_af .Errorf ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
};if _cdfbc .Len ()!=2{return nil ,_af .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064\u0020c\u006f\u006c\u006fr\u0073p\u0061\u0063\u0065");};_abgd =_bf .TraceToDirectObject (_cdfbc .Get (0));_bcbf ,_fgdc :=_abgd .(*_bf .PdfObjectName );
if !_fgdc {return nil ,_af .Errorf ("\u0049\u0043\u0043B\u0061\u0073\u0065\u0064 \u006e\u0061\u006d\u0065\u0020\u006e\u006ft\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};if *_bcbf !="\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064"{return nil ,_af .Errorf ("\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0049\u0043\u0043\u0042a\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073p\u0061\u0063\u0065");
};_abgd =_cdfbc .Get (1);_dfce ,_fgdc :=_bf .GetStream (_abgd );if !_fgdc {_bc .Log .Error ("I\u0043\u0043\u0042\u0061\u0073\u0065d\u0020\u006e\u006f\u0074\u0020\u0070o\u0069\u006e\u0074\u0069\u006e\u0067\u0020t\u006f\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020%\u0054",_abgd );
return nil ,_af .Errorf ("\u0049\u0043\u0043Ba\u0073\u0065\u0064\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_cgadc :=_dfce .PdfObjectDictionary ;_egea ,_fgdc :=_cgadc .Get ("\u004e").(*_bf .PdfObjectInteger );
if !_fgdc {return nil ,_af .Errorf ("I\u0043\u0043\u0042\u0061\u0073\u0065d\u0020\u006d\u0069\u0073\u0073\u0069n\u0067\u0020\u004e\u0020\u0066\u0072\u006fm\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074");};if *_egea !=1&&*_egea !=3&&*_egea !=4{return nil ,_af .Errorf ("\u0049\u0043\u0043\u0042\u0061s\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065 \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u004e\u0020\u0028\u006e\u006f\u0074\u0020\u0031\u002c\u0033\u002c\u0034\u0029");
};_gecg .N =int (*_egea );if _ddaa :=_cgadc .Get ("\u0041l\u0074\u0065\u0072\u006e\u0061\u0074e");_ddaa !=nil {_geaee ,_bgadd :=NewPdfColorspaceFromPdfObject (_ddaa );if _bgadd !=nil {return nil ,_bgadd ;};_gecg .Alternate =_geaee ;};if _ffeg :=_cgadc .Get ("\u0052\u0061\u006eg\u0065");
_ffeg !=nil {_ffeg =_bf .TraceToDirectObject (_ffeg );_ddgf ,_edff :=_ffeg .(*_bf .PdfObjectArray );if !_edff {return nil ,_af .Errorf ("I\u0043\u0043\u0042\u0061\u0073\u0065d\u0020\u0052\u0061\u006e\u0067\u0065\u0020\u006e\u006ft\u0020\u0061\u006e \u0061r\u0072\u0061\u0079");
};if _ddgf .Len ()!=2*_gecg .N {return nil ,_af .Errorf ("\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064\u0020\u0052\u0061\u006e\u0067e\u0020\u0077\u0072\u006f\u006e\u0067 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0073");
};_bbged ,_aeda :=_ddgf .GetAsFloat64Slice ();if _aeda !=nil {return nil ,_aeda ;};_gecg .Range =_bbged ;}else {_gecg .Range =make ([]float64 ,2*_gecg .N );for _fgff :=0;_fgff < _gecg .N ;_fgff ++{_gecg .Range [2*_fgff ]=0.0;_gecg .Range [2*_fgff +1]=1.0;
};};if _cdbbe :=_cgadc .Get ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061");_cdbbe !=nil {_aabd ,_bdaf :=_cdbbe .(*_bf .PdfObjectStream );if !_bdaf {return nil ,_af .Errorf ("\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064\u0020\u004de\u0074\u0061\u0064\u0061\u0074\u0061\u0020n\u006f\u0074\u0020\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_gecg .Metadata =_aabd ;};_bfcb ,_ffff :=_bf .DecodeStream (_dfce );if _ffff !=nil {return nil ,_ffff ;};_gecg .Data =_bfcb ;_gecg ._gadcf =_dfce ;return _gecg ,nil ;};

// String returns the name of the colorspace (DeviceN).
func (_bdfg *PdfColorspaceDeviceN )String ()string {return "\u0044e\u0076\u0069\u0063\u0065\u004e"};

// ToPdfObject converts rectangle to a PDF object.
func (_gbdcd *PdfRectangle )ToPdfObject ()_bf .PdfObject {return _bf .MakeArray (_bf .MakeFloat (_gbdcd .Llx ),_bf .MakeFloat (_gbdcd .Lly ),_bf .MakeFloat (_gbdcd .Urx ),_bf .MakeFloat (_gbdcd .Ury ));};

// FieldImageProvider provides fields images for specified fields.
type FieldImageProvider interface{FieldImageValues ()(map[string ]*Image ,error );};

// GetAlphabet returns a map of the runes in `text` and their frequencies.
func GetAlphabet (text string )map[rune ]int {_gaef :=map[rune ]int {};for _ ,_bbfec :=range text {_gaef [_bbfec ]++;};return _gaef ;};func (_beagf *PdfWriter )writeOutputIntents ()error {if len (_beagf ._dddd )==0{return nil ;};_adggc :=make ([]_bf .PdfObject ,len (_beagf ._dddd ));
for _fbeg ,_gbebe :=range _beagf ._dddd {_ccdgf :=_gbebe .ToPdfObject ();_adggc [_fbeg ]=_bf .MakeIndirectObject (_ccdgf );};_dggae :=_bf .MakeIndirectObject (_bf .MakeArray (_adggc ...));_beagf ._cecba .Set ("\u004f\u0075\u0074\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0073",_dggae );
if _fcgfb :=_beagf .addObjects (_dggae );_fcgfb !=nil {return _fcgfb ;};return nil ;};

// NewPdfAnnotationStrikeOut returns a new text strikeout annotation.
func NewPdfAnnotationStrikeOut ()*PdfAnnotationStrikeOut {_dedf :=NewPdfAnnotation ();_gbc :=&PdfAnnotationStrikeOut {};_gbc .PdfAnnotation =_dedf ;_gbc .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_dedf .SetContext (_gbc );return _gbc ;};func _egbb (_bbag _bf .PdfObject )(string ,error ){_bbag =_bf .TraceToDirectObject (_bbag );
switch _fdaacf :=_bbag .(type ){case *_bf .PdfObjectString :return _fdaacf .Str (),nil ;case *_bf .PdfObjectStream :_febdf ,_fage :=_bf .DecodeStream (_fdaacf );if _fage !=nil {return "",_fage ;};return string (_febdf ),nil ;};return "",_af .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_bbag );
};

// AddFont adds a font dictionary to the Font resources.
func (_ggdec *PdfPage )AddFont (name _bf .PdfObjectName ,font _bf .PdfObject )error {if _ggdec .Resources ==nil {_ggdec .Resources =NewPdfPageResources ();};if _ggdec .Resources .Font ==nil {_ggdec .Resources .Font =_bf .MakeDict ();};_bddee ,_eefe :=_bf .TraceToDirectObject (_ggdec .Resources .Font ).(*_bf .PdfObjectDictionary );
if !_eefe {_bc .Log .Debug ("\u0045\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0066\u006f\u006et \u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u003a \u0025\u0076",_bf .TraceToDirectObject (_ggdec .Resources .Font ));
return _eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_bddee .Set (name ,font );return nil ;};

// NewPdfAnnotationWatermark returns a new watermark annotation.
func NewPdfAnnotationWatermark ()*PdfAnnotationWatermark {_eggc :=NewPdfAnnotation ();_bccg :=&PdfAnnotationWatermark {};_bccg .PdfAnnotation =_eggc ;_eggc .SetContext (_bccg );return _bccg ;};

// GetContainingPdfObject implements interface PdfModel.
func (_fgaca *PdfSignature )GetContainingPdfObject ()_bf .PdfObject {return _fgaca ._decde };

// HasExtGState checks whether a font is defined by the specified keyName.
func (_gggg *PdfPageResources )HasExtGState (keyName _bf .PdfObjectName )bool {_ ,_fcgcac :=_gggg .GetFontByName (keyName );return _fcgcac ;};

// SetPatternByName sets a pattern resource specified by keyName.
func (_gcdf *PdfPageResources )SetPatternByName (keyName _bf .PdfObjectName ,pattern _bf .PdfObject )error {if _gcdf .Pattern ==nil {_gcdf .Pattern =_bf .MakeDict ();};_cgbbe ,_accef :=_gcdf .Pattern .(*_bf .PdfObjectDictionary );if !_accef {return _bf .ErrTypeError ;
};_cgbbe .Set (keyName ,pattern );return nil ;};

// NewPdfOutline returns an initialized PdfOutline.
func NewPdfOutline ()*PdfOutline {_eadcb :=&PdfOutline {_ecfae :_bf .MakeIndirectObject (_bf .MakeDict ())};_eadcb ._bacb =_eadcb ;return _eadcb ;};func (_aafda *PdfWriter )optimizeDocument ()error {if _aafda ._ggaa ==nil {return nil ;};_gbfce ,_fbba :=_bf .GetDict (_aafda ._efddb );
if !_fbba {return _eff .New ("\u0061\u006e\u0020in\u0066\u006f\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0069s\u0020n\u006ft\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");};_acgdfff :=_cb .Document {ID :[2]string {_aafda ._ggfdb ,_aafda ._ebecb },Version :_aafda ._abccg ,Objects :_aafda ._agfac ,Info :_gbfce ,Crypt :_aafda ._ebefb ,UseHashBasedID :_aafda ._ccecf };
if _edaad :=_aafda ._ggaa .ApplyStandard (&_acgdfff );_edaad !=nil {return _edaad ;};_aafda ._ggfdb ,_aafda ._ebecb =_acgdfff .ID [0],_acgdfff .ID [1];_aafda ._abccg =_acgdfff .Version ;_aafda ._agfac =_acgdfff .Objects ;_aafda ._efddb .PdfObject =_acgdfff .Info ;
_aafda ._ccecf =_acgdfff .UseHashBasedID ;_aafda ._ebefb =_acgdfff .Crypt ;_gcdee :=make (map[_bf .PdfObject ]struct{},len (_aafda ._agfac ));for _ ,_fbaff :=range _aafda ._agfac {_gcdee [_fbaff ]=struct{}{};};_aafda ._bcgbbe =_gcdee ;return nil ;};

// NewXObjectFormFromStream builds the Form XObject from a stream object.
// TODO: Should this be exposed? Consider different access points.
func NewXObjectFormFromStream (stream *_bf .PdfObjectStream )(*XObjectForm ,error ){_aebca :=&XObjectForm {};_aebca ._cdaggd =stream ;_cggc :=*(stream .PdfObjectDictionary );_bcggc ,_ffebd :=_bf .NewEncoderFromStream (stream );if _ffebd !=nil {return nil ,_ffebd ;
};_aebca .Filter =_bcggc ;if _gcfeab :=_cggc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065");_gcfeab !=nil {_aeddb ,_aaca :=_gcfeab .(*_bf .PdfObjectName );if !_aaca {return nil ,_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
};if *_aeddb !="\u0046\u006f\u0072\u006d"{_bc .Log .Debug ("I\u006ev\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072m\u0020\u0073\u0075\u0062ty\u0070\u0065");return nil ,_eff .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072m\u0020\u0073\u0075\u0062ty\u0070\u0065");
};};if _dbgbfb :=_cggc .Get ("\u0046\u006f\u0072\u006d\u0054\u0079\u0070\u0065");_dbgbfb !=nil {_aebca .FormType =_dbgbfb ;};if _dggcg :=_cggc .Get ("\u0042\u0042\u006f\u0078");_dggcg !=nil {_aebca .BBox =_dggcg ;};if _gbdec :=_cggc .Get ("\u004d\u0061\u0074\u0072\u0069\u0078");
_gbdec !=nil {_aebca .Matrix =_gbdec ;};if _baefd :=_cggc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s");_baefd !=nil {_baefd =_bf .TraceToDirectObject (_baefd );_aeebd ,_ffddg :=_baefd .(*_bf .PdfObjectDictionary );if !_ffddg {_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0058\u004f\u0062j\u0065c\u0074\u0020\u0046\u006f\u0072\u006d\u0020\u0052\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020\u006f\u0062j\u0065\u0063\u0074\u002c\u0020\u0070\u006f\u0069\u006e\u0074\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u006e\u006f\u006e\u002d\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079");
return nil ,_bf .ErrTypeError ;};_dgabe ,_fdecd :=NewPdfPageResourcesFromDict (_aeebd );if _fdecd !=nil {_bc .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0020\u0072\u0065\u0073\u006f\u0075rc\u0065\u0073");
return nil ,_fdecd ;};_aebca .Resources =_dgabe ;_bc .Log .Trace ("\u0046\u006f\u0072\u006d r\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u003a\u0020\u0025\u0023\u0076",_aebca .Resources );};_aebca .Group =_cggc .Get ("\u0047\u0072\u006fu\u0070");_aebca .Ref =_cggc .Get ("\u0052\u0065\u0066");
_aebca .MetaData =_cggc .Get ("\u004d\u0065\u0074\u0061\u0044\u0061\u0074\u0061");_aebca .PieceInfo =_cggc .Get ("\u0050i\u0065\u0063\u0065\u0049\u006e\u0066o");_aebca .LastModified =_cggc .Get ("\u004c\u0061\u0073t\u004d\u006f\u0064\u0069\u0066\u0069\u0065\u0064");
_aebca .StructParent =_cggc .Get ("\u0053\u0074\u0072u\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074");_aebca .StructParents =_cggc .Get ("\u0053\u0074\u0072\u0075\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074\u0073");_aebca .OPI =_cggc .Get ("\u004f\u0050\u0049");
_aebca .OC =_cggc .Get ("\u004f\u0043");_aebca .Name =_cggc .Get ("\u004e\u0061\u006d\u0065");_aebca .Stream =stream .Stream ;return _aebca ,nil ;};func (_fcae *PdfReader )resolveReference (_ffbdf *_bf .PdfObjectReference )(_bf .PdfObject ,bool ,error ){_ceeba ,_ffabe :=_fcae ._gafdb .ObjCache [int (_ffbdf .ObjectNumber )];
if !_ffabe {_bc .Log .Trace ("R\u0065\u0061\u0064\u0065r \u004co\u006f\u006b\u0075\u0070\u0020r\u0065\u0066\u003a\u0020\u0025\u0073",_ffbdf );_aedga ,_cfgga :=_fcae ._gafdb .LookupByReference (*_ffbdf );if _cfgga !=nil {return nil ,false ,_cfgga ;};_fcae ._gafdb .ObjCache [int (_ffbdf .ObjectNumber )]=_aedga ;
return _aedga ,false ,nil ;};return _ceeba ,true ,nil ;};

// OutlineDest represents the destination of an outline item.
// It holds the page and the position on the page an outline item points to.
type OutlineDest struct{PageObj *_bf .PdfIndirectObject `json:"-"`;Page int64 `json:"page"`;Mode string `json:"mode"`;X float64 `json:"x"`;Y float64 `json:"y"`;Zoom float64 `json:"zoom"`;};

// ToPdfObject returns the text field dictionary within an indirect object (container).
func (_feee *PdfFieldText )ToPdfObject ()_bf .PdfObject {_feee .PdfField .ToPdfObject ();_ecae :=_feee ._fgcdf ;_egeg :=_ecae .PdfObject .(*_bf .PdfObjectDictionary );_egeg .Set ("\u0046\u0054",_bf .MakeName ("\u0054\u0078"));if _feee .DA !=nil {_egeg .Set ("\u0044\u0041",_feee .DA );
};if _feee .Q !=nil {_egeg .Set ("\u0051",_feee .Q );};if _feee .DS !=nil {_egeg .Set ("\u0044\u0053",_feee .DS );};if _feee .RV !=nil {_egeg .Set ("\u0052\u0056",_feee .RV );};if _feee .MaxLen !=nil {_egeg .Set ("\u004d\u0061\u0078\u004c\u0065\u006e",_feee .MaxLen );
};return _ecae ;};func (_faede *pdfFontSimple )addEncoding ()error {var (_cfae string ;_abcc map[_faf .CharCode ]_faf .GlyphName ;_dbgga _faf .SimpleEncoder ;);if _faede .Encoder ()!=nil {_gdagg ,_fcbfg :=_faede .Encoder ().(_faf .SimpleEncoder );if _fcbfg &&_gdagg !=nil {_cfae =_gdagg .BaseName ();
};};if _faede .Encoding !=nil {_egbfa ,_eacab ,_cbec :=_faede .getFontEncoding ();if _cbec !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0042\u0061\u0073\u0065F\u006f\u006e\u0074\u003d\u0025\u0071\u0020\u0053u\u0062t\u0079\u0070\u0065\u003d\u0025\u0071\u0020\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u003d\u0025\u0073 \u0028\u0025\u0054\u0029\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_faede ._adccf ,_faede ._fdfb ,_faede .Encoding ,_faede .Encoding ,_cbec );
return _cbec ;};if _egbfa !=""{_cfae =_egbfa ;};_abcc =_eacab ;_dbgga ,_cbec =_faf .NewSimpleTextEncoder (_cfae ,_abcc );if _cbec !=nil {return _cbec ;};};if _dbgga ==nil {_ffefa :=_faede ._cedfe ;if _ffefa !=nil {switch _faede ._fdfb {case "\u0054\u0079\u0070e\u0031":if _ffefa .fontFile !=nil &&_ffefa .fontFile ._bdbe !=nil {_bc .Log .Debug ("\u0055\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006et\u0046\u0069\u006c\u0065");
_dbgga =_ffefa .fontFile ._bdbe ;};case "\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065":if _ffefa ._geabf !=nil {_bc .Log .Debug ("\u0055s\u0069n\u0067\u0020\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u0032");_geeab ,_dfeccf :=_ffefa ._geabf .MakeEncoder ();
if _dfeccf ==nil {_dbgga =_geeab ;};};};};};if _dbgga !=nil {if _abcc !=nil {_bc .Log .Trace ("\u0064\u0069\u0066fe\u0072\u0065\u006e\u0063\u0065\u0073\u003d\u0025\u002b\u0076\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",_abcc ,_faede .baseFields ());
_dbgga =_faf .ApplyDifferences (_dbgga ,_abcc );};_faede .SetEncoder (_dbgga );};return nil ;};var ImageHandling ImageHandler =DefaultImageHandler {};

// ToPdfObject returns the PDF representation of the tiling pattern.
func (_eegbc *PdfTilingPattern )ToPdfObject ()_bf .PdfObject {_eegbc .PdfPattern .ToPdfObject ();_bgfgc :=_eegbc .getDict ();if _eegbc .PaintType !=nil {_bgfgc .Set ("\u0050a\u0069\u006e\u0074\u0054\u0079\u0070e",_eegbc .PaintType );};if _eegbc .TilingType !=nil {_bgfgc .Set ("\u0054\u0069\u006c\u0069\u006e\u0067\u0054\u0079\u0070\u0065",_eegbc .TilingType );
};if _eegbc .BBox !=nil {_bgfgc .Set ("\u0042\u0042\u006f\u0078",_eegbc .BBox .ToPdfObject ());};if _eegbc .XStep !=nil {_bgfgc .Set ("\u0058\u0053\u0074e\u0070",_eegbc .XStep );};if _eegbc .YStep !=nil {_bgfgc .Set ("\u0059\u0053\u0074e\u0070",_eegbc .YStep );
};if _eegbc .Resources !=nil {_bgfgc .Set ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s",_eegbc .Resources .ToPdfObject ());};if _eegbc .Matrix !=nil {_bgfgc .Set ("\u004d\u0061\u0074\u0072\u0069\u0078",_eegbc .Matrix );};return _eegbc ._bfcdg ;};

// AddOutlineTree adds outlines to a PDF file.
func (_gcgf *PdfWriter )AddOutlineTree (outlineTree *PdfOutlineTreeNode ){_gcgf ._gdbae =outlineTree };

// AppendContentStream adds content stream by string.  Appends to the last
// contentstream instance if many.
func (_dfdd *PdfPage )AppendContentStream (contentStr string )error {_ddca ,_gaegb :=_dfdd .GetContentStreams ();if _gaegb !=nil {return _gaegb ;};if len (_ddca )==0{_ddca =[]string {contentStr };return _dfdd .SetContentStreams (_ddca ,_bf .NewFlateEncoder ());
};var _efgbf _cdc .Buffer ;_efgbf .WriteString (_ddca [len (_ddca )-1]);_efgbf .WriteString ("\u000a");_efgbf .WriteString (contentStr );_ddca [len (_ddca )-1]=_efgbf .String ();return _dfdd .SetContentStreams (_ddca ,_bf .NewFlateEncoder ());};

// B returns the value of the B component of the color.
func (_ffbad *PdfColorLab )B ()float64 {return _ffbad [2]};

// NewPdfPageResources returns a new PdfPageResources object.
func NewPdfPageResources ()*PdfPageResources {_bbadg :=&PdfPageResources {};_bbadg ._dbfed =_bf .MakeDict ();return _bbadg ;};

// NewPdfActionThread returns a new "thread" action.
func NewPdfActionThread ()*PdfActionThread {_aec :=NewPdfAction ();_def :=&PdfActionThread {};_def .PdfAction =_aec ;_aec .SetContext (_def );return _def ;};

// AddPage adds a page to the PDF file. The new page should be an indirect object.
func (_gefca *PdfWriter )AddPage (page *PdfPage )error {const _fdgde ="\u006d\u006f\u0064el\u003a\u0050\u0064\u0066\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";_fdfcd (page );_bggeb :=page .ToPdfObject ();_bc .Log .Trace ("\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d");
_bc .Log .Trace ("\u0041p\u0070\u0065\u006e\u0064i\u006e\u0067\u0020\u0074\u006f \u0070a\u0067e\u0020\u006c\u0069\u0073\u0074\u0020\u0025T",_bggeb );_eabga ,_edggf :=_bf .GetIndirect (_bggeb );if !_edggf {return _eff .New ("\u0070\u0061\u0067\u0065\u0020\u0073h\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0069\u006ed\u0069\u0072\u0065\u0063\u0074\u0020\u006fb\u006a\u0065\u0063\u0074");
};_bc .Log .Trace ("\u0025\u0073",_eabga );_bc .Log .Trace ("\u0025\u0073",_eabga .PdfObject );_beec ,_edggf :=_bf .GetDict (_eabga .PdfObject );if !_edggf {return _eff .New ("\u0070\u0061\u0067e \u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0073\u0068o\u0075l\u0064 \u0062e\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cddag ,_edggf :=_bf .GetName (_beec .Get ("\u0054\u0079\u0070\u0065"));if !_edggf {return _af .Errorf ("\u0070\u0061\u0067\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0068\u0061\u0076\u0065\u0020\u0061\u0020\u0054y\u0070\u0065\u0020\u006b\u0065\u0079\u0020\u0077\u0069t\u0068\u0020\u0061\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u006e\u0061m\u0065\u0020\u0028%\u0054\u0029",_beec .Get ("\u0054\u0079\u0070\u0065"));
};if _cddag .String ()!="\u0050\u0061\u0067\u0065"{return _eff .New ("\u0066\u0069e\u006c\u0064\u0020\u0054\u0079\u0070\u0065\u0020\u0021\u003d\u0020\u0050\u0061\u0067\u0065\u0020\u0028\u0052\u0065\u0071\u0075\u0069re\u0064\u0029");};_fcccc :=[]_bf .PdfObjectName {"\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s","\u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078","\u0043r\u006f\u0070\u0042\u006f\u0078","\u0052\u006f\u0074\u0061\u0074\u0065"};
_dcfdc ,_fgad :=_bf .GetIndirect (_beec .Get ("\u0050\u0061\u0072\u0065\u006e\u0074"));_bc .Log .Trace ("P\u0061g\u0065\u0020\u0050\u0061\u0072\u0065\u006e\u0074:\u0020\u0025\u0054\u0020(%\u0076\u0029",_beec .Get ("\u0050\u0061\u0072\u0065\u006e\u0074"),_fgad );
for _fgad {_bc .Log .Trace ("\u0050a\u0067e\u0020\u0050\u0061\u0072\u0065\u006e\u0074\u003a\u0020\u0025\u0054",_dcfdc );_fabgf ,_fadfc :=_bf .GetDict (_dcfdc .PdfObject );if !_fadfc {return _eff .New ("i\u006e\u0076\u0061\u006cid\u0020P\u0061\u0072\u0065\u006e\u0074 \u006f\u0062\u006a\u0065\u0063\u0074");
};for _ ,_afbea :=range _fcccc {_bc .Log .Trace ("\u0046\u0069\u0065\u006c\u0064\u0020\u0025\u0073",_afbea );if _beec .Get (_afbea )!=nil {_bc .Log .Trace ("\u002d \u0070a\u0067\u0065\u0020\u0068\u0061s\u0020\u0061l\u0072\u0065\u0061\u0064\u0079");continue ;
};if _cddcg :=_fabgf .Get (_afbea );_cddcg !=nil {_bc .Log .Trace ("\u0049\u006e\u0068\u0065ri\u0074\u0069\u006e\u0067\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0025\u0073",_afbea );_beec .Set (_afbea ,_cddcg );};};_dcfdc ,_fgad =_bf .GetIndirect (_fabgf .Get ("\u0050\u0061\u0072\u0065\u006e\u0074"));
_bc .Log .Trace ("\u004ee\u0078t\u0020\u0070\u0061\u0072\u0065\u006e\u0074\u003a\u0020\u0025\u0054",_fabgf .Get ("\u0050\u0061\u0072\u0065\u006e\u0074"));};_bc .Log .Trace ("\u0054\u0072\u0061\u0076\u0065\u0072\u0073\u0061\u006c \u0064\u006f\u006e\u0065");
_beec .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_gefca ._bfgbf );_eabga .PdfObject =_beec ;_ecfb ,_edggf :=_bf .GetDict (_gefca ._bfgbf .PdfObject );if !_edggf {return _eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0061g\u0065\u0073\u0020\u006f\u0062\u006a\u0020(\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0029");
};_cfbff ,_edggf :=_bf .GetArray (_ecfb .Get ("\u004b\u0069\u0064\u0073"));if !_edggf {return _eff .New ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0050\u0061g\u0065\u0073\u0020\u004b\u0069\u0064\u0073\u0020o\u0062\u006a\u0020\u0028\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072\u0061\u0079\u0029");
};_cfbff .Append (_eabga );_gefca ._ecabe [_beec ]=struct{}{};_aece ,_edggf :=_bf .GetInt (_ecfb .Get ("\u0043\u006f\u0075n\u0074"));if !_edggf {return _eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064 \u0050\u0061\u0067e\u0073\u0020\u0043\u006fu\u006e\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0028\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0029");
};*_aece =*_aece +1;if page ._eegf ==nil {_ddddf :=_bad .Track (_gefca ._efcfa ,_fdgde );if _ddddf !=nil {return _ddddf ;};}else {_dcbf :=_bad .Track (page ._eegf ._ffade ,_fdgde );if _dcbf !=nil {return _dcbf ;};};_gefca .addObject (_eabga );_gcbgbe :=_gefca .addObjects (_beec );
if _gcbgbe !=nil {return _gcbgbe ;};return nil ;};

// ToPdfObject recursively builds the Outline tree PDF object.
func (_bdccd *PdfOutline )ToPdfObject ()_bf .PdfObject {_cdeca :=_bdccd ._ecfae ;_gbdea :=_cdeca .PdfObject .(*_bf .PdfObjectDictionary );_gbdea .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u004f\u0075\u0074\u006c\u0069\u006e\u0065\u0073"));if _bdccd .First !=nil {_gbdea .Set ("\u0046\u0069\u0072s\u0074",_bdccd .First .ToPdfObject ());
};if _bdccd .Last !=nil {_gbdea .Set ("\u004c\u0061\u0073\u0074",_bdccd .Last .GetContext ().GetContainingPdfObject ());};if _bdccd .Parent !=nil {_gbdea .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_bdccd .Parent .GetContext ().GetContainingPdfObject ());
};if _bdccd .Count !=nil {_gbdea .Set ("\u0043\u006f\u0075n\u0074",_bf .MakeInteger (*_bdccd .Count ));};return _cdeca ;};

// Decrypt decrypts the PDF file with a specified password.  Also tries to
// decrypt with an empty password.  Returns true if successful,
// false otherwise.
func (_fgag *PdfReader )Decrypt (password []byte )(bool ,error ){_beccf ,_eaec :=_fgag ._gafdb .Decrypt (password );if _eaec !=nil {return false ,_eaec ;};if !_beccf {return false ,nil ;};_eaec =_fgag .loadStructure ();if _eaec !=nil {_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0046\u0061\u0069\u006c\u0020\u0074\u006f \u006co\u0061d\u0020s\u0074\u0072\u0075\u0063\u0074\u0075\u0072\u0065\u0020\u0028\u0025\u0073\u0029",_eaec );
return false ,_eaec ;};return true ,nil ;};

// GetFillImage get attached model.Image in push button.
func (_dddf *PdfFieldButton )GetFillImage ()*Image {if _dddf .IsPush (){return _dddf ._bebf ;};return nil ;};func (_efcf *pdfCIDFontType2 )baseFields ()*fontCommon {return &_efcf .fontCommon };func _gcac (_cfaf _bf .PdfObject )(*PdfBorderStyle ,error ){_cgad :=&PdfBorderStyle {};
_cgad ._bbfg =_cfaf ;var _fbcb *_bf .PdfObjectDictionary ;_cfaf =_bf .TraceToDirectObject (_cfaf );_fbcb ,_agab :=_cfaf .(*_bf .PdfObjectDictionary );if !_agab {return nil ,_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};if _fcbf :=_fbcb .Get ("\u0054\u0079\u0070\u0065");
_fcbf !=nil {_gbf ,_cgbc :=_fcbf .(*_bf .PdfObjectName );if !_cgbc {_bc .Log .Debug ("I\u006e\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062i\u006c\u0069\u0074\u0079\u0020\u0077\u0069th\u0020\u0054\u0079\u0070e\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061me\u0020\u006fb\u006a\u0065\u0063\u0074\u003a\u0020\u0025\u0054",_fcbf );
}else {if *_gbf !="\u0042\u006f\u0072\u0064\u0065\u0072"{_bc .Log .Debug ("W\u0061\u0072\u006e\u0069\u006e\u0067,\u0020\u0054\u0079\u0070\u0065\u0020\u0021\u003d\u0020B\u006f\u0072\u0064e\u0072:\u0020\u0025\u0073",*_gbf );};};};if _cdcbc :=_fbcb .Get ("\u0057");
_cdcbc !=nil {_defbc ,_fgfe :=_bf .GetNumberAsFloat (_cdcbc );if _fgfe !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006fr \u0072\u0065\u0074\u0072\u0069\u0065\u0076\u0069\u006e\u0067\u0020\u0057\u003a\u0020%\u0076",_fgfe );return nil ,_fgfe ;};_cgad .W =&_defbc ;
};if _caea :=_fbcb .Get ("\u0053");_caea !=nil {_aced ,_agb :=_caea .(*_bf .PdfObjectName );if !_agb {return nil ,_eff .New ("\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u0053\u0020\u006e\u006ft\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u006f\u0062j\u0065\u0063\u0074");
};var _cffe BorderStyle ;switch *_aced {case "\u0053":_cffe =BorderStyleSolid ;case "\u0044":_cffe =BorderStyleDashed ;case "\u0042":_cffe =BorderStyleBeveled ;case "\u0049":_cffe =BorderStyleInset ;case "\u0055":_cffe =BorderStyleUnderline ;default:_bc .Log .Debug ("I\u006e\u0076\u0061\u006cid\u0020s\u0074\u0079\u006c\u0065\u0020n\u0061\u006d\u0065\u0020\u0025\u0073",*_aced );
return nil ,_eff .New ("\u0073\u0074\u0079\u006ce \u0074\u0079\u0070\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065c\u006b");};_cgad .S =&_cffe ;};if _gabd :=_fbcb .Get ("\u0044");_gabd !=nil {_caba ,_abbf :=_gabd .(*_bf .PdfObjectArray );
if !_abbf {_bc .Log .Debug ("\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u0044\u0020\u0064a\u0073\u0068\u0020\u006e\u006f\u0074\u0020a\u006e\u0020\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0054",_gabd );return nil ,_eff .New ("\u0062o\u0072\u0064\u0065\u0072 \u0044\u0020\u0074\u0079\u0070e\u0020c\u0068e\u0063\u006b\u0020\u0065\u0072\u0072\u006fr");
};_cbgdc ,_gefc :=_caba .ToIntegerArray ();if _gefc !=nil {_bc .Log .Debug ("\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u0044 \u0050\u0072\u006fbl\u0065\u006d\u0020\u0063\u006f\u006ev\u0065\u0072\u0074\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0069\u006e\u0074\u0065\u0067e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u003a \u0025\u0076",_gefc );
return nil ,_gefc ;};_cgad .D =&_cbgdc ;};return _cgad ,nil ;};func (_bcdf *PdfReader )buildPageList (_aagg *_bf .PdfIndirectObject ,_ceca *_bf .PdfIndirectObject ,_eafda map[_bf .PdfObject ]struct{})error {if _aagg ==nil {return nil ;};if _ ,_gbcbge :=_eafda [_aagg ];
_gbcbge {_bc .Log .Debug ("\u0043\u0079\u0063l\u0069\u0063\u0020\u0072e\u0063\u0075\u0072\u0073\u0069\u006f\u006e,\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0028\u0025\u0076\u0029",_aagg .ObjectNumber );return nil ;};_eafda [_aagg ]=struct{}{};
_cgff ,_acef :=_aagg .PdfObject .(*_bf .PdfObjectDictionary );if !_acef {return _eff .New ("n\u006f\u0064\u0065\u0020no\u0074 \u0061\u0020\u0064\u0069\u0063t\u0069\u006f\u006e\u0061\u0072\u0079");};_cgbg ,_acef :=(*_cgff ).Get ("\u0054\u0079\u0070\u0065").(*_bf .PdfObjectName );
if !_acef {if _cgff .Get ("\u004b\u0069\u0064\u0073")==nil {return _eff .New ("\u006e\u006f\u0064\u0065 \u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0054\u0079p\u0065 \u0028\u0052\u0065\u0071\u0075\u0069\u0072e\u0064\u0029");};_bc .Log .Debug ("ER\u0052\u004fR\u003a\u0020\u006e\u006f\u0064\u0065\u0020\u006d\u0069s\u0073\u0069\u006e\u0067\u0020\u0054\u0079\u0070\u0065\u002c\u0020\u0062\u0075\u0074\u0020\u0068\u0061\u0073\u0020\u004b\u0069\u0064\u0073\u002e\u0020\u0041\u0073\u0073u\u006di\u006e\u0067\u0020\u0050\u0061\u0067\u0065\u0073 \u006eo\u0064\u0065.");
_cgbg =_bf .MakeName ("\u0050\u0061\u0067e\u0073");_cgff .Set ("\u0054\u0079\u0070\u0065",_cgbg );};_bc .Log .Trace ("\u0062\u0075\u0069\u006c\u0064\u0050a\u0067\u0065\u004c\u0069\u0073\u0074\u0020\u006e\u006f\u0064\u0065\u0020\u0074y\u0070\u0065\u003a\u0020\u0025\u0073\u0020(\u0025\u002b\u0076\u0029",*_cgbg ,_aagg );
if *_cgbg =="\u0050\u0061\u0067\u0065"{_baed ,_abdbd :=_bcdf .newPdfPageFromDict (_cgff );if _abdbd !=nil {return _abdbd ;};_baed .setContainer (_aagg );if _ceca !=nil {_cgff .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_ceca );};_bcdf ._ggdg =append (_bcdf ._ggdg ,_aagg );
_bcdf .PageList =append (_bcdf .PageList ,_baed );return nil ;};if *_cgbg !="\u0050\u0061\u0067e\u0073"{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u006f\u0066\u0020\u0063\u006fnt\u0065n\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067 \u006e\u006f\u006e\u0020\u0050\u0061\u0067\u0065\u002f\u0050\u0061\u0067\u0065\u0073\u0020\u006f\u0062j\u0065\u0063\u0074\u0021\u0020\u0028\u0025\u0073\u0029",_cgbg );
return _eff .New ("\u0074\u0061\u0062\u006c\u0065\u0020o\u0066\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067 \u006e\u006f\u006e\u0020\u0050\u0061\u0067\u0065\u002f\u0050\u0061\u0067\u0065\u0073 \u006fb\u006a\u0065\u0063\u0074");
};if _ceca !=nil {_cgff .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_ceca );};if !_bcdf ._aggga {_gfdbf :=_bcdf .traverseObjectData (_aagg );if _gfdbf !=nil {return _gfdbf ;};};_gefgc ,_eagff :=_bcdf ._gafdb .Resolve (_cgff .Get ("\u004b\u0069\u0064\u0073"));
if _eagff !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0046\u0061\u0069\u006c\u0065\u0064\u0020\u006c\u006f\u0061\u0064\u0069\u006eg\u0020\u004b\u0069\u0064\u0073\u0020\u006fb\u006a\u0065\u0063\u0074");return _eagff ;};var _abcfc *_bf .PdfObjectArray ;
_abcfc ,_acef =_gefgc .(*_bf .PdfObjectArray );if !_acef {_gdgc ,_dddcg :=_gefgc .(*_bf .PdfIndirectObject );if !_dddcg {return _eff .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u004b\u0069\u0064\u0073\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_abcfc ,_acef =_gdgc .PdfObject .(*_bf .PdfObjectArray );
if !_acef {return _eff .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u004b\u0069\u0064\u0073\u0020\u0069\u006ed\u0069r\u0065\u0063\u0074\u0020\u006f\u0062\u006ae\u0063\u0074");};};_bc .Log .Trace ("\u004b\u0069\u0064\u0073\u003a\u0020\u0025\u0073",_abcfc );
for _eafdb ,_accfa :=range _abcfc .Elements (){_bcabf ,_cbacd :=_bf .GetIndirect (_accfa );if !_cbacd {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0050\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074 \u006f\u0062\u006a\u0065\u0063t\u0020\u002d \u0028\u0025\u0073\u0029",_bcabf );
return _eff .New ("\u0070a\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0064\u0069r\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_abcfc .Set (_eafdb ,_bcabf );_eagff =_bcdf .buildPageList (_bcabf ,_aagg ,_eafda );if _eagff !=nil {return _eagff ;
};};return nil ;};

// NewPermissions returns a new permissions object.
func NewPermissions (docMdp *PdfSignature )*Permissions {_ggacg :=Permissions {};_ggacg .DocMDP =docMdp ;_facbe :=_bf .MakeDict ();_facbe .Set ("\u0044\u006f\u0063\u004d\u0044\u0050",docMdp .ToPdfObject ());_ggacg ._agcgc =_facbe ;return &_ggacg ;};

// Set applies flag fl to the flag's bitmask and returns the combined flag.
func (_cabac FieldFlag )Set (fl FieldFlag )FieldFlag {return FieldFlag (_cabac .Mask ()|fl .Mask ())};

// ConvertToBinary converts current image into binary (bi-level) format.
// Binary images are composed of single bits per pixel (only black or white).
// If provided image has more color components, then it would be converted into binary image using
// histogram auto threshold function.
func (_geeec *Image )ConvertToBinary ()error {if _geeec .ColorComponents ==1&&_geeec .BitsPerComponent ==1{return nil ;};_dageg ,_gbgd :=_geeec .ToGoImage ();if _gbgd !=nil {return _gbgd ;};_fcgfe ,_gbgd :=_ff .MonochromeConverter .Convert (_dageg );if _gbgd !=nil {return _gbgd ;
};_geeec .Data =_fcgfe .Base ().Data ;_geeec ._gfegf ,_gbgd =_ff .ScaleAlphaToMonochrome (_geeec ._gfegf ,int (_geeec .Width ),int (_geeec .Height ));if _gbgd !=nil {return _gbgd ;};_geeec .BitsPerComponent =1;_geeec .ColorComponents =1;_geeec ._dbcfb =nil ;
return nil ;};

// StandardImplementer is an interface that defines specified PDF standards like PDF/A-1A (pdfa.Profile1A)
// NOTE: This implementation is in experimental development state.
// 	Keep in mind that it might change in the subsequent minor versions.
type StandardImplementer interface{StandardValidator ;StandardApplier ;

// StandardName gets the human-readable name of the standard.
StandardName ()string ;};

// EncryptOptions represents encryption options for an output PDF.
type EncryptOptions struct{Permissions _fd .Permissions ;Algorithm EncryptionAlgorithm ;};func (_gdfc *PdfAcroForm )fillImageWithAppearance (_cbcg FieldImageProvider ,_cecge FieldAppearanceGenerator )error {if _gdfc ==nil {return nil ;};_fgdgb ,_bbafd :=_cbcg .FieldImageValues ();
if _bbafd !=nil {return _bbafd ;};for _ ,_fcbbg :=range _gdfc .AllFields (){_bdga :=_fcbbg .PartialName ();_effa ,_gaedbe :=_fgdgb [_bdga ];if !_gaedbe {if _agbbe ,_ddgb :=_fcbbg .FullName ();_ddgb ==nil {_effa ,_gaedbe =_fgdgb [_agbbe ];};};if !_gaedbe {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020f\u006f\u0072\u006d \u0066\u0069\u0065l\u0064\u0020\u0025\u0073\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u0069n \u0074\u0068\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0072\u002e\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u002e",_bdga );
continue ;};switch _ababee :=_fcbbg .GetContext ().(type ){case *PdfFieldButton :if _ababee .IsPush (){_ababee .SetFillImage (_effa );};};if _cecge ==nil {continue ;};for _ ,_dcge :=range _fcbbg .Annotations {_fedfg ,_deba :=_cecge .GenerateAppearanceDict (_gdfc ,_fcbbg ,_dcge );
if _deba !=nil {return _deba ;};_dcge .AP =_fedfg ;_dcge .ToPdfObject ();};};return nil ;};

// ToPdfObject returns the choice field dictionary within an indirect object (container).
func (_bcgg *PdfFieldChoice )ToPdfObject ()_bf .PdfObject {_bcgg .PdfField .ToPdfObject ();_fdcd :=_bcgg ._fgcdf ;_bfac :=_fdcd .PdfObject .(*_bf .PdfObjectDictionary );_bfac .Set ("\u0046\u0054",_bf .MakeName ("\u0043\u0068"));if _bcgg .Opt !=nil {_bfac .Set ("\u004f\u0070\u0074",_bcgg .Opt );
};if _bcgg .TI !=nil {_bfac .Set ("\u0054\u0049",_bcgg .TI );};if _bcgg .I !=nil {_bfac .Set ("\u0049",_bcgg .I );};return _fdcd ;};func (_dgca *PdfReader )loadAction (_ebdc _bf .PdfObject )(*PdfAction ,error ){if _gfag ,_abe :=_bf .GetIndirect (_ebdc );
_abe {_ddad ,_eada :=_dgca .newPdfActionFromIndirectObject (_gfag );if _eada !=nil {return nil ,_eada ;};return _ddad ,nil ;}else if !_bf .IsNullObject (_ebdc ){return nil ,_eff .New ("\u0061\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0070\u006f\u0069\u006e\u0074 \u0074\u006f\u0020\u0061\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};return nil ,nil ;};const (RC4_128bit =EncryptionAlgorithm (iota );AES_128bit ;AES_256bit ;);

// HasXObjectByName checks if has XObject resource by name.
func (_feaga *PdfPage )HasXObjectByName (name _bf .PdfObjectName )bool {_aadge ,_gcaeb :=_feaga .Resources .XObject .(*_bf .PdfObjectDictionary );if !_gcaeb {return false ;};if _eacc :=_aadge .Get (name );_eacc !=nil {return true ;};return false ;};

// AcroFormNeedsRepair returns true if the document contains widget annotations
// linked to fields which are not referenced in the AcroForm. The AcroForm can
// be repaired using the RepairAcroForm method of the reader.
func (_fbfge *PdfReader )AcroFormNeedsRepair ()(bool ,error ){var _fafbb []*PdfField ;if _fbfge .AcroForm !=nil {_fafbb =_fbfge .AcroForm .AllFields ();};_adadab :=make (map[*PdfField ]struct{},len (_fafbb ));for _ ,_fbgd :=range _fafbb {_adadab [_fbgd ]=struct{}{};
};for _ ,_dedcad :=range _fbfge .PageList {_befac ,_dfedf :=_dedcad .GetAnnotations ();if _dfedf !=nil {return false ,_dfedf ;};for _ ,_gebc :=range _befac {_cedcg ,_accc :=_gebc .GetContext ().(*PdfAnnotationWidget );if !_accc {continue ;};_fbbe :=_cedcg .Field ();
if _fbbe ==nil {return true ,nil ;};if _ ,_fdagd :=_adadab [_fbbe ];!_fdagd {return true ,nil ;};};};return false ,nil ;};

// NewOutlineDest returns a new outline destination which can be used
// with outline items.
func NewOutlineDest (page int64 ,x ,y float64 )OutlineDest {return OutlineDest {Page :page ,Mode :"\u0058\u0059\u005a",X :x ,Y :y };};

// AddAnnotation appends `annot` to the list of page annotations.
func (_gcbgb *PdfPage )AddAnnotation (annot *PdfAnnotation ){if _gcbgb ._gbcab ==nil {_gcbgb .GetAnnotations ();};_gcbgb ._gbcab =append (_gcbgb ._gbcab ,annot );};

// GetSamples converts the raw byte slice into samples which are stored in a uint32 bit array.
// Each sample is represented by BitsPerComponent consecutive bits in the raw data.
// NOTE: The method resamples the image byte data before returning the result and
// this could lead to high memory usage, especially on large images. It should
// be avoided, when possible. It is recommended to access the Data field of the
// image directly or use the ColorAt method to extract individual pixels.
func (_bedd *Image )GetSamples ()[]uint32 {_eabg :=_de .ResampleBytes (_bedd .Data ,int (_bedd .BitsPerComponent ));if _bedd .BitsPerComponent < 8{_eabg =_bedd .samplesTrimPadding (_eabg );};_aeab :=int (_bedd .Width )*int (_bedd .Height )*_bedd .ColorComponents ;
if len (_eabg )< _aeab {_bc .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0054o\u006f\u0020\u0066\u0065\u0077\u0020\u0073a\u006d\u0070\u006c\u0065\u0073\u0020(\u0067\u006f\u0074\u0020\u0025\u0064\u002c\u0020\u0065\u0078\u0070e\u0063\u0074\u0069\u006e\u0067\u0020\u0025\u0064\u0029",len (_eabg ),_aeab );
return _eabg ;}else if len (_eabg )> _aeab {_bc .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0054o\u006f\u0020\u006d\u0061\u006e\u0079\u0020s\u0061\u006d\u0070\u006c\u0065\u0073 \u0028\u0067\u006f\u0074\u0020\u0025\u0064\u002c\u0020\u0065\u0078p\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u0025\u0064",len (_eabg ),_aeab );
_eabg =_eabg [:_aeab ];};return _eabg ;};func (_bead *PdfReader )newPdfAnnotationSoundFromDict (_bgfe *_bf .PdfObjectDictionary )(*PdfAnnotationSound ,error ){_feac :=PdfAnnotationSound {};_baab ,_aede :=_bead .newPdfAnnotationMarkupFromDict (_bgfe );if _aede !=nil {return nil ,_aede ;
};_feac .PdfAnnotationMarkup =_baab ;_feac .Name =_bgfe .Get ("\u004e\u0061\u006d\u0065");_feac .Sound =_bgfe .Get ("\u0053\u006f\u0075n\u0064");return &_feac ,nil ;};func (_gace *PdfColorspaceSpecialSeparation )String ()string {return "\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006f\u006e";
};

// PdfFieldText represents a text field where user can enter text.
type PdfFieldText struct{*PdfField ;DA *_bf .PdfObjectString ;Q *_bf .PdfObjectInteger ;DS *_bf .PdfObjectString ;RV _bf .PdfObject ;MaxLen *_bf .PdfObjectInteger ;};

// ToJBIG2Image converts current image to the core.JBIG2Image.
func (_becfad *Image )ToJBIG2Image ()(*_bf .JBIG2Image ,error ){_fefe ,_fefab :=_becfad .ToGoImage ();if _fefab !=nil {return nil ,_fefab ;};return _bf .GoImageToJBIG2 (_fefe ,_bf .JB2ImageAutoThreshold );};func (_agbf *PdfWriter )setHashIDs (_fceb _e .Hash )error {_febg :=_fceb .Sum (nil );
if _agbf ._ggfdb ==""{_agbf ._ggfdb =_fa .EncodeToString (_febg [:8]);};_agbf .setDocumentIDs (_agbf ._ggfdb ,_fa .EncodeToString (_febg [8:]));return nil ;};

// SetContext set the sub annotation (context).
func (_dfbda *PdfShading )SetContext (ctx PdfModel ){_dfbda ._bcgbde =ctx };

// PdfPageResourcesColorspaces contains the colorspace in the PdfPageResources.
// Needs to have matching name and colorspace map entry. The Names define the order.
type PdfPageResourcesColorspaces struct{Names []string ;Colorspaces map[string ]PdfColorspace ;_abca *_bf .PdfIndirectObject ;};func (_gdbaa *PdfWriter )writeTrailer (_bbbefb int ){_gdbaa .writeString ("\u0078\u0072\u0065\u0066\u000d\u000a");for _bbab :=0;
_bbab <=_bbbefb ;{for ;_bbab <=_bbbefb ;_bbab ++{_febfc ,_deacc :=_gdbaa ._baadg [_bbab ];if _deacc &&(!_gdbaa ._dgbga ||_gdbaa ._dgbga &&(_febfc .Type ==1&&_febfc .Offset >=_gdbaa ._gdgdd ||_febfc .Type ==0)){break ;};};var _fcecb int ;for _fcecb =_bbab +1;
_fcecb <=_bbbefb ;_fcecb ++{_fdcdb ,_fbgff :=_gdbaa ._baadg [_fcecb ];if _fbgff &&(!_gdbaa ._dgbga ||_gdbaa ._dgbga &&(_fdcdb .Type ==1&&_fdcdb .Offset > _gdbaa ._gdgdd )){continue ;};break ;};_acgaf :=_af .Sprintf ("\u0025d\u0020\u0025\u0064\u000d\u000a",_bbab ,_fcecb -_bbab );
_gdbaa .writeString (_acgaf );for _ccfgb :=_bbab ;_ccfgb < _fcecb ;_ccfgb ++{_babe :=_gdbaa ._baadg [_ccfgb ];switch _babe .Type {case 0:_acgaf =_af .Sprintf ("\u0025\u002e\u0031\u0030\u0064\u0020\u0025\u002e\u0035d\u0020\u0066\u000d\u000a",0,65535);_gdbaa .writeString (_acgaf );
case 1:_acgaf =_af .Sprintf ("\u0025\u002e\u0031\u0030\u0064\u0020\u0025\u002e\u0035d\u0020\u006e\u000d\u000a",_babe .Offset ,0);_gdbaa .writeString (_acgaf );};};_bbab =_fcecb +1;};_fbfde :=_bf .MakeDict ();_fbfde .Set ("\u0049\u006e\u0066\u006f",_gdbaa ._efddb );
_fbfde .Set ("\u0052\u006f\u006f\u0074",_gdbaa ._eacbc );_fbfde .Set ("\u0053\u0069\u007a\u0065",_bf .MakeInteger (int64 (_bbbefb +1)));if _gdbaa ._dgbga &&_gdbaa ._dbdff > 0{_fbfde .Set ("\u0050\u0072\u0065\u0076",_bf .MakeInteger (_gdbaa ._dbdff ));};
if _gdbaa ._ebefb !=nil {_fbfde .Set ("\u0045n\u0063\u0072\u0079\u0070\u0074",_gdbaa ._caacf );};if _gdbaa ._bdeaee ==nil &&_gdbaa ._ggfdb !=""&&_gdbaa ._ebecb !=""{_gdbaa ._bdeaee =_bf .MakeArray (_bf .MakeHexString (_gdbaa ._ggfdb ),_bf .MakeHexString (_gdbaa ._ebecb ));
};if _gdbaa ._bdeaee !=nil {_fbfde .Set ("\u0049\u0044",_gdbaa ._bdeaee );_bc .Log .Trace ("\u0049d\u0073\u003a\u0020\u0025\u0073",_gdbaa ._bdeaee );};_gdbaa .writeString ("\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u000a");_gdbaa .writeString (_fbfde .WriteString ());
_gdbaa .writeString ("\u000a");};

// String returns a string representation of what flags are set.
func (_deff FieldFlag )String ()string {_cfcf :="";if _deff ==FieldFlagClear {_cfcf ="\u0043\u006c\u0065a\u0072";return _cfcf ;};if _deff &FieldFlagReadOnly > 0{_cfcf +="\u007cR\u0065\u0061\u0064\u004f\u006e\u006cy";};if _deff &FieldFlagRequired > 0{_cfcf +="\u007cR\u0065\u0071\u0075\u0069\u0072\u0065d";
};if _deff &FieldFlagNoExport > 0{_cfcf +="\u007cN\u006f\u0045\u0078\u0070\u006f\u0072t";};if _deff &FieldFlagNoToggleToOff > 0{_cfcf +="\u007c\u004e\u006f\u0054\u006f\u0067\u0067\u006c\u0065T\u006f\u004f\u0066\u0066";};if _deff &FieldFlagRadio > 0{_cfcf +="\u007c\u0052\u0061\u0064\u0069\u006f";
};if _deff &FieldFlagPushbutton > 0{_cfcf +="|\u0050\u0075\u0073\u0068\u0062\u0075\u0074\u0074\u006f\u006e";};if _deff &FieldFlagRadiosInUnision > 0{_cfcf +="\u007c\u0052a\u0064\u0069\u006fs\u0049\u006e\u0055\u006e\u0069\u0073\u0069\u006f\u006e";};if _deff &FieldFlagMultiline > 0{_cfcf +="\u007c\u004d\u0075\u006c\u0074\u0069\u006c\u0069\u006e\u0065";
};if _deff &FieldFlagPassword > 0{_cfcf +="\u007cP\u0061\u0073\u0073\u0077\u006f\u0072d";};if _deff &FieldFlagFileSelect > 0{_cfcf +="|\u0046\u0069\u006c\u0065\u0053\u0065\u006c\u0065\u0063\u0074";};if _deff &FieldFlagDoNotScroll > 0{_cfcf +="\u007c\u0044\u006fN\u006f\u0074\u0053\u0063\u0072\u006f\u006c\u006c";
};if _deff &FieldFlagComb > 0{_cfcf +="\u007c\u0043\u006fm\u0062";};if _deff &FieldFlagRichText > 0{_cfcf +="\u007cR\u0069\u0063\u0068\u0054\u0065\u0078t";};if _deff &FieldFlagDoNotSpellCheck > 0{_cfcf +="\u007c\u0044o\u004e\u006f\u0074S\u0070\u0065\u006c\u006c\u0043\u0068\u0065\u0063\u006b";
};if _deff &FieldFlagCombo > 0{_cfcf +="\u007c\u0043\u006f\u006d\u0062\u006f";};if _deff &FieldFlagEdit > 0{_cfcf +="\u007c\u0045\u0064i\u0074";};if _deff &FieldFlagSort > 0{_cfcf +="\u007c\u0053\u006fr\u0074";};if _deff &FieldFlagMultiSelect > 0{_cfcf +="\u007c\u004d\u0075l\u0074\u0069\u0053\u0065\u006c\u0065\u0063\u0074";
};if _deff &FieldFlagCommitOnSelChange > 0{_cfcf +="\u007cC\u006fm\u006d\u0069\u0074\u004f\u006eS\u0065\u006cC\u0068\u0061\u006e\u0067\u0065";};return _gf .Trim (_cfcf ,"\u007c");};

// GetNumComponents returns the number of color components of the colorspace device.
// Returns 1 for a grayscale device.
func (_eafgdc *PdfColorspaceDeviceGray )GetNumComponents ()int {return 1};

// GetDescent returns the Descent of the font `descriptor`.
func (_agba *PdfFontDescriptor )GetDescent ()(float64 ,error ){return _bf .GetNumberAsFloat (_agba .Descent );};

// String returns string value of output intent for given type
// ISO_19005-2 6.2.3: GTS_PDFA1 value should be used for PDF/A-1, A-2 and A-3 at least
func (_eacgg PdfOutputIntentType )String ()string {switch _eacgg {case PdfOutputIntentTypeA1 :return "\u0047T\u0053\u005f\u0050\u0044\u0046\u00411";case PdfOutputIntentTypeA2 :return "\u0047T\u0053\u005f\u0050\u0044\u0046\u00411";case PdfOutputIntentTypeA3 :return "\u0047T\u0053\u005f\u0050\u0044\u0046\u00411";
case PdfOutputIntentTypeA4 :return "\u0047T\u0053\u005f\u0050\u0044\u0046\u00411";case PdfOutputIntentTypeX :return "\u0047\u0054\u0053\u005f\u0050\u0044\u0046\u0058";default:return "\u0055N\u0044\u0045\u0046\u0049\u004e\u0045D";};};

// GetNumComponents returns the number of color components (1 for grayscale).
func (_bbce *PdfColorDeviceGray )GetNumComponents ()int {return 1};

// NewPdfColorspaceCalGray returns a new CalGray colorspace object.
func NewPdfColorspaceCalGray ()*PdfColorspaceCalGray {_caae :=&PdfColorspaceCalGray {};_caae .BlackPoint =[]float64 {0.0,0.0,0.0};_caae .Gamma =1;return _caae ;};

// NewPdfAnnotationFreeText returns a new free text annotation.
func NewPdfAnnotationFreeText ()*PdfAnnotationFreeText {_ceg :=NewPdfAnnotation ();_ged :=&PdfAnnotationFreeText {};_ged .PdfAnnotation =_ceg ;_ged .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_ceg .SetContext (_ged );return _ged ;};func (_adaf *PdfReader )newPdfPageFromDict (_aeafb *_bf .PdfObjectDictionary )(*PdfPage ,error ){_gaagb :=NewPdfPage ();
_gaagb ._dfcbc =_aeafb ;_ddcce :=*_aeafb ;_bbda ,_acadeg :=_ddcce .Get ("\u0054\u0079\u0070\u0065").(*_bf .PdfObjectName );if !_acadeg {return nil ,_eff .New ("\u006d\u0069ss\u0069\u006e\u0067/\u0069\u006e\u0076\u0061lid\u0020Pa\u0067\u0065\u0020\u0064\u0069\u0063\u0074io\u006e\u0061\u0072\u0079\u0020\u0054\u0079p\u0065");
};if *_bbda !="\u0050\u0061\u0067\u0065"{return nil ,_eff .New ("\u0070\u0061\u0067\u0065 \u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0054y\u0070\u0065\u0020\u0021\u003d\u0020\u0050a\u0067\u0065");};if _abdgc :=_ddcce .Get ("\u0050\u0061\u0072\u0065\u006e\u0074");
_abdgc !=nil {_gaagb .Parent =_abdgc ;};if _ebfgd :=_ddcce .Get ("\u004c\u0061\u0073t\u004d\u006f\u0064\u0069\u0066\u0069\u0065\u0064");_ebfgd !=nil {_cbedaf ,_fafa :=_bf .GetString (_ebfgd );if !_fafa {return nil ,_eff .New ("\u0070\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u004c\u0061\u0073\u0074\u004d\u006f\u0064\u0069f\u0069\u0065\u0064\u0020\u0021=\u0020\u0073t\u0072\u0069\u006e\u0067");
};_fggc ,_bgeebb :=NewPdfDate (_cbedaf .Str ());if _bgeebb !=nil {return nil ,_bgeebb ;};_gaagb .LastModified =&_fggc ;};if _addag :=_ddcce .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s");_addag !=nil &&!_bf .IsNullObject (_addag ){_dbeba ,_bgaa :=_bf .GetDict (_addag );
if !_bgaa {return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063e\u0020d\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0028\u0025\u0054\u0029",_addag );};var _eged error ;_gaagb .Resources ,_eged =NewPdfPageResourcesFromDict (_dbeba );
if _eged !=nil {return nil ,_eged ;};}else {_aebaf ,_gcdcg :=_gaagb .getParentResources ();if _gcdcg !=nil {return nil ,_gcdcg ;};if _aebaf ==nil {_aebaf =NewPdfPageResources ();};_gaagb .Resources =_aebaf ;};if _bcfbc :=_ddcce .Get ("\u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078");
_bcfbc !=nil {_edad ,_abcf :=_bf .GetArray (_bcfbc );if !_abcf {return nil ,_eff .New ("\u0070\u0061\u0067\u0065\u0020\u004d\u0065\u0064\u0069\u0061\u0042o\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072\u0061\u0079");};var _dfbbb error ;
_gaagb .MediaBox ,_dfbbb =NewPdfRectangle (*_edad );if _dfbbb !=nil {return nil ,_dfbbb ;};};if _bdgga :=_ddcce .Get ("\u0043r\u006f\u0070\u0042\u006f\u0078");_bdgga !=nil {_edabbb ,_fbeaa :=_bf .GetArray (_bdgga );if !_fbeaa {return nil ,_eff .New ("\u0070a\u0067\u0065\u0020\u0043r\u006f\u0070\u0042\u006f\u0078 \u006eo\u0074 \u0061\u006e\u0020\u0061\u0072\u0072\u0061y");
};var _faeda error ;_gaagb .CropBox ,_faeda =NewPdfRectangle (*_edabbb );if _faeda !=nil {return nil ,_faeda ;};};if _cfdae :=_ddcce .Get ("\u0042\u006c\u0065\u0065\u0064\u0042\u006f\u0078");_cfdae !=nil {_deag ,_gcafe :=_bf .GetArray (_cfdae );if !_gcafe {return nil ,_eff .New ("\u0070\u0061\u0067\u0065\u0020\u0042\u006c\u0065\u0065\u0064\u0042o\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072\u0061\u0079");
};var _adceg error ;_gaagb .BleedBox ,_adceg =NewPdfRectangle (*_deag );if _adceg !=nil {return nil ,_adceg ;};};if _bdedgg :=_ddcce .Get ("\u0054r\u0069\u006d\u0042\u006f\u0078");_bdedgg !=nil {_aaeb ,_cgbd :=_bf .GetArray (_bdedgg );if !_cgbd {return nil ,_eff .New ("\u0070a\u0067\u0065\u0020\u0054r\u0069\u006d\u0042\u006f\u0078 \u006eo\u0074 \u0061\u006e\u0020\u0061\u0072\u0072\u0061y");
};var _befgfc error ;_gaagb .TrimBox ,_befgfc =NewPdfRectangle (*_aaeb );if _befgfc !=nil {return nil ,_befgfc ;};};if _bdgag :=_ddcce .Get ("\u0041\u0072\u0074\u0042\u006f\u0078");_bdgag !=nil {_cedca ,_fdage :=_bf .GetArray (_bdgag );if !_fdage {return nil ,_eff .New ("\u0070a\u0067\u0065\u0020\u0041\u0072\u0074\u0042\u006f\u0078\u0020\u006eo\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};var _gdaag error ;_gaagb .ArtBox ,_gdaag =NewPdfRectangle (*_cedca );if _gdaag !=nil {return nil ,_gdaag ;};};if _fabae :=_ddcce .Get ("\u0042\u006f\u0078C\u006f\u006c\u006f\u0072\u0049\u006e\u0066\u006f");_fabae !=nil {_gaagb .BoxColorInfo =_fabae ;
};if _eggdfd :=_ddcce .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_eggdfd !=nil {_gaagb .Contents =_eggdfd ;};if _ecbfd :=_ddcce .Get ("\u0052\u006f\u0074\u0061\u0074\u0065");_ecbfd !=nil {_babfc ,_cbbcc :=_bf .GetNumberAsInt64 (_ecbfd );
if _cbbcc !=nil {return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0061\u0067e\u0020\u0052\u006f\u0074\u0061\u0074\u0065\u0020\u006f\u0062j\u0065\u0063\u0074");};_gaagb .Rotate =&_babfc ;};if _eagde :=_ddcce .Get ("\u0047\u0072\u006fu\u0070");
_eagde !=nil {_gaagb .Group =_eagde ;};if _cggb :=_ddcce .Get ("\u0054\u0068\u0075m\u0062");_cggb !=nil {_gaagb .Thumb =_cggb ;};if _cfbdc :=_ddcce .Get ("\u0042");_cfbdc !=nil {_gaagb .B =_cfbdc ;};if _aacdg :=_ddcce .Get ("\u0044\u0075\u0072");_aacdg !=nil {_gaagb .Dur =_aacdg ;
};if _daadf :=_ddcce .Get ("\u0054\u0072\u0061n\u0073");_daadf !=nil {_gaagb .Trans =_daadf ;};if _geda :=_ddcce .Get ("\u0041\u0041");_geda !=nil {_gaagb .AA =_geda ;};if _afdec :=_ddcce .Get ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061");_afdec !=nil {_gaagb .Metadata =_afdec ;
};if _aeeb :=_ddcce .Get ("\u0050i\u0065\u0063\u0065\u0049\u006e\u0066o");_aeeb !=nil {_gaagb .PieceInfo =_aeeb ;};if _acgdf :=_ddcce .Get ("\u0053\u0074\u0072\u0075\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074\u0073");_acgdf !=nil {_gaagb .StructParents =_acgdf ;
};if _deagf :=_ddcce .Get ("\u0049\u0044");_deagf !=nil {_gaagb .ID =_deagf ;};if _bagbaa :=_ddcce .Get ("\u0050\u005a");_bagbaa !=nil {_gaagb .PZ =_bagbaa ;};if _gaffg :=_ddcce .Get ("\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006fn\u0049\u006e\u0066\u006f");
_gaffg !=nil {_gaagb .SeparationInfo =_gaffg ;};if _dabddc :=_ddcce .Get ("\u0054\u0061\u0062\u0073");_dabddc !=nil {_gaagb .Tabs =_dabddc ;};if _ffcff :=_ddcce .Get ("T\u0065m\u0070\u006c\u0061\u0074\u0065\u0049\u006e\u0073t\u0061\u006e\u0074\u0069at\u0065\u0064");
_ffcff !=nil {_gaagb .TemplateInstantiated =_ffcff ;};if _ccefe :=_ddcce .Get ("\u0050r\u0065\u0073\u0053\u0074\u0065\u0070s");_ccefe !=nil {_gaagb .PresSteps =_ccefe ;};if _adada :=_ddcce .Get ("\u0055\u0073\u0065\u0072\u0055\u006e\u0069\u0074");_adada !=nil {_gaagb .UserUnit =_adada ;
};if _dbgda :=_ddcce .Get ("\u0056\u0050");_dbgda !=nil {_gaagb .VP =_dbgda ;};if _bebcc :=_ddcce .Get ("\u0041\u006e\u006e\u006f\u0074\u0073");_bebcc !=nil {_gaagb .Annots =_bebcc ;};_gaagb ._eegf =_adaf ;return _gaagb ,nil ;};func (_fgagg *PdfSignature )extractChainFromPKCS7 ()([]*_d .Certificate ,error ){_geade ,_cefgd :=_bcg .Parse (_fgagg .Contents .Bytes ());
if _cefgd !=nil {return nil ,_cefgd ;};return _geade .Certificates ,nil ;};

// Optimizer is the interface that performs optimization of PDF object structure for output writing.
//
// Optimize receives a slice of input `objects`, performs optimization, including removing, replacing objects and
// output the optimized slice of objects.
type Optimizer interface{Optimize (_geedc []_bf .PdfObject )([]_bf .PdfObject ,error );};

// NewImageFromGoImage creates a new NRGBA32 unidoc Image from a golang Image.
// If `goimg` is grayscale (*goimage.Gray8) then calls NewGrayImageFromGoImage instead.
func (_fgea DefaultImageHandler )NewImageFromGoImage (goimg _b .Image )(*Image ,error ){_egfbf ,_fcdg :=_ff .FromGoImage (goimg );if _fcdg !=nil {return nil ,_fcdg ;};_baege :=_cgfba (_egfbf .Base ());return &_baege ,nil ;};

// PdfSignature represents a PDF signature dictionary and is used for signing via form signature fields.
// (Section 12.8, Table 252 - Entries in a signature dictionary p. 475 in PDF32000_2008).
type PdfSignature struct{Handler SignatureHandler ;_decde *_bf .PdfIndirectObject ;

// Type: Sig/DocTimeStamp
Type *_bf .PdfObjectName ;Filter *_bf .PdfObjectName ;SubFilter *_bf .PdfObjectName ;Contents *_bf .PdfObjectString ;Cert _bf .PdfObject ;ByteRange *_bf .PdfObjectArray ;Reference *_bf .PdfObjectArray ;Changes *_bf .PdfObjectArray ;Name *_bf .PdfObjectString ;
M *_bf .PdfObjectString ;Location *_bf .PdfObjectString ;Reason *_bf .PdfObjectString ;ContactInfo *_bf .PdfObjectString ;R *_bf .PdfObjectInteger ;V *_bf .PdfObjectInteger ;PropBuild *_bf .PdfObjectDictionary ;PropAuthTime *_bf .PdfObjectInteger ;PropAuthType *_bf .PdfObjectName ;
};func (_fcfc *PdfReader )newPdfAnnotationFreeTextFromDict (_dgf *_bf .PdfObjectDictionary )(*PdfAnnotationFreeText ,error ){_dgdd :=PdfAnnotationFreeText {};_ecde ,_efed :=_fcfc .newPdfAnnotationMarkupFromDict (_dgf );if _efed !=nil {return nil ,_efed ;
};_dgdd .PdfAnnotationMarkup =_ecde ;_dgdd .DA =_dgf .Get ("\u0044\u0041");_dgdd .Q =_dgf .Get ("\u0051");_dgdd .RC =_dgf .Get ("\u0052\u0043");_dgdd .DS =_dgf .Get ("\u0044\u0053");_dgdd .CL =_dgf .Get ("\u0043\u004c");_dgdd .IT =_dgf .Get ("\u0049\u0054");
_dgdd .BE =_dgf .Get ("\u0042\u0045");_dgdd .RD =_dgf .Get ("\u0052\u0044");_dgdd .BS =_dgf .Get ("\u0042\u0053");_dgdd .LE =_dgf .Get ("\u004c\u0045");return &_dgdd ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_fcgca *PdfAnnotationFreeText )ToPdfObject ()_bf .PdfObject {_fcgca .PdfAnnotation .ToPdfObject ();_egba :=_fcgca ._cdaf ;_eadc :=_egba .PdfObject .(*_bf .PdfObjectDictionary );_fcgca .PdfAnnotationMarkup .appendToPdfDictionary (_eadc );_eadc .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0046\u0072\u0065\u0065\u0054\u0065\u0078\u0074"));
_eadc .SetIfNotNil ("\u0044\u0041",_fcgca .DA );_eadc .SetIfNotNil ("\u0051",_fcgca .Q );_eadc .SetIfNotNil ("\u0052\u0043",_fcgca .RC );_eadc .SetIfNotNil ("\u0044\u0053",_fcgca .DS );_eadc .SetIfNotNil ("\u0043\u004c",_fcgca .CL );_eadc .SetIfNotNil ("\u0049\u0054",_fcgca .IT );
_eadc .SetIfNotNil ("\u0042\u0045",_fcgca .BE );_eadc .SetIfNotNil ("\u0052\u0044",_fcgca .RD );_eadc .SetIfNotNil ("\u0042\u0053",_fcgca .BS );_eadc .SetIfNotNil ("\u004c\u0045",_fcgca .LE );return _egba ;};

// PdfFontDescriptor specifies metrics and other attributes of a font and can refer to a FontFile
// for embedded fonts.
// 9.8 Font Descriptors (page 281)
type PdfFontDescriptor struct{FontName _bf .PdfObject ;FontFamily _bf .PdfObject ;FontStretch _bf .PdfObject ;FontWeight _bf .PdfObject ;Flags _bf .PdfObject ;FontBBox _bf .PdfObject ;ItalicAngle _bf .PdfObject ;Ascent _bf .PdfObject ;Descent _bf .PdfObject ;
Leading _bf .PdfObject ;CapHeight _bf .PdfObject ;XHeight _bf .PdfObject ;StemV _bf .PdfObject ;StemH _bf .PdfObject ;AvgWidth _bf .PdfObject ;MaxWidth _bf .PdfObject ;MissingWidth _bf .PdfObject ;FontFile _bf .PdfObject ;FontFile2 _bf .PdfObject ;FontFile3 _bf .PdfObject ;
CharSet _bf .PdfObject ;_edcaf int ;_dbdgeb float64 ;*fontFile ;_geabf *_eb .TtfType ;

// Additional entries for CIDFonts
Style _bf .PdfObject ;Lang _bf .PdfObject ;FD _bf .PdfObject ;CIDSet _bf .PdfObject ;_cebg *_bf .PdfIndirectObject ;};

// ToPdfObject implements interface PdfModel.
func (_egfba *Permissions )ToPdfObject ()_bf .PdfObject {return _egfba ._agcgc };func (_gbdc *pdfFontType3 )baseFields ()*fontCommon {return &_gbdc .fontCommon };

// GetOCProperties returns the optional content properties PdfObject.
func (_bcbe *PdfReader )GetOCProperties ()(_bf .PdfObject ,error ){_afgbe :=_bcbe ._dbaea ;_dgbcb :=_afgbe .Get ("\u004f\u0043\u0050r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_dgbcb =_bf .ResolveReference (_dgbcb );if !_bcbe ._aggga {_decfa :=_bcbe .traverseObjectData (_dgbcb );
if _decfa !=nil {return nil ,_decfa ;};};return _dgbcb ,nil ;};func (_cbcag *LTV )enable (_feag ,_aabcf []*_d .Certificate ,_eecd string )error {_gafd ,_cgfcgf ,_deccc :=_cbcag .buildCertChain (_feag ,_aabcf );if _deccc !=nil {return _deccc ;};_ddeac ,_deccc :=_cbcag .getCerts (_gafd );
if _deccc !=nil {return _deccc ;};var _agbe ,_fbdff [][]byte ;if _cbcag .OCSPClient !=nil {_agbe ,_deccc =_cbcag .getOCSPs (_gafd ,_cgfcgf );if _deccc !=nil {return _deccc ;};};if _cbcag .CRLClient !=nil {_fbdff ,_deccc =_cbcag .getCRLs (_gafd );if _deccc !=nil {return _deccc ;
};};_ceecde :=_cbcag ._gcgg ;_ggefb ,_deccc :=_ceecde .addCerts (_ddeac );if _deccc !=nil {return _deccc ;};_eefgb ,_deccc :=_ceecde .addOCSPs (_agbe );if _deccc !=nil {return _deccc ;};_fcea ,_deccc :=_ceecde .addCRLs (_fbdff );if _deccc !=nil {return _deccc ;
};if _eecd !=""{_ceecde .VRI [_eecd ]=&VRI {Cert :_ggefb ,OCSP :_eefgb ,CRL :_fcea };};_cbcag ._ceaaf .SetDSS (_ceecde );return nil ;};

// ToPdfObject implements interface PdfModel.
func (_ecac *PdfAnnotationFileAttachment )ToPdfObject ()_bf .PdfObject {_ecac .PdfAnnotation .ToPdfObject ();_gdeb :=_ecac ._cdaf ;_dbbcg :=_gdeb .PdfObject .(*_bf .PdfObjectDictionary );_ecac .PdfAnnotationMarkup .appendToPdfDictionary (_dbbcg );_dbbcg .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0046\u0069\u006c\u0065\u0041\u0074\u0074\u0061\u0063h\u006d\u0065\u006e\u0074"));
_dbbcg .SetIfNotNil ("\u0046\u0053",_ecac .FS );_dbbcg .SetIfNotNil ("\u004e\u0061\u006d\u0065",_ecac .Name );return _gdeb ;};

// SetXObjectByName adds the XObject from the passed in stream to the page resources.
// The added XObject is identified by the specified name.
func (_acgdff *PdfPageResources )SetXObjectByName (keyName _bf .PdfObjectName ,stream *_bf .PdfObjectStream )error {if _acgdff .XObject ==nil {_acgdff .XObject =_bf .MakeDict ();};_cfaca :=_bf .TraceToDirectObject (_acgdff .XObject );_dgfbg ,_agfec :=_cfaca .(*_bf .PdfObjectDictionary );
if !_agfec {_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0058\u004f\u0062j\u0065\u0063\u0074\u002c\u0020\u0067\u006f\u0074\u0020\u0025T\u002f\u0025\u0054",_acgdff .XObject ,_cfaca );return _eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
};_dgfbg .Set (keyName ,stream );return nil ;};

// NewPdfAnnotationPolygon returns a new polygon annotation.
func NewPdfAnnotationPolygon ()*PdfAnnotationPolygon {_cfbg :=NewPdfAnnotation ();_cfg :=&PdfAnnotationPolygon {};_cfg .PdfAnnotation =_cfbg ;_cfg .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_cfbg .SetContext (_cfg );return _cfg ;};

// NewPdfSignature creates a new PdfSignature object.
func NewPdfSignature (handler SignatureHandler )*PdfSignature {_eede :=&PdfSignature {Type :_bf .MakeName ("\u0053\u0069\u0067"),Handler :handler };_ceced :=&pdfSignDictionary {PdfObjectDictionary :_bf .MakeDict (),_efdd :&handler ,_debae :_eede };_eede ._decde =_bf .MakeIndirectObject (_ceced );
return _eede ;};func _gaada (_acadf *fontCommon )*pdfFontType3 {return &pdfFontType3 {fontCommon :*_acadf }};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// components. The slice should contain three PdfObjectFloat elements representing
// the A, B and C components of the color.
func (_gabf *PdfColorspaceCalRGB )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=3{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_ggb ,_gacg :=_bf .GetNumbersAsFloat (objects );
if _gacg !=nil {return nil ,_gacg ;};return _gabf .ColorFromFloats (_ggb );};var (_ggeae _f .Mutex ;_bfaacc ="";_gfacae _g .Time ;_afadd ="";_dafd ="";_dceee _g .Time ;_cfbed ="";_dfecf ="";_dagbe ="";);

// GetNumComponents returns the number of color components (3 for Lab).
func (_cfbc *PdfColorLab )GetNumComponents ()int {return 3};

// PdfAnnotationPrinterMark represents PrinterMark annotations.
// (Section 12.5.6.20).
type PdfAnnotationPrinterMark struct{*PdfAnnotation ;MN _bf .PdfObject ;};func _fcaa (_afffe *fontCommon )*pdfCIDFontType0 {return &pdfCIDFontType0 {fontCommon :*_afffe }};

// SetContentStream sets the pattern cell's content stream.
func (_dfeg *PdfTilingPattern )SetContentStream (content []byte ,encoder _bf .StreamEncoder )error {_gffbae ,_bdced :=_dfeg ._bfcdg .(*_bf .PdfObjectStream );if !_bdced {_bc .Log .Debug ("\u0054\u0069l\u0069\u006e\u0067\u0020\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_dfeg ._bfcdg );
return _bf .ErrTypeError ;};if encoder ==nil {encoder =_bf .NewRawEncoder ();};_cgbag :=_gffbae .PdfObjectDictionary ;_cbfg :=encoder .MakeStreamDict ();_cgbag .Merge (_cbfg );_faead ,_geeef :=encoder .EncodeBytes (content );if _geeef !=nil {return _geeef ;
};_cgbag .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_faead ))));_gffbae .Stream =_faead ;return nil ;};

// PdfAnnotationPopup represents Popup annotations.
// (Section 12.5.6.14).
type PdfAnnotationPopup struct{*PdfAnnotation ;Parent _bf .PdfObject ;Open _bf .PdfObject ;};

// PdfFunctionType3 defines stitching of the subdomains of several 1-input functions to produce
// a single new 1-input function.
type PdfFunctionType3 struct{Domain []float64 ;Range []float64 ;Functions []PdfFunction ;Bounds []float64 ;Encode []float64 ;_adcdfg *_bf .PdfIndirectObject ;};

// PdfActionGoTo represents a GoTo action.
type PdfActionGoTo struct{*PdfAction ;D _bf .PdfObject ;};

// PdfColorspace interface defines the common methods of a PDF colorspace.
// The colorspace defines the data storage format for each color and color representation.
//
// Device based colorspace, specified by name
// - /DeviceGray
// - /DeviceRGB
// - /DeviceCMYK
//
// CIE based colorspace specified by [name, dictionary]
// - [/CalGray dict]
// - [/CalRGB dict]
// - [/Lab dict]
// - [/ICCBased dict]
//
// Special colorspaces
// - /Pattern
// - /Indexed
// - /Separation
// - /DeviceN
//
// Work is in progress to support all colorspaces. At the moment ICCBased color spaces fall back to the alternate
// colorspace which works OK in most cases. For full color support, will need fully featured ICC support.
type PdfColorspace interface{

// String returns the PdfColorspace's name.
String ()string ;

// ImageToRGB converts an Image in a given PdfColorspace to an RGB image.
ImageToRGB (Image )(Image ,error );

// ColorToRGB converts a single color in a given PdfColorspace to an RGB color.
ColorToRGB (_eafde PdfColor )(PdfColor ,error );

// GetNumComponents returns the number of components in the PdfColorspace.
GetNumComponents ()int ;

// ToPdfObject returns a PdfObject representation of the PdfColorspace.
ToPdfObject ()_bf .PdfObject ;

// ColorFromPdfObjects returns a PdfColor in the given PdfColorspace from an array of PdfObject where each
// PdfObject represents a numeric value.
ColorFromPdfObjects (_ggeg []_bf .PdfObject )(PdfColor ,error );

// ColorFromFloats returns a new PdfColor based on input color components for a given PdfColorspace.
ColorFromFloats (_adgc []float64 )(PdfColor ,error );

// DecodeArray returns the Decode array for the PdfColorSpace, i.e. the range of each component.
DecodeArray ()[]float64 ;};

// SetDate sets the `M` field of the signature.
func (_ecgd *PdfSignature )SetDate (date _g .Time ,format string ){if format ==""{format ="\u0044\u003a\u003200\u0036\u0030\u0031\u0030\u0032\u0031\u0035\u0030\u0034\u0030\u0035\u002d\u0030\u0037\u0027\u0030\u0030\u0027";};_ecgd .M =_bf .MakeString (date .Format (format ));
};

// ImageToRGB converts Lab colorspace image to RGB and returns the result.
func (_cbeg *PdfColorspaceLab )ImageToRGB (img Image )(Image ,error ){_eedc :=func (_aaga float64 )float64 {if _aaga >=6.0/29{return _aaga *_aaga *_aaga ;};return 108.0/841*(_aaga -4/29);};_abeb :=img ._dbcfb ;if len (_abeb )!=6{_bc .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u002d\u0020\u004c\u0061\u0062\u0020\u0044e\u0063\u006f\u0064\u0065\u0020\u0072\u0061\u006e\u0067e\u0020\u0021\u003d\u0020\u0036\u002e\u002e\u002e\u0020\u0075\u0073\u0065\u0020\u005b0\u0020\u0031\u0030\u0030\u0020\u0061\u006d\u0069\u006e\u0020\u0061\u006d\u0061\u0078\u0020\u0062\u006d\u0069\u006e\u0020\u0062\u006d\u0061\u0078\u005d\u0020\u0064\u0065\u0066\u0061u\u006c\u0074\u0020\u0064\u0065\u0063\u006f\u0064\u0065 \u0061\u0072r\u0061\u0079");
_abeb =_cbeg .DecodeArray ();};_fdef :=_de .NewReader (img .getBase ());_bfad :=_ff .NewImageBase (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),3,nil ,img ._gfegf ,img ._dbcfb );_cdga :=_de .NewWriter (_bfad );_gcacc :=_fg .Pow (2,float64 (img .BitsPerComponent ))-1;
_fecec :=make ([]uint32 ,3);var (_dgedd error ;Ls ,As ,Bs ,L ,M ,N ,X ,Y ,Z ,_cbcad ,_beef ,_fgaf float64 ;);for {_dgedd =_fdef .ReadSamples (_fecec );if _dgedd ==_ag .EOF {break ;}else if _dgedd !=nil {return img ,_dgedd ;};Ls =float64 (_fecec [0])/_gcacc ;
As =float64 (_fecec [1])/_gcacc ;Bs =float64 (_fecec [2])/_gcacc ;Ls =_ff .LinearInterpolate (Ls ,0.0,1.0,_abeb [0],_abeb [1]);As =_ff .LinearInterpolate (As ,0.0,1.0,_abeb [2],_abeb [3]);Bs =_ff .LinearInterpolate (Bs ,0.0,1.0,_abeb [4],_abeb [5]);L =(Ls +16)/116+As /500;
M =(Ls +16)/116;N =(Ls +16)/116-Bs /200;X =_cbeg .WhitePoint [0]*_eedc (L );Y =_cbeg .WhitePoint [1]*_eedc (M );Z =_cbeg .WhitePoint [2]*_eedc (N );_cbcad =3.240479*X +-1.537150*Y +-0.498535*Z ;_beef =-0.969256*X +1.875992*Y +0.041556*Z ;_fgaf =0.055648*X +-0.204043*Y +1.057311*Z ;
_cbcad =_fg .Min (_fg .Max (_cbcad ,0),1.0);_beef =_fg .Min (_fg .Max (_beef ,0),1.0);_fgaf =_fg .Min (_fg .Max (_fgaf ,0),1.0);_fecec [0]=uint32 (_cbcad *_gcacc );_fecec [1]=uint32 (_beef *_gcacc );_fecec [2]=uint32 (_fgaf *_gcacc );if _dgedd =_cdga .WriteSamples (_fecec );
_dgedd !=nil {return img ,_dgedd ;};};return _cgfba (&_bfad ),nil ;};func (_dcdc *PdfWriter )makeOffSetReference (_ffecf int64 ){_ffage :=_af .Sprintf ("\u0073\u0074\u0061\u0072\u0074\u0078\u0072\u0065\u0066\u000a\u0025\u0064\u000a",_ffecf );_dcdc .writeString (_ffage );
_dcdc .writeString ("\u0025\u0025\u0045\u004f\u0046\u000a");};

// IsTiling specifies if the pattern is a tiling pattern.
func (_dcfcf *PdfPattern )IsTiling ()bool {return _dcfcf .PatternType ==1};func (_gef *PdfReader )newPdfActionFromIndirectObject (_dbba *_bf .PdfIndirectObject )(*PdfAction ,error ){_ece ,_eab :=_dbba .PdfObject .(*_bf .PdfObjectDictionary );if !_eab {return nil ,_af .Errorf ("\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0069\u006e\u0064\u0069\u0072\u0065\u0063\u0074\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u006e\u006f\u0074 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020a\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};if model :=_gef ._fgac .GetModelFromPrimitive (_ece );model !=nil {_fega ,_ccc :=model .(*PdfAction );if !_ccc {return nil ,_af .Errorf ("\u0063\u0061c\u0068\u0065\u0064\u0020\u006d\u006f\u0064\u0065\u006c\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0050\u0044\u0046\u0020\u0061\u0063ti\u006f\u006e");
};return _fega ,nil ;};_fbf :=&PdfAction {};_fbf ._fda =_dbba ;_gef ._fgac .Register (_ece ,_fbf );if _da :=_ece .Get ("\u0054\u0079\u0070\u0065");_da !=nil {_adc ,_gec :=_da .(*_bf .PdfObjectName );if !_gec {_bc .Log .Trace ("\u0049\u006e\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u0021\u0020\u0049\u006e\u0076a\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u006f\u0066\u0020\u0054\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u0029\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u004e\u0061m\u0065",_da );
}else {if *_adc !="\u0041\u0063\u0074\u0069\u006f\u006e"{_bc .Log .Trace ("\u0055\u006e\u0073u\u0073\u0070\u0065\u0063t\u0065\u0064\u0020\u0054\u0079\u0070\u0065 \u0021\u003d\u0020\u0041\u0063\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",*_adc );
};_fbf .Type =_adc ;};};if _dgce :=_ece .Get ("\u004e\u0065\u0078\u0074");_dgce !=nil {_fbf .Next =_dgce ;};if _aafg :=_ece .Get ("\u0053");_aafg !=nil {_fbf .S =_aafg ;};_ed ,_bae :=_fbf .S .(*_bf .PdfObjectName );if !_bae {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0053\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0021\u003d\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0025\u0054\u0029",_fbf .S );
return nil ,_af .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0053\u0020\u006f\u0062\u006a\u0065c\u0074 \u0074y\u0070e\u0020\u0021\u003d\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0025\u0054\u0029",_fbf .S );};_abd :=PdfActionType (_ed .String ());
switch _abd {case ActionTypeGoTo :_eabf ,_gad :=_gef .newPdfActionGotoFromDict (_ece );if _gad !=nil {return nil ,_gad ;};_eabf .PdfAction =_fbf ;_fbf ._baf =_eabf ;return _fbf ,nil ;case ActionTypeGoToR :_cfd ,_bcae :=_gef .newPdfActionGotoRFromDict (_ece );
if _bcae !=nil {return nil ,_bcae ;};_cfd .PdfAction =_fbf ;_fbf ._baf =_cfd ;return _fbf ,nil ;case ActionTypeGoToE :_fbfe ,_aca :=_gef .newPdfActionGotoEFromDict (_ece );if _aca !=nil {return nil ,_aca ;};_fbfe .PdfAction =_fbf ;_fbf ._baf =_fbfe ;return _fbf ,nil ;
case ActionTypeLaunch :_dbc ,_bgb :=_gef .newPdfActionLaunchFromDict (_ece );if _bgb !=nil {return nil ,_bgb ;};_dbc .PdfAction =_fbf ;_fbf ._baf =_dbc ;return _fbf ,nil ;case ActionTypeThread :_edf ,_fgb :=_gef .newPdfActionThreadFromDict (_ece );if _fgb !=nil {return nil ,_fgb ;
};_edf .PdfAction =_fbf ;_fbf ._baf =_edf ;return _fbf ,nil ;case ActionTypeURI :_dba ,_cea :=_gef .newPdfActionURIFromDict (_ece );if _cea !=nil {return nil ,_cea ;};_dba .PdfAction =_fbf ;_fbf ._baf =_dba ;return _fbf ,nil ;case ActionTypeSound :_gdg ,_cdeg :=_gef .newPdfActionSoundFromDict (_ece );
if _cdeg !=nil {return nil ,_cdeg ;};_gdg .PdfAction =_fbf ;_fbf ._baf =_gdg ;return _fbf ,nil ;case ActionTypeMovie :_gfc ,_cdbe :=_gef .newPdfActionMovieFromDict (_ece );if _cdbe !=nil {return nil ,_cdbe ;};_gfc .PdfAction =_fbf ;_fbf ._baf =_gfc ;return _fbf ,nil ;
case ActionTypeHide :_afa ,_fcf :=_gef .newPdfActionHideFromDict (_ece );if _fcf !=nil {return nil ,_fcf ;};_afa .PdfAction =_fbf ;_fbf ._baf =_afa ;return _fbf ,nil ;case ActionTypeNamed :_aed ,_aee :=_gef .newPdfActionNamedFromDict (_ece );if _aee !=nil {return nil ,_aee ;
};_aed .PdfAction =_fbf ;_fbf ._baf =_aed ;return _fbf ,nil ;case ActionTypeSubmitForm :_dd ,_bde :=_gef .newPdfActionSubmitFormFromDict (_ece );if _bde !=nil {return nil ,_bde ;};_dd .PdfAction =_fbf ;_fbf ._baf =_dd ;return _fbf ,nil ;case ActionTypeResetForm :_ded ,_gfdd :=_gef .newPdfActionResetFormFromDict (_ece );
if _gfdd !=nil {return nil ,_gfdd ;};_ded .PdfAction =_fbf ;_fbf ._baf =_ded ;return _fbf ,nil ;case ActionTypeImportData :_edb ,_eagd :=_gef .newPdfActionImportDataFromDict (_ece );if _eagd !=nil {return nil ,_eagd ;};_edb .PdfAction =_fbf ;_fbf ._baf =_edb ;
return _fbf ,nil ;case ActionTypeSetOCGState :_ebg ,_be :=_gef .newPdfActionSetOCGStateFromDict (_ece );if _be !=nil {return nil ,_be ;};_ebg .PdfAction =_fbf ;_fbf ._baf =_ebg ;return _fbf ,nil ;case ActionTypeRendition :_eaa ,_fde :=_gef .newPdfActionRenditionFromDict (_ece );
if _fde !=nil {return nil ,_fde ;};_eaa .PdfAction =_fbf ;_fbf ._baf =_eaa ;return _fbf ,nil ;case ActionTypeTrans :_face ,_dae :=_gef .newPdfActionTransFromDict (_ece );if _dae !=nil {return nil ,_dae ;};_face .PdfAction =_fbf ;_fbf ._baf =_face ;return _fbf ,nil ;
case ActionTypeGoTo3DView :_efa ,_gaeb :=_gef .newPdfActionGoTo3DViewFromDict (_ece );if _gaeb !=nil {return nil ,_gaeb ;};_efa .PdfAction =_fbf ;_fbf ._baf =_efa ;return _fbf ,nil ;case ActionTypeJavaScript :_fded ,_bcc :=_gef .newPdfActionJavaScriptFromDict (_ece );
if _bcc !=nil {return nil ,_bcc ;};_fded .PdfAction =_fbf ;_fbf ._baf =_fded ;return _fbf ,nil ;};_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006eg\u0020u\u006ek\u006eo\u0077\u006e\u0020\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0073",_abd );
return nil ,nil ;};

// StandardApplier is the interface that performs optimization of the whole PDF document.
// As a result an input document is being changed by the optimizer.
// The writer than takes back all it's parts and overwrites it.
// NOTE: This implementation is in experimental development state.
// 	Keep in mind that it might change in the subsequent minor versions.
type StandardApplier interface{ApplyStandard (_cfgfd *_cb .Document )error ;};

// ToPdfObject implements interface PdfModel.
func (_fgeg *PdfAnnotationHighlight )ToPdfObject ()_bf .PdfObject {_fgeg .PdfAnnotation .ToPdfObject ();_febd :=_fgeg ._cdaf ;_agae :=_febd .PdfObject .(*_bf .PdfObjectDictionary );_fgeg .PdfAnnotationMarkup .appendToPdfDictionary (_agae );_agae .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0048i\u0067\u0068\u006c\u0069\u0067\u0068t"));
_agae .SetIfNotNil ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073",_fgeg .QuadPoints );return _febd ;};

// NewPdfInfoFromObject creates a new PdfInfo from the input core.PdfObject.
func NewPdfInfoFromObject (obj _bf .PdfObject )(*PdfInfo ,error ){var _fgdg PdfInfo ;_cdaa ,_ffee :=obj .(*_bf .PdfObjectDictionary );if !_ffee {return nil ,_af .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0064\u0066\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",obj );
};for _ ,_dbcde :=range _cdaa .Keys (){switch _dbcde {case "\u0054\u0069\u0074l\u0065":_fgdg .Title ,_ =_bf .GetString (_cdaa .Get ("\u0054\u0069\u0074l\u0065"));case "\u0041\u0075\u0074\u0068\u006f\u0072":_fgdg .Author ,_ =_bf .GetString (_cdaa .Get ("\u0041\u0075\u0074\u0068\u006f\u0072"));
case "\u0053u\u0062\u006a\u0065\u0063\u0074":_fgdg .Subject ,_ =_bf .GetString (_cdaa .Get ("\u0053u\u0062\u006a\u0065\u0063\u0074"));case "\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073":_fgdg .Keywords ,_ =_bf .GetString (_cdaa .Get ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073"));
case "\u0043r\u0065\u0061\u0074\u006f\u0072":_fgdg .Creator ,_ =_bf .GetString (_cdaa .Get ("\u0043r\u0065\u0061\u0074\u006f\u0072"));case "\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072":_fgdg .Producer ,_ =_bf .GetString (_cdaa .Get ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072"));
case "\u0054r\u0061\u0070\u0070\u0065\u0064":_fgdg .Trapped ,_ =_bf .GetName (_cdaa .Get ("\u0054r\u0061\u0070\u0070\u0065\u0064"));case "\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065":if _fdga ,_bdag :=_bf .GetString (_cdaa .Get ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065"));
_bdag &&_fdga .String ()!=""{_fcdb ,_fgab :=NewPdfDate (_fdga .String ());if _fgab !=nil {return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0072e\u0061\u0074\u0069\u006f\u006e\u0044\u0061t\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0077",_fgab );
};_fgdg .CreationDate =&_fcdb ;};case "\u004do\u0064\u0044\u0061\u0074\u0065":if _aegcf ,_aaad :=_bf .GetString (_cdaa .Get ("\u004do\u0064\u0044\u0061\u0074\u0065"));_aaad &&_aegcf .String ()!=""{_ddda ,_bdgg :=NewPdfDate (_aegcf .String ());if _bdgg !=nil {return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u004d\u006f\u0064\u0044a\u0074e\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025w",_bdgg );
};_fgdg .ModifiedDate =&_ddda ;};default:_eddg ,_ :=_bf .GetString (_cdaa .Get (_dbcde ));if _fgdg ._dbaa ==nil {_fgdg ._dbaa =_bf .MakeDict ();};_fgdg ._dbaa .Set (_dbcde ,_eddg );};};return &_fgdg ,nil ;};

// PdfAnnotationSound represents Sound annotations.
// (Section 12.5.6.16).
type PdfAnnotationSound struct{*PdfAnnotation ;*PdfAnnotationMarkup ;Sound _bf .PdfObject ;Name _bf .PdfObject ;};func (_bcbec *PdfWriter )adjustXRefAffectedVersion (_cdfged bool ){if _cdfged &&_bcbec ._abccg .Major ==1&&_bcbec ._abccg .Minor < 5{_bcbec ._abccg .Minor =5;
};};

// SetColorSpace sets `r` colorspace object to `colorspace`.
func (_fbab *PdfPageResources )SetColorSpace (colorspace *PdfPageResourcesColorspaces ){_fbab ._dbcab =colorspace ;};

// ToPdfObject implements interface PdfModel.
func (_dbe *PdfBorderStyle )ToPdfObject ()_bf .PdfObject {_effcf :=_bf .MakeDict ();if _dbe ._bbfg !=nil {if _dead ,_cgeb :=_dbe ._bbfg .(*_bf .PdfIndirectObject );_cgeb {_dead .PdfObject =_effcf ;};};_effcf .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0042\u006f\u0072\u0064\u0065\u0072"));
if _dbe .W !=nil {_effcf .Set ("\u0057",_bf .MakeFloat (*_dbe .W ));};if _dbe .S !=nil {_effcf .Set ("\u0053",_bf .MakeName (_dbe .S .GetPdfName ()));};if _dbe .D !=nil {_effcf .Set ("\u0044",_bf .MakeArrayFromIntegers (*_dbe .D ));};if _dbe ._bbfg !=nil {return _dbe ._bbfg ;
};return _effcf ;};

// NewPdfAnnotationSquiggly returns a new text squiggly annotation.
func NewPdfAnnotationSquiggly ()*PdfAnnotationSquiggly {_geg :=NewPdfAnnotation ();_gebf :=&PdfAnnotationSquiggly {};_gebf .PdfAnnotation =_geg ;_gebf .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_geg .SetContext (_gebf );return _gebf ;};func _bbgd (_afgff _bf .PdfObject )(*fontFile ,error ){_bc .Log .Trace ("\u006e\u0065\u0077\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u0046\u0072\u006f\u006dP\u0064f\u004f\u0062\u006a\u0065\u0063\u0074\u003a\u0020\u006f\u0062\u006a\u003d\u0025\u0073",_afgff );
_feacf :=&fontFile {};_afgff =_bf .TraceToDirectObject (_afgff );_effbe ,_dcac :=_afgff .(*_bf .PdfObjectStream );if !_dcac {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020F\u006f\u006et\u0046\u0069\u006c\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d \u0028\u0025\u0054\u0029",_afgff );
return nil ,_bf .ErrTypeError ;};_afaa :=_effbe .PdfObjectDictionary ;_cced ,_faba :=_bf .DecodeStream (_effbe );if _faba !=nil {return nil ,_faba ;};_bege ,_dcac :=_bf .GetNameVal (_afaa .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_dcac {_feacf ._cecga =_bege ;
if _bege =="\u0054\u0079\u0070\u0065\u0031\u0043"{_bc .Log .Debug ("T\u0079\u0070\u0065\u0031\u0043\u0020\u0066\u006f\u006e\u0074\u0073\u0020\u0061\u0072\u0065\u0020\u0063\u0075r\u0072\u0065\u006e\u0074\u006c\u0079\u0020\u006e\u006f\u0074 s\u0075\u0070\u0070o\u0072t\u0065\u0064");
return nil ,ErrType1CFontNotSupported ;};};_ababe ,_ :=_bf .GetIntVal (_afaa .Get ("\u004ce\u006e\u0067\u0074\u0068\u0031"));_aabde ,_ :=_bf .GetIntVal (_afaa .Get ("\u004ce\u006e\u0067\u0074\u0068\u0032"));if _ababe > len (_cced ){_ababe =len (_cced );
};if _ababe +_aabde > len (_cced ){_aabde =len (_cced )-_ababe ;};_fgbee :=_cced [:_ababe ];var _gaceg []byte ;if _aabde > 0{_gaceg =_cced [_ababe :_ababe +_aabde ];};if _ababe > 0&&_aabde > 0{_adcdb :=_feacf .loadFromSegments (_fgbee ,_gaceg );if _adcdb !=nil {return nil ,_adcdb ;
};};return _feacf ,nil ;};

// NewPdfColorspaceFromPdfObject loads a PdfColorspace from a PdfObject.  Returns an error if there is
// a failure in loading.
func NewPdfColorspaceFromPdfObject (obj _bf .PdfObject )(PdfColorspace ,error ){if obj ==nil {return nil ,nil ;};var _gcfg *_bf .PdfIndirectObject ;var _dad *_bf .PdfObjectName ;var _fae *_bf .PdfObjectArray ;if _cfga ,_cdcba :=obj .(*_bf .PdfIndirectObject );
_cdcba {_gcfg =_cfga ;};obj =_bf .TraceToDirectObject (obj );switch _efea :=obj .(type ){case *_bf .PdfObjectArray :_fae =_efea ;case *_bf .PdfObjectName :_dad =_efea ;};if _dad !=nil {switch *_dad {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return NewPdfColorspaceSpecialPattern (),nil ;
default:_bc .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020c\u006fl\u006f\u0072\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",*_dad );return nil ,_egbe ;};};if _fae !=nil &&_fae .Len ()> 0{var _acbf _bf .PdfObject =_gcfg ;
if _gcfg ==nil {_acbf =_fae ;};if _dccf ,_bebb :=_bf .GetName (_fae .Get (0));_bebb {switch _dccf .String (){case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":if _fae .Len ()==1{return NewPdfColorspaceDeviceGray (),nil ;};case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":if _fae .Len ()==1{return NewPdfColorspaceDeviceRGB (),nil ;
};case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":if _fae .Len ()==1{return NewPdfColorspaceDeviceCMYK (),nil ;};case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _beaa (_acbf );case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ebaa (_acbf );
case "\u004c\u0061\u0062":return _gffb (_acbf );case "\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064":return _degg (_acbf );case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _fdgc (_acbf );case "\u0049n\u0064\u0065\u0078\u0065\u0064":return _baadd (_acbf );
case "\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006f\u006e":return _adae (_acbf );case "\u0044e\u0076\u0069\u0063\u0065\u004e":return _cgebg (_acbf );default:_bc .Log .Debug ("A\u0072\u0072\u0061\u0079\u0020\u0077i\u0074\u0068\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0061m\u0065:\u0020\u0025\u0073",*_dccf );
};};};_bc .Log .Debug ("\u0050\u0044\u0046\u0020\u0046i\u006c\u0065\u0020\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0043\u006f\u006co\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",obj .String ());
return nil ,ErrTypeCheck ;};func _bbebd ()*modelManager {_gaab :=modelManager {};_gaab ._bdcfa =map[PdfModel ]_bf .PdfObject {};_gaab ._deade =map[_bf .PdfObject ]PdfModel {};return &_gaab ;};

// ColorFromFloats returns a new PdfColor based on input color components.
func (_babf *PdfColorspaceDeviceN )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=_babf .GetNumComponents (){return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_dfff ,_ebbfa :=_babf .TintTransform .Evaluate (vals );
if _ebbfa !=nil {return nil ,_ebbfa ;};_aefbg ,_ebbfa :=_babf .AlternateSpace .ColorFromFloats (_dfff );if _ebbfa !=nil {return nil ,_ebbfa ;};return _aefbg ,nil ;};

// NewPdfFontFromTTFFile loads a TTF font file and returns a PdfFont type
// that can be used in text styling functions.
// Uses a WinAnsiTextEncoder and loads only character codes 32-255.
// NOTE: For composite fonts such as used in symbolic languages, use NewCompositePdfFontFromTTFFile.
func NewPdfFontFromTTFFile (filePath string )(*PdfFont ,error ){_aadfc ,_cggaa :=_db .Open (filePath );if _cggaa !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0072\u0065\u0061\u0064\u0069\u006e\u0067\u0020T\u0054F\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0076",_cggaa );
return nil ,_cggaa ;};defer _aadfc .Close ();return NewPdfFontFromTTF (_aadfc );};func _abeba (_gebgf string )map[string ]string {_gfcaf :=_gffba .Split (_gebgf ,-1);_dbead :=map[string ]string {};for _ ,_abgga :=range _gfcaf {_cfggd :=_acbee .FindStringSubmatch (_abgga );
if _cfggd ==nil {continue ;};_cefacf ,_adeab :=_cfggd [1],_cfggd [2];_dbead [_cefacf ]=_adeab ;};return _dbead ;};

// PdfBorderStyle represents a border style dictionary (12.5.4 Border Styles p. 394).
type PdfBorderStyle struct{W *float64 ;S *BorderStyle ;D *[]int ;_bbfg _bf .PdfObject ;};func (_cdbee *PdfWriter )seekByName (_bbbfe _bf .PdfObject ,_afgba []string ,_aeebg string )([]_bf .PdfObject ,error ){_bc .Log .Trace ("\u0053\u0065\u0065\u006b\u0020\u0062\u0079\u0020\u006e\u0061\u006d\u0065.\u002e\u0020\u0025\u0054",_bbbfe );
var _baadf []_bf .PdfObject ;if _fdddcg ,_edgd :=_bbbfe .(*_bf .PdfIndirectObject );_edgd {return _cdbee .seekByName (_fdddcg .PdfObject ,_afgba ,_aeebg );};if _bcfad ,_fcdfb :=_bbbfe .(*_bf .PdfObjectStream );_fcdfb {return _cdbee .seekByName (_bcfad .PdfObjectDictionary ,_afgba ,_aeebg );
};if _cgged ,_effad :=_bbbfe .(*_bf .PdfObjectDictionary );_effad {_bc .Log .Trace ("\u0044\u0069\u0063\u0074");for _ ,_efgbg :=range _cgged .Keys (){_ccabf :=_cgged .Get (_efgbg );if string (_efgbg )==_aeebg {_baadf =append (_baadf ,_ccabf );};for _ ,_dgbgf :=range _afgba {if string (_efgbg )==_dgbgf {_bc .Log .Trace ("\u0046\u006f\u006c\u006c\u006f\u0077\u0020\u006b\u0065\u0079\u0020\u0025\u0073",_dgbgf );
_geefe ,_fdagc :=_cdbee .seekByName (_ccabf ,_afgba ,_aeebg );if _fdagc !=nil {return _baadf ,_fdagc ;};_baadf =append (_baadf ,_geefe ...);break ;};};};return _baadf ,nil ;};return _baadf ,nil ;};

// GetAction returns the PDF action for the annotation link.
func (_fba *PdfAnnotationLink )GetAction ()(*PdfAction ,error ){if _fba ._fcfb !=nil {return _fba ._fcfb ,nil ;};if _fba .A ==nil {return nil ,nil ;};if _fba ._abg ==nil {return nil ,nil ;};_fdcg ,_bbbd :=_fba ._abg .loadAction (_fba .A );if _bbbd !=nil {return nil ,_bbbd ;
};_fba ._fcfb =_fdcg ;return _fba ._fcfb ,nil ;};

// GetAnnotations returns the list of page annotations for `page`. If not loaded attempts to load the
// annotations, otherwise returns the loaded list.
func (_fcdf *PdfPage )GetAnnotations ()([]*PdfAnnotation ,error ){if _fcdf ._gbcab !=nil {return _fcdf ._gbcab ,nil ;};if _fcdf .Annots ==nil {_fcdf ._gbcab =[]*PdfAnnotation {};return nil ,nil ;};if _fcdf ._eegf ==nil {_fcdf ._gbcab =[]*PdfAnnotation {};
return nil ,nil ;};_ebedc ,_eaadd :=_fcdf ._eegf .loadAnnotations (_fcdf .Annots );if _eaadd !=nil {return nil ,_eaadd ;};if _ebedc ==nil {_fcdf ._gbcab =[]*PdfAnnotation {};};_fcdf ._gbcab =_ebedc ;return _fcdf ._gbcab ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_cg *PdfAction )ToPdfObject ()_bf .PdfObject {_efg :=_cg ._fda ;_dgc :=_efg .PdfObject .(*_bf .PdfObjectDictionary );_dgc .Clear ();_dgc .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0041\u0063\u0074\u0069\u006f\u006e"));_dgc .SetIfNotNil ("\u0053",_cg .S );
_dgc .SetIfNotNil ("\u004e\u0065\u0078\u0074",_cg .Next );return _efg ;};func _ebdfb (_dgdab _bf .PdfObject )(map[_faf .CharCode ]float64 ,error ){if _dgdab ==nil {return nil ,nil ;};_caaf ,_adcdf :=_bf .GetArray (_dgdab );if !_adcdf {return nil ,nil ;
};_cgccd :=map[_faf .CharCode ]float64 {};_cdbg :=_caaf .Len ();for _ffbd :=0;_ffbd < _cdbg -1;_ffbd ++{_egcgf :=_bf .TraceToDirectObject (_caaf .Get (_ffbd ));_gddad ,_eadea :=_bf .GetIntVal (_egcgf );if !_eadea {return nil ,_af .Errorf ("\u0042a\u0064\u0020\u0066\u006fn\u0074\u0020\u0057\u0020\u006fb\u006a0\u003a \u0069\u003d\u0025\u0064\u0020\u0025\u0023v",_ffbd ,_egcgf );
};_ffbd ++;if _ffbd > _cdbg -1{return nil ,_af .Errorf ("\u0042\u0061\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u0057\u0020a\u0072\u0072\u0061\u0079\u003a\u0020\u0061\u0072\u0072\u0032=\u0025\u002b\u0076",_caaf );};_bbaab :=_bf .TraceToDirectObject (_caaf .Get (_ffbd ));
switch _bbaab .(type ){case *_bf .PdfObjectArray :_bacgc ,_ :=_bf .GetArray (_bbaab );if _fbee ,_cdff :=_bacgc .ToFloat64Array ();_cdff ==nil {for _adbc :=0;_adbc < len (_fbee );_adbc ++{_cgccd [_faf .CharCode (_gddad +_adbc )]=_fbee [_adbc ];};}else {return nil ,_af .Errorf ("\u0042\u0061\u0064 \u0066\u006f\u006e\u0074 \u0057\u0020\u0061\u0072\u0072\u0061\u0079 \u006f\u0062\u006a\u0031\u003a\u0020\u0069\u003d\u0025\u0064\u0020\u0025\u0023\u0076",_ffbd ,_bbaab );
};case *_bf .PdfObjectInteger :_fggac ,_cbgbd :=_bf .GetIntVal (_bbaab );if !_cbgbd {return nil ,_af .Errorf ("\u0042\u0061d\u0020\u0066\u006f\u006e\u0074\u0020\u0057\u0020\u0069\u006e\u0074\u0020\u006f\u0062\u006a\u0031\u003a\u0020\u0069\u003d\u0025\u0064 %\u0023\u0076",_ffbd ,_bbaab );
};_ffbd ++;if _ffbd > _cdbg -1{return nil ,_af .Errorf ("\u0042\u0061\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u0057\u0020a\u0072\u0072\u0061\u0079\u003a\u0020\u0061\u0072\u0072\u0032=\u0025\u002b\u0076",_caaf );};_cfgf :=_caaf .Get (_ffbd );_bgcd ,_eccccc :=_bf .GetNumberAsFloat (_cfgf );
if _eccccc !=nil {return nil ,_af .Errorf ("\u0042\u0061d\u0020\u0066\u006f\u006e\u0074\u0020\u0057\u0020\u0069\u006e\u0074\u0020\u006f\u0062\u006a\u0032\u003a\u0020\u0069\u003d\u0025\u0064 %\u0023\u0076",_ffbd ,_cfgf );};for _fcbb :=_gddad ;_fcbb <=_fggac ;
_fcbb ++{_cgccd [_faf .CharCode (_fcbb )]=_bgcd ;};default:return nil ,_af .Errorf ("\u0042\u0061\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u0057 \u006f\u0062\u006a\u0031\u0020\u0074\u0079p\u0065\u003a\u0020\u0069\u003d\u0025\u0064\u0020\u0025\u0023\u0076",_ffbd ,_bbaab );
};};return _cgccd ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_fff *PdfActionHide )ToPdfObject ()_bf .PdfObject {_fff .PdfAction .ToPdfObject ();_gee :=_fff ._fda ;_cae :=_gee .PdfObject .(*_bf .PdfObjectDictionary );_cae .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeHide )));_cae .SetIfNotNil ("\u0054",_fff .T );
_cae .SetIfNotNil ("\u0048",_fff .H );return _gee ;};

// NewPdfSignatureReferenceDocMDP returns PdfSignatureReference for the transformParams.
func NewPdfSignatureReferenceDocMDP (transformParams *PdfTransformParamsDocMDP )*PdfSignatureReference {return &PdfSignatureReference {Type :_bf .MakeName ("\u0053\u0069\u0067\u0052\u0065\u0066"),TransformMethod :_bf .MakeName ("\u0044\u006f\u0063\u004d\u0044\u0050"),TransformParams :transformParams .ToPdfObject ()};
};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_bcbdb *PdfShadingType6 )ToPdfObject ()_bf .PdfObject {_bcbdb .PdfShading .ToPdfObject ();_afface ,_cbcec :=_bcbdb .getShadingDict ();if _cbcec !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _bcbdb .BitsPerCoordinate !=nil {_afface .Set ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065",_bcbdb .BitsPerCoordinate );};if _bcbdb .BitsPerComponent !=nil {_afface .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_bcbdb .BitsPerComponent );
};if _bcbdb .BitsPerFlag !=nil {_afface .Set ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0046\u006c\u0061\u0067",_bcbdb .BitsPerFlag );};if _bcbdb .Decode !=nil {_afface .Set ("\u0044\u0065\u0063\u006f\u0064\u0065",_bcbdb .Decode );};if _bcbdb .Function !=nil {if len (_bcbdb .Function )==1{_afface .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_bcbdb .Function [0].ToPdfObject ());
}else {_adeb :=_bf .MakeArray ();for _ ,_cgbdc :=range _bcbdb .Function {_adeb .Append (_cgbdc .ToPdfObject ());};_afface .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_adeb );};};return _bcbdb ._daaad ;};

// C returns the value of the cyan component of the color.
func (_dbef *PdfColorDeviceCMYK )C ()float64 {return _dbef [0]};

// IsShading specifies if the pattern is a shading pattern.
func (_gacfe *PdfPattern )IsShading ()bool {return _gacfe .PatternType ==2};

// Fill populates `form` with values provided by `provider`.
func (_fbaaa *PdfAcroForm )Fill (provider FieldValueProvider )error {return _fbaaa .fill (provider ,nil )};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// components. The slice should contain a single PdfObjectFloat element.
func (_gbbg *PdfColorspaceSpecialSeparation )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_bbgg ,_becf :=_bf .GetNumbersAsFloat (objects );
if _becf !=nil {return nil ,_becf ;};return _gbbg .ColorFromFloats (_bbgg );};

// AddContentStreamByString adds content stream by string. Puts the content
// string into a stream object and points the content stream towards it.
func (_fgbf *PdfPage )AddContentStreamByString (contentStr string )error {_egcgc ,_gbcfd :=_bf .MakeStream ([]byte (contentStr ),_bf .NewFlateEncoder ());if _gbcfd !=nil {return _gbcfd ;};if _fgbf .Contents ==nil {_fgbf .Contents =_egcgc ;}else {_fbgg :=_bf .TraceToDirectObject (_fgbf .Contents );
_gbacca ,_eggab :=_fbgg .(*_bf .PdfObjectArray );if !_eggab {_gbacca =_bf .MakeArray (_fbgg );};_gbacca .Append (_egcgc );_fgbf .Contents =_gbacca ;};return nil ;};

// VariableText contains the common attributes of a variable text.
// The VariableText is typically not used directly, but is can encapsulate by PdfField
// See section 12.7.3.3 "Variable Text" and Table 222 (pp. 434-436 PDF32000_2008).
type VariableText struct{DA *_bf .PdfObjectString ;Q *_bf .PdfObjectInteger ;DS *_bf .PdfObjectString ;RV _bf .PdfObject ;};

// PdfFunctionType2 defines an exponential interpolation of one input value and n
// output values:
//      f(x) = y_0, ..., y_(n-1)
// y_j = C0_j + x^N * (C1_j - C0_j); for 0 <= j < n
// When N=1 ; linear interpolation between C0 and C1.
type PdfFunctionType2 struct{Domain []float64 ;Range []float64 ;C0 []float64 ;C1 []float64 ;N float64 ;_afceg *_bf .PdfIndirectObject ;};func (_gdfa *pdfFontSimple )baseFields ()*fontCommon {return &_gdfa .fontCommon };func _dgdfb ()string {_ggeae .Lock ();
defer _ggeae .Unlock ();return _dagbe };func (_eaaf *PdfReader )newPdfAnnotationRichMediaFromDict (_fcef *_bf .PdfObjectDictionary )(*PdfAnnotationRichMedia ,error ){_gfbe :=&PdfAnnotationRichMedia {};_gfbe .RichMediaSettings =_fcef .Get ("\u0052\u0069\u0063\u0068\u004d\u0065\u0064\u0069\u0061\u0053\u0065\u0074t\u0069\u006e\u0067\u0073");
_gfbe .RichMediaContent =_fcef .Get ("\u0052\u0069c\u0068\u004d\u0065d\u0069\u0061\u0043\u006f\u006e\u0074\u0065\u006e\u0074");return _gfbe ,nil ;};

// GetFontByName gets the font specified by keyName. Returns the PdfObject which
// the entry refers to. Returns a bool value indicating whether or not the entry was found.
func (_fgdae *PdfPageResources )GetFontByName (keyName _bf .PdfObjectName )(_bf .PdfObject ,bool ){if _fgdae .Font ==nil {return nil ,false ;};_bgfef ,_agbd :=_bf .TraceToDirectObject (_fgdae .Font ).(*_bf .PdfObjectDictionary );if !_agbd {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u006f\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u0021\u0020(\u0067\u006ft\u0020\u0025\u0054\u0029",_bf .TraceToDirectObject (_fgdae .Font ));
return nil ,false ;};if _ggabd :=_bgfef .Get (keyName );_ggabd !=nil {return _ggabd ,true ;};return nil ,false ;};

// ColorFromPdfObjects returns a new PdfColor based on the input slice of color
// component PDF objects.
func (_cbdc *PdfColorspaceICCBased )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if _cbdc .Alternate ==nil {if _cbdc .N ==1{_eddab :=NewPdfColorspaceDeviceGray ();return _eddab .ColorFromPdfObjects (objects );}else if _cbdc .N ==3{_ddaaf :=NewPdfColorspaceDeviceRGB ();
return _ddaaf .ColorFromPdfObjects (objects );}else if _cbdc .N ==4{_dfec :=NewPdfColorspaceDeviceCMYK ();return _dfec .ColorFromPdfObjects (objects );}else {return nil ,_eff .New ("I\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061lt\u0065\u0072\u006ea\u0074i\u0076\u0065");
};};return _cbdc .Alternate .ColorFromPdfObjects (objects );};func _edac (_agda *PdfPage )map[_bf .PdfObjectName ]_bf .PdfObject {_cdbb :=make (map[_bf .PdfObjectName ]_bf .PdfObject );if _agda .Resources ==nil {return _cdbb ;};if _agda .Resources .Font !=nil {if _adde ,_fdcfg :=_bf .GetDict (_agda .Resources .Font );
_fdcfg {for _ ,_bcga :=range _adde .Keys (){_cdbb [_bcga ]=_adde .Get (_bcga );};};};if _agda .Resources .ExtGState !=nil {if _gfdf ,_bbafa :=_bf .GetDict (_agda .Resources .ExtGState );_bbafa {for _ ,_gfbgf :=range _gfdf .Keys (){_cdbb [_gfbgf ]=_gfdf .Get (_gfbgf );
};};};if _agda .Resources .XObject !=nil {if _acbd ,_abab :=_bf .GetDict (_agda .Resources .XObject );_abab {for _ ,_feca :=range _acbd .Keys (){_cdbb [_feca ]=_acbd .Get (_feca );};};};if _agda .Resources .Pattern !=nil {if _cgeff ,_fbg :=_bf .GetDict (_agda .Resources .Pattern );
_fbg {for _ ,_egab :=range _cgeff .Keys (){_cdbb [_egab ]=_cgeff .Get (_egab );};};};if _agda .Resources .Shading !=nil {if _adb ,_cgefc :=_bf .GetDict (_agda .Resources .Shading );_cgefc {for _ ,_cgee :=range _adb .Keys (){_cdbb [_cgee ]=_adb .Get (_cgee );
};};};if _agda .Resources .ProcSet !=nil {if _bbbe ,_cedf :=_bf .GetDict (_agda .Resources .ProcSet );_cedf {for _ ,_agefa :=range _bbbe .Keys (){_cdbb [_agefa ]=_bbbe .Get (_agefa );};};};if _agda .Resources .Properties !=nil {if _ecbd ,_fdaa :=_bf .GetDict (_agda .Resources .Properties );
_fdaa {for _ ,_cbce :=range _ecbd .Keys (){_cdbb [_cbce ]=_ecbd .Get (_cbce );};};};return _cdbb ;};func _cdded (_aacbcb *_bf .PdfObjectDictionary )(*PdfShadingType4 ,error ){_bfdbf :=PdfShadingType4 {};_deggd :=_aacbcb .Get ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065");
if _deggd ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064 \u0061\u0074\u0074\u0072\u0069\u0062\u0075t\u0065\u0020\u006d\u0069\u0073\u0073i\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072C\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065");
return nil ,ErrRequiredAttributeMissing ;};_dgbcbb ,_feaef :=_deggd .(*_bf .PdfObjectInteger );if !_feaef {_bc .Log .Debug ("\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006f\u0072\u0064\u0069\u006e\u0061\u0074\u0065\u0020\u006eo\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_deggd );
return nil ,_bf .ErrTypeError ;};_bfdbf .BitsPerCoordinate =_dgbcbb ;_deggd =_aacbcb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _deggd ==nil {_bc .Log .Debug ("\u0052e\u0071\u0075i\u0072\u0065\u0064\u0020a\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073in\u0067\u003a\u0020B\u0069\u0074s\u0050\u0065\u0072\u0043\u006f\u006dp\u006f\u006ee\u006e\u0074");
return nil ,ErrRequiredAttributeMissing ;};_dgbcbb ,_feaef =_deggd .(*_bf .PdfObjectInteger );if !_feaef {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065r \u0028\u0067\u006ft\u0020%\u0054\u0029",_deggd );
return nil ,_bf .ErrTypeError ;};_bfdbf .BitsPerComponent =_dgbcbb ;_deggd =_aacbcb .Get ("B\u0069\u0074\u0073\u0050\u0065\u0072\u0046\u006c\u0061\u0067");if _deggd ==nil {_bc .Log .Debug ("\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072i\u0062\u0075\u0074\u0065\u0020\u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0042\u0069\u0074\u0073\u0050\u0065r\u0046\u006c\u0061\u0067");
return nil ,ErrRequiredAttributeMissing ;};_dgbcbb ,_feaef =_deggd .(*_bf .PdfObjectInteger );if !_feaef {_bc .Log .Debug ("B\u0069\u0074\u0073\u0050\u0065\u0072F\u006c\u0061\u0067\u0020\u006e\u006ft\u0020\u0061\u006e\u0020\u0069\u006e\u0074e\u0067\u0065\u0072\u0020\u0028\u0067\u006f\u0074\u0020\u0025T\u0029",_deggd );
return nil ,_bf .ErrTypeError ;};_bfdbf .BitsPerComponent =_dgbcbb ;_deggd =_aacbcb .Get ("\u0044\u0065\u0063\u006f\u0064\u0065");if _deggd ==nil {_bc .Log .Debug ("\u0052\u0065\u0071ui\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069b\u0075t\u0065 \u006di\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065");
return nil ,ErrRequiredAttributeMissing ;};_feeag ,_feaef :=_deggd .(*_bf .PdfObjectArray );if !_feaef {_bc .Log .Debug ("\u0044\u0065\u0063\u006fd\u0065\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_deggd );
return nil ,_bf .ErrTypeError ;};_bfdbf .Decode =_feeag ;_deggd =_aacbcb .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");if _deggd ==nil {_bc .Log .Debug ("\u0052\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0020\u0046\u0075\u006ec\u0074\u0069\u006f\u006e");
return nil ,ErrRequiredAttributeMissing ;};_bfdbf .Function =[]PdfFunction {};if _dbdaf ,_dbdfd :=_deggd .(*_bf .PdfObjectArray );_dbdfd {for _ ,_bdfc :=range _dbdaf .Elements (){_dbefa ,_bgfb :=_bbbbd (_bdfc );if _bgfb !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_bgfb );
return nil ,_bgfb ;};_bfdbf .Function =append (_bfdbf .Function ,_dbefa );};}else {_bfdge ,_dcbaa :=_bbbbd (_deggd );if _dcbaa !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_dcbaa );
return nil ,_dcbaa ;};_bfdbf .Function =append (_bfdbf .Function ,_bfdge );};return &_bfdbf ,nil ;};

// NewPdfActionMovie returns a new "movie" action.
func NewPdfActionMovie ()*PdfActionMovie {_dff :=NewPdfAction ();_bcda :=&PdfActionMovie {};_bcda .PdfAction =_dff ;_dff .SetContext (_bcda );return _bcda ;};var (ErrRequiredAttributeMissing =_eff .New ("\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074t\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073s\u0069\u006e\u0067");
ErrInvalidAttribute =_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0074\u0074\u0072i\u0062\u0075\u0074\u0065");ErrTypeCheck =_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0063\u0068\u0065\u0063\u006b");_egbe =_eff .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
ErrEncrypted =_eff .New ("\u0066\u0069\u006c\u0065\u0020\u006e\u0065\u0065\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020d\u0065\u0063\u0072\u0079\u0070\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074");ErrNoFont =_eff .New ("\u0066\u006fn\u0074\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
ErrFontNotSupported =_ead .Errorf ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u006fn\u0074\u0020\u0028\u0025\u0077\u0029",_bf .ErrNotSupported );ErrType1CFontNotSupported =_ead .Errorf ("\u0054y\u0070\u00651\u0043\u0020\u0066o\u006e\u0074\u0073\u0020\u0061\u0072\u0065 \u006e\u006f\u0074\u0020\u0063\u0075r\u0072\u0065\u006e\u0074\u006c\u0079\u0020\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0028\u0025\u0077\u0029",_bf .ErrNotSupported );
ErrType3FontNotSupported =_ead .Errorf ("\u0054y\u0070\u00653\u0020\u0066\u006f\u006et\u0073\u0020\u0061r\u0065\u0020\u006e\u006f\u0074\u0020\u0063\u0075\u0072re\u006e\u0074\u006cy\u0020\u0073u\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0028%\u0077\u0029",_bf .ErrNotSupported );
ErrTTCmapNotSupported =_ead .Errorf ("\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065d\u0020\u0054\u0072\u0075\u0065\u0054\u0079\u0070e\u0020\u0063\u006d\u0061\u0070\u0020\u0066\u006f\u0072\u006d\u0061\u0074 \u0028\u0025\u0077\u0029",_bf .ErrNotSupported );
ErrSignNotEnoughSpace =_ead .Errorf ("\u0069\u006e\u0073\u0075\u0066\u0066\u0069c\u0069\u0065\u006et\u0020\u0073\u0070a\u0063\u0065 \u0061\u006c\u006c\u006f\u0063\u0061t\u0065d \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073");
ErrSignNoCertificates =_ead .Errorf ("\u0063\u006ful\u0064\u0020\u006eo\u0074\u0020\u0072\u0065tri\u0065ve\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0063\u0068\u0061i\u006e"););func (_aaaf *PdfWriter )writeObjects (){_bc .Log .Trace ("\u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0025d\u0020\u006f\u0062\u006a",len (_aaaf ._agfac ));
_aaaf ._baadg =make (map[int ]crossReference );_aaaf ._baadg [0]=crossReference {Type :0,ObjectNumber :0,Generation :0xFFFF};if _aaaf ._cffd .ObjectMap !=nil {for _acgfbf ,_dfeddd :=range _aaaf ._cffd .ObjectMap {if _acgfbf ==0{continue ;};if _dfeddd .XType ==_bf .XrefTypeObjectStream {_ecggf :=crossReference {Type :2,ObjectNumber :_dfeddd .OsObjNumber ,Index :_dfeddd .OsObjIndex };
_aaaf ._baadg [_acgfbf ]=_ecggf ;};if _dfeddd .XType ==_bf .XrefTypeTableEntry {_fbfec :=crossReference {Type :1,ObjectNumber :_dfeddd .ObjectNumber ,Offset :_dfeddd .Offset };_aaaf ._baadg [_acgfbf ]=_fbfec ;};};};};

// ColorToRGB converts a CMYK32 color to an RGB color.
func (_cfbd *PdfColorspaceDeviceCMYK )ColorToRGB (color PdfColor )(PdfColor ,error ){_feaf ,_egbd :=color .(*PdfColorDeviceCMYK );if !_egbd {_bc .Log .Debug ("I\u006e\u0070\u0075\u0074\u0020\u0063o\u006c\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0064e\u0076\u0069\u0063e\u0020c\u006d\u0079\u006b");
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_dged :=_feaf .C ();_ggdf :=_feaf .M ();_geed :=_feaf .Y ();_ceba :=_feaf .K ();_dged =_dged *(1-_ceba )+_ceba ;_ggdf =_ggdf *(1-_ceba )+_ceba ;
_geed =_geed *(1-_ceba )+_ceba ;_bffb :=1-_dged ;_abbc :=1-_ggdf ;_afbe :=1-_geed ;return NewPdfColorDeviceRGB (_bffb ,_abbc ,_afbe ),nil ;};func _degfd (_aebfb *_bf .PdfObjectDictionary )(*PdfShadingType2 ,error ){_aegg :=PdfShadingType2 {};_gffa :=_aebfb .Get ("\u0043\u006f\u006f\u0072\u0064\u0073");
if _gffa ==nil {_bc .Log .Debug ("R\u0065\u0071\u0075\u0069\u0072\u0065d\u0020\u0061\u0074\u0074\u0072\u0069b\u0075\u0074\u0065\u0020\u006d\u0069\u0073s\u0069\u006e\u0067\u003a\u0020\u0020\u0043\u006f\u006f\u0072d\u0073");return nil ,ErrRequiredAttributeMissing ;
};_effag ,_dbbd :=_gffa .(*_bf .PdfObjectArray );if !_dbbd {_bc .Log .Debug ("\u0043\u006f\u006f\u0072d\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_gffa );return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
};if _effag .Len ()!=4{_bc .Log .Debug ("\u0043\u006f\u006f\u0072d\u0073\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074 \u0034\u0020\u0028\u0067\u006f\u0074\u0020%\u0064\u0029",_effag .Len ());return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0074\u0074\u0072i\u0062\u0075\u0074\u0065");
};_aegg .Coords =_effag ;if _gaaa :=_aebfb .Get ("\u0044\u006f\u006d\u0061\u0069\u006e");_gaaa !=nil {_gaaa =_bf .TraceToDirectObject (_gaaa );_aefa ,_gffcgf :=_gaaa .(*_bf .PdfObjectArray );if !_gffcgf {_bc .Log .Debug ("\u0044\u006f\u006d\u0061i\u006e\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_gaaa );
return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_aegg .Domain =_aefa ;};_gffa =_aebfb .Get ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e");if _gffa ==nil {_bc .Log .Debug ("\u0052\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u003a\u0020\u0020\u0046\u0075\u006ec\u0074\u0069\u006f\u006e");
return nil ,ErrRequiredAttributeMissing ;};_aegg .Function =[]PdfFunction {};if _cbbg ,_eabbf :=_gffa .(*_bf .PdfObjectArray );_eabbf {for _ ,_cbbdb :=range _cbbg .Elements (){_ceacf ,_eebdb :=_bbbbd (_cbbdb );if _eebdb !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_eebdb );
return nil ,_eebdb ;};_aegg .Function =append (_aegg .Function ,_ceacf );};}else {_fdfefg ,_cagdg :=_bbbbd (_gffa );if _cagdg !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e:\u0020\u0025\u0076",_cagdg );
return nil ,_cagdg ;};_aegg .Function =append (_aegg .Function ,_fdfefg );};if _ddaafd :=_aebfb .Get ("\u0045\u0078\u0074\u0065\u006e\u0064");_ddaafd !=nil {_ddaafd =_bf .TraceToDirectObject (_ddaafd );_febb ,_dcgfdd :=_ddaafd .(*_bf .PdfObjectArray );
if !_dcgfdd {_bc .Log .Debug ("\u004d\u0061\u0074\u0072i\u0078\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072a\u0079\u0020\u0028\u0067\u006f\u0074\u0020%\u0054\u0029",_ddaafd );return nil ,_bf .ErrTypeError ;};if _febb .Len ()!=2{_bc .Log .Debug ("\u0045\u0078\u0074\u0065n\u0064\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074 \u0032\u0020\u0028\u0067\u006f\u0074\u0020%\u0064\u0029",_febb .Len ());
return nil ,ErrInvalidAttribute ;};_aegg .Extend =_febb ;};return &_aegg ,nil ;};func (_cdbf *PdfReader )newPdfActionLaunchFromDict (_gcf *_bf .PdfObjectDictionary )(*PdfActionLaunch ,error ){_fcb ,_bbaf :=_aac (_gcf .Get ("\u0046"));if _bbaf !=nil {return nil ,_bbaf ;
};return &PdfActionLaunch {Win :_gcf .Get ("\u0057\u0069\u006e"),Mac :_gcf .Get ("\u004d\u0061\u0063"),Unix :_gcf .Get ("\u0055\u006e\u0069\u0078"),NewWindow :_gcf .Get ("\u004ee\u0077\u0057\u0069\u006e\u0064\u006fw"),F :_fcb },nil ;};

// NewPdfActionHide returns a new "hide" action.
func NewPdfActionHide ()*PdfActionHide {_faa :=NewPdfAction ();_cgc :=&PdfActionHide {};_cgc .PdfAction =_faa ;_faa .SetContext (_cgc );return _cgc ;};

// PdfAnnotationHighlight represents Highlight annotations.
// (Section 12.5.6.10).
type PdfAnnotationHighlight struct{*PdfAnnotation ;*PdfAnnotationMarkup ;QuadPoints _bf .PdfObject ;};

// Encoder returns the font's text encoder.
func (_ddcbe pdfFontType0 )Encoder ()_faf .TextEncoder {return _ddcbe ._aecc };func (_dgeaa *PdfReader )loadPerms ()(*Permissions ,error ){if _dgafb :=_dgeaa ._dbaea .Get ("\u0050\u0065\u0072m\u0073");_dgafb !=nil {if _abeaa ,_dabgf :=_bf .GetDict (_dgafb );
_dabgf {_ffagf :=_abeaa .Get ("\u0044\u006f\u0063\u004d\u0044\u0050");if _ffagf ==nil {return nil ,nil ;};if _ddbedd ,_eagfbf :=_bf .GetIndirect (_ffagf );_eagfbf {_aefbgg ,_dcea :=_dgeaa .newPdfSignatureFromIndirect (_ddbedd );if _dcea !=nil {return nil ,_dcea ;
};return NewPermissions (_aefbgg ),nil ;};return nil ,_af .Errorf ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0044\u006f\u0063M\u0044\u0050\u0020\u0065nt\u0072\u0079");};return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0050\u0065\u0072\u006d\u0073\u0020\u0065\u006e\u0074\u0072\u0079");
};return nil ,nil ;};

// ToPdfObject converts the PdfFont object to its PDF representation.
func (_dddca *PdfFont )ToPdfObject ()_bf .PdfObject {if _dddca ._cacce ==nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0066\u006f\u006e\u0074 \u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0069\u0073 \u006e\u0069\u006c");return _bf .MakeNull ();
};return _dddca ._cacce .ToPdfObject ();};

// ToInteger convert to an integer format.
func (_aeag *PdfColorCalRGB )ToInteger (bits int )[3]uint32 {_gdgb :=_fg .Pow (2,float64 (bits ))-1;return [3]uint32 {uint32 (_gdgb *_aeag .A ()),uint32 (_gdgb *_aeag .B ()),uint32 (_gdgb *_aeag .C ())};};func (_bbefg *PdfWriter )writeString (_edgff string ){if _bbefg ._cgebb !=nil {return ;
};_geegd ,_efedb :=_bbefg ._fddfe .WriteString (_edgff );_bbefg ._feddc +=int64 (_geegd );_bbefg ._cgebb =_efedb ;};func (_edfb *PdfFont )baseFields ()*fontCommon {if _edfb ._cacce ==nil {_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0062\u0061\u0073\u0065\u0046\u0069\u0065l\u0064s\u002e \u0063o\u006e\u0074\u0065\u0078\u0074\u0020\u0069\u0073\u0020\u006e\u0069\u006c\u002e");
return nil ;};return _edfb ._cacce .baseFields ();};

// Subtype returns the font's "Subtype" field.
func (_ffcg *PdfFont )Subtype ()string {_ddgd :=_ffcg .baseFields ()._fdfb ;if _fffc ,_gcabc :=_ffcg ._cacce .(*pdfFontType0 );_gcabc {_ddgd =_ddgd +"\u003a"+_fffc .DescendantFont .Subtype ();};return _ddgd ;};

// GetContext returns the context of the outline tree node, which is either a
// *PdfOutline or a *PdfOutlineItem. The method returns nil for uninitialized
// tree nodes.
func (_eafgfb *PdfOutlineTreeNode )GetContext ()PdfModel {if _febfd ,_eadge :=_eafgfb ._bacb .(*PdfOutline );_eadge {return _febfd ;};if _eceg ,_deeda :=_eafgfb ._bacb .(*PdfOutlineItem );_deeda {return _eceg ;};_bc .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0049n\u0076\u0061\u006c\u0069d o\u0075tl\u0069\u006e\u0065\u0020\u0074\u0072\u0065e \u006e\u006f\u0064\u0065\u0020\u0069\u0074e\u006d");
return nil ;};

// ToPdfObject implements interface PdfModel.
func (_eggd *PdfAnnotationInk )ToPdfObject ()_bf .PdfObject {_eggd .PdfAnnotation .ToPdfObject ();_dabdf :=_eggd ._cdaf ;_bffe :=_dabdf .PdfObject .(*_bf .PdfObjectDictionary );_eggd .PdfAnnotationMarkup .appendToPdfDictionary (_bffe );_bffe .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0049\u006e\u006b"));
_bffe .SetIfNotNil ("\u0049n\u006b\u004c\u0069\u0073\u0074",_eggd .InkList );_bffe .SetIfNotNil ("\u0042\u0053",_eggd .BS );return _dabdf ;};func (_abdfc *PdfWriter )checkCrossReferenceStream ()bool {_egeac :=_abdfc ._abccg .Major > 1||(_abdfc ._abccg .Major ==1&&_abdfc ._abccg .Minor > 4);
if _abdfc ._fdecf !=nil {_egeac =*_abdfc ._fdecf ;};return _egeac ;};func _cgfba (_debbb *_ff .ImageBase )(_dbged Image ){_dbged .Width =int64 (_debbb .Width );_dbged .Height =int64 (_debbb .Height );_dbged .BitsPerComponent =int64 (_debbb .BitsPerComponent );
_dbged .ColorComponents =_debbb .ColorComponents ;_dbged .Data =_debbb .Data ;_dbged ._dbcfb =_debbb .Decode ;_dbged ._gfegf =_debbb .Alpha ;return _dbged ;};

// ToPdfObject implements interface PdfModel.
func (_cgf *PdfActionImportData )ToPdfObject ()_bf .PdfObject {_cgf .PdfAction .ToPdfObject ();_agf :=_cgf ._fda ;_fafe :=_agf .PdfObject .(*_bf .PdfObjectDictionary );_fafe .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeImportData )));if _cgf .F !=nil {_fafe .Set ("\u0046",_cgf .F .ToPdfObject ());
};return _agf ;};

// WriteToFile writes the output PDF to file.
func (_befd *PdfWriter )WriteToFile (outputFilePath string )error {_acfdg ,_gbadd :=_db .Create (outputFilePath );if _gbadd !=nil {return _gbadd ;};defer _acfdg .Close ();return _befd .Write (_acfdg );};

// PdfAcroForm represents the AcroForm dictionary used for representation of form data in PDF.
type PdfAcroForm struct{Fields *[]*PdfField ;NeedAppearances *_bf .PdfObjectBool ;SigFlags *_bf .PdfObjectInteger ;CO *_bf .PdfObjectArray ;DR *PdfPageResources ;DA *_bf .PdfObjectString ;Q *_bf .PdfObjectInteger ;XFA _bf .PdfObject ;_ccfccd *_bf .PdfIndirectObject ;
};func (_ggbfd *PdfSignature )extractChainFromCert ()([]*_d .Certificate ,error ){var _efcee *_bf .PdfObjectArray ;switch _aebeg :=_ggbfd .Cert .(type ){case *_bf .PdfObjectString :_efcee =_bf .MakeArray (_aebeg );case *_bf .PdfObjectArray :_efcee =_aebeg ;
default:return nil ,_af .Errorf ("\u0069n\u0076\u0061l\u0069\u0064\u0020s\u0069\u0067\u006e\u0061\u0074\u0075\u0072e\u0020\u0063\u0065\u0072\u0074\u0069f\u0069\u0063\u0061\u0074\u0065\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0054",_aebeg );
};var _dafcf _cdc .Buffer ;for _ ,_gbdbe :=range _efcee .Elements (){_egdgd ,_ececfa :=_bf .GetString (_gbdbe );if !_ececfa {return nil ,_af .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063\u0061\u0074\u0065\u0020\u006f\u0062j\u0065\u0063\u0074\u0020\u0074\u0079p\u0065\u0020\u0069\u006e\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065 \u0063\u0065r\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u0063h\u0061\u0069\u006e\u003a\u0020\u0025\u0054",_gbdbe );
};if _ ,_fbbdb :=_dafcf .Write (_egdgd .Bytes ());_fbbdb !=nil {return nil ,_fbbdb ;};};return _d .ParseCertificates (_dafcf .Bytes ());};

// GetRuneMetrics returns the character metrics for the specified rune.
// A bool flag is returned to indicate whether or not the entry was found.
func (_dcd pdfCIDFontType2 )GetRuneMetrics (r rune )(_eb .CharMetrics ,bool ){_aade ,_faaf :=_dcd ._ceae [r ];if !_faaf {_cbegc ,_fbgb :=_bf .GetInt (_dcd .DW );if !_fbgb {return _eb .CharMetrics {},false ;};_aade =int (*_cbegc );};return _eb .CharMetrics {Wx :float64 (_aade )},true ;
};

// AddCustomInfo adds a custom info into document info dictionary.
func (_fafg *PdfInfo )AddCustomInfo (name string ,value string )error {if _fafg ._dbaa ==nil {_fafg ._dbaa =_bf .MakeDict ();};if _ ,_bbafe :=_fbaad [name ];_bbafe {return _af .Errorf ("\u0063\u0061\u006e\u006e\u006ft\u0020\u0075\u0073\u0065\u0020\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064 \u0069\u006e\u0066\u006f\u0020\u006b\u0065\u0079\u0020\u0025\u0073\u0020\u0061\u0073\u0020\u0063\u0075\u0073\u0074\u006f\u006d\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u006b\u0065y",name );
};_fafg ._dbaa .SetIfNotNil (*_bf .MakeName (name ),_bf .MakeString (value ));return nil ;};

// PdfRectangle is a definition of a rectangle.
type PdfRectangle struct{Llx float64 ;Lly float64 ;Urx float64 ;Ury float64 ;};

// PdfOutlineItem represents an outline item dictionary (Table 153 - pp. 376 - 377).
type PdfOutlineItem struct{PdfOutlineTreeNode ;Title *_bf .PdfObjectString ;Parent *PdfOutlineTreeNode ;Prev *PdfOutlineTreeNode ;Next *PdfOutlineTreeNode ;Count *int64 ;Dest _bf .PdfObject ;A _bf .PdfObject ;SE _bf .PdfObject ;C _bf .PdfObject ;F _bf .PdfObject ;
_aabdd *_bf .PdfIndirectObject ;};

// PdfColorspaceDeviceGray represents a grayscale colorspace.
type PdfColorspaceDeviceGray struct{};func (_cgeec *PdfColorspaceLab )String ()string {return "\u004c\u0061\u0062"};func (_ccdgef *Image )resampleLowBits (_eeffg []uint32 ){_cagf :=_ff .BytesPerLine (int (_ccdgef .Width ),int (_ccdgef .BitsPerComponent ),_ccdgef .ColorComponents );
_egdcd :=make ([]byte ,_ccdgef .ColorComponents *_cagf *int (_ccdgef .Height ));_gafcf :=int (_ccdgef .BitsPerComponent )*_ccdgef .ColorComponents *int (_ccdgef .Width );_ddagc :=uint8 (8);var (_cgddg ,_cedee int ;_ddge uint32 ;);for _ffcac :=0;_ffcac < int (_ccdgef .Height );
_ffcac ++{_cedee =_ffcac *_cagf ;for _cgfb :=0;_cgfb < _gafcf ;_cgfb ++{_ddge =_eeffg [_cgddg ];_ddagc -=uint8 (_ccdgef .BitsPerComponent );_egdcd [_cedee ]|=byte (_ddge )<<_ddagc ;if _ddagc ==0{_ddagc =8;_cedee ++;};_cgddg ++;};};_ccdgef .Data =_egdcd ;
};

// PdfOutlineTreeNode contains common fields used by the outline and outline
// item objects.
type PdfOutlineTreeNode struct{_bacb interface{};First *PdfOutlineTreeNode ;Last *PdfOutlineTreeNode ;};

// ToPdfObject return the CalGray colorspace as a PDF object (name dictionary).
func (_bgfee *PdfColorspaceCalGray )ToPdfObject ()_bf .PdfObject {_gacfd :=&_bf .PdfObjectArray {};_gacfd .Append (_bf .MakeName ("\u0043a\u006c\u0047\u0072\u0061\u0079"));_bbfe :=_bf .MakeDict ();if _bgfee .WhitePoint !=nil {_bbfe .Set ("\u0057\u0068\u0069\u0074\u0065\u0050\u006f\u0069\u006e\u0074",_bf .MakeArray (_bf .MakeFloat (_bgfee .WhitePoint [0]),_bf .MakeFloat (_bgfee .WhitePoint [1]),_bf .MakeFloat (_bgfee .WhitePoint [2])));
}else {_bc .Log .Error ("\u0043\u0061\u006c\u0047\u0072\u0061\u0079\u003a\u0020\u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0057\u0068\u0069\u0074\u0065\u0050\u006fi\u006e\u0074\u0020\u0028\u0052e\u0071\u0075i\u0072\u0065\u0064\u0029");};if _bgfee .BlackPoint !=nil {_bbfe .Set ("\u0042\u006c\u0061\u0063\u006b\u0050\u006f\u0069\u006e\u0074",_bf .MakeArray (_bf .MakeFloat (_bgfee .BlackPoint [0]),_bf .MakeFloat (_bgfee .BlackPoint [1]),_bf .MakeFloat (_bgfee .BlackPoint [2])));
};_bbfe .Set ("\u0047\u0061\u006dm\u0061",_bf .MakeFloat (_bgfee .Gamma ));_gacfd .Append (_bbfe );if _bgfee ._fgba !=nil {_bgfee ._fgba .PdfObject =_gacfd ;return _bgfee ._fgba ;};return _gacfd ;};

// ToPdfObject implements interface PdfModel.
func (_gagg *PdfAnnotationPrinterMark )ToPdfObject ()_bf .PdfObject {_gagg .PdfAnnotation .ToPdfObject ();_abaf :=_gagg ._cdaf ;_ceadg :=_abaf .PdfObject .(*_bf .PdfObjectDictionary );_ceadg .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("P\u0072\u0069\u006e\u0074\u0065\u0072\u004d\u0061\u0072\u006b"));
_ceadg .SetIfNotNil ("\u004d\u004e",_gagg .MN );return _abaf ;};

// NewPdfField returns an initialized PdfField.
func NewPdfField ()*PdfField {return &PdfField {_fgcdf :_bf .MakeIndirectObject (_bf .MakeDict ())}};func _gfcf (_fegaa _bf .PdfObject )(*PdfColorspaceDeviceNAttributes ,error ){_gggde :=&PdfColorspaceDeviceNAttributes {};var _ddcb *_bf .PdfObjectDictionary ;
switch _addg :=_fegaa .(type ){case *_bf .PdfIndirectObject :_gggde ._agcf =_addg ;var _abc bool ;_ddcb ,_abc =_addg .PdfObject .(*_bf .PdfObjectDictionary );if !_abc {_bc .Log .Error ("\u0044\u0065\u0076\u0069c\u0065\u004e\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075t\u0065 \u0074\u0079\u0070\u0065\u0020\u0065\u0072r\u006f\u0072");
return nil ,_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};case *_bf .PdfObjectDictionary :_ddcb =_addg ;case *_bf .PdfObjectReference :_decb :=_addg .Resolve ();return _gfcf (_decb );default:_bc .Log .Error ("\u0044\u0065\u0076\u0069c\u0065\u004e\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075t\u0065 \u0074\u0079\u0070\u0065\u0020\u0065\u0072r\u006f\u0072");
return nil ,_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};if _ddagf :=_ddcb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065");_ddagf !=nil {_ebdf ,_bcbff :=_bf .TraceToDirectObject (_ddagf ).(*_bf .PdfObjectName );if !_bcbff {_bc .Log .Error ("\u0044\u0065vi\u0063\u0065\u004e \u0061\u0074\u0074\u0072ibu\u0074e \u0053\u0075\u0062\u0074\u0079\u0070\u0065 t\u0079\u0070\u0065\u0020\u0065\u0072\u0072o\u0072");
return nil ,_eff .New ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};_gggde .Subtype =_ebdf ;};if _cbbff :=_ddcb .Get ("\u0043o\u006c\u006f\u0072\u0061\u006e\u0074s");_cbbff !=nil {_gggde .Colorants =_cbbff ;};if _cbcfd :=_ddcb .Get ("\u0050r\u006f\u0063\u0065\u0073\u0073");
_cbcfd !=nil {_gggde .Process =_cbcfd ;};if _cabf :=_ddcb .Get ("M\u0069\u0078\u0069\u006e\u0067\u0048\u0069\u006e\u0074\u0073");_cabf !=nil {_gggde .MixingHints =_cabf ;};return _gggde ,nil ;};

// ToPdfObject returns a stream object.
func (_fcggg *XObjectImage )ToPdfObject ()_bf .PdfObject {_dcbbea :=_fcggg ._bccdb ;_acgdd :=_dcbbea .PdfObjectDictionary ;if _fcggg .Filter !=nil {_acgdd =_fcggg .Filter .MakeStreamDict ();_dcbbea .PdfObjectDictionary =_acgdd ;};_acgdd .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
_acgdd .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0049\u006d\u0061g\u0065"));_acgdd .Set ("\u0057\u0069\u0064t\u0068",_bf .MakeInteger (*(_fcggg .Width )));_acgdd .Set ("\u0048\u0065\u0069\u0067\u0068\u0074",_bf .MakeInteger (*(_fcggg .Height )));
if _fcggg .BitsPerComponent !=nil {_acgdd .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_bf .MakeInteger (*(_fcggg .BitsPerComponent )));};if _fcggg .ColorSpace !=nil {_acgdd .SetIfNotNil ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065",_fcggg .ColorSpace .ToPdfObject ());
};_acgdd .SetIfNotNil ("\u0049\u006e\u0074\u0065\u006e\u0074",_fcggg .Intent );_acgdd .SetIfNotNil ("\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k",_fcggg .ImageMask );_acgdd .SetIfNotNil ("\u004d\u0061\u0073\u006b",_fcggg .Mask );_afefe :=_acgdd .Get ("\u0044\u0065\u0063\u006f\u0064\u0065")!=nil ;
if _fcggg .Decode ==nil &&_afefe {_acgdd .Remove ("\u0044\u0065\u0063\u006f\u0064\u0065");}else if _fcggg .Decode !=nil {_acgdd .Set ("\u0044\u0065\u0063\u006f\u0064\u0065",_fcggg .Decode );};_acgdd .SetIfNotNil ("I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065",_fcggg .Interpolate );
_acgdd .SetIfNotNil ("\u0041\u006c\u0074e\u0072\u006e\u0061\u0074\u0069\u0076\u0065\u0073",_fcggg .Alternatives );_acgdd .SetIfNotNil ("\u0053\u004d\u0061s\u006b",_fcggg .SMask );_acgdd .SetIfNotNil ("S\u004d\u0061\u0073\u006b\u0049\u006e\u0044\u0061\u0074\u0061",_fcggg .SMaskInData );
_acgdd .SetIfNotNil ("\u004d\u0061\u0074t\u0065",_fcggg .Matte );_acgdd .SetIfNotNil ("\u004e\u0061\u006d\u0065",_fcggg .Name );_acgdd .SetIfNotNil ("\u0053\u0074\u0072u\u0063\u0074\u0050\u0061\u0072\u0065\u006e\u0074",_fcggg .StructParent );_acgdd .SetIfNotNil ("\u0049\u0044",_fcggg .ID );
_acgdd .SetIfNotNil ("\u004f\u0050\u0049",_fcggg .OPI );_acgdd .SetIfNotNil ("\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061",_fcggg .Metadata );_acgdd .SetIfNotNil ("\u004f\u0043",_fcggg .OC );_acgdd .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bf .MakeInteger (int64 (len (_fcggg .Stream ))));
_dcbbea .Stream =_fcggg .Stream ;return _dcbbea ;};

// FullName returns the full name of the field as in rootname.parentname.partialname.
func (_egde *PdfField )FullName ()(string ,error ){var _gffgb _cdc .Buffer ;_caead :=[]string {};if _egde .T !=nil {_caead =append (_caead ,_egde .T .Decoded ());};_cebd :=map[*PdfField ]bool {};_cebd [_egde ]=true ;_bgeg :=_egde .Parent ;for _bgeg !=nil {if _ ,_bbfba :=_cebd [_bgeg ];
_bbfba {return _gffgb .String (),_eff .New ("\u0072\u0065\u0063\u0075rs\u0069\u0076\u0065\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0061\u006c");};if _bgeg .T ==nil {return _gffgb .String (),_eff .New ("\u0066\u0069el\u0064\u0020\u0070a\u0072\u0074\u0069\u0061l n\u0061me\u0020\u0028\u0054\u0029\u0020\u006e\u006ft \u0073\u0070\u0065\u0063\u0069\u0066\u0069e\u0064");
};_caead =append (_caead ,_bgeg .T .Decoded ());_cebd [_bgeg ]=true ;_bgeg =_bgeg .Parent ;};for _adab :=len (_caead )-1;_adab >=0;_adab --{_gffgb .WriteString (_caead [_adab ]);if _adab > 0{_gffgb .WriteString ("\u002e");};};return _gffgb .String (),nil ;
};

// ImageToRGB converts CalRGB colorspace image to RGB and returns the result.
func (_adda *PdfColorspaceCalRGB )ImageToRGB (img Image )(Image ,error ){_fdfc :=_de .NewReader (img .getBase ());_gfbb :=_ff .NewImageBase (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),3,nil ,nil ,nil );_ege :=_de .NewWriter (_gfbb );
_ecef :=_fg .Pow (2,float64 (img .BitsPerComponent ))-1;_ecbgc :=make ([]uint32 ,3);var (_affg error ;_gfea ,_abee ,_baeb ,_dbbe ,_cbae ,_gfba float64 ;);for {_affg =_fdfc .ReadSamples (_ecbgc );if _affg ==_ag .EOF {break ;}else if _affg !=nil {return img ,_affg ;
};_gfea =float64 (_ecbgc [0])/_ecef ;_abee =float64 (_ecbgc [1])/_ecef ;_baeb =float64 (_ecbgc [2])/_ecef ;_dbbe =_adda .Matrix [0]*_fg .Pow (_gfea ,_adda .Gamma [0])+_adda .Matrix [3]*_fg .Pow (_abee ,_adda .Gamma [1])+_adda .Matrix [6]*_fg .Pow (_baeb ,_adda .Gamma [2]);
_cbae =_adda .Matrix [1]*_fg .Pow (_gfea ,_adda .Gamma [0])+_adda .Matrix [4]*_fg .Pow (_abee ,_adda .Gamma [1])+_adda .Matrix [7]*_fg .Pow (_baeb ,_adda .Gamma [2]);_gfba =_adda .Matrix [2]*_fg .Pow (_gfea ,_adda .Gamma [0])+_adda .Matrix [5]*_fg .Pow (_abee ,_adda .Gamma [1])+_adda .Matrix [8]*_fg .Pow (_baeb ,_adda .Gamma [2]);
_gfea =3.240479*_dbbe +-1.537150*_cbae +-0.498535*_gfba ;_abee =-0.969256*_dbbe +1.875992*_cbae +0.041556*_gfba ;_baeb =0.055648*_dbbe +-0.204043*_cbae +1.057311*_gfba ;_gfea =_fg .Min (_fg .Max (_gfea ,0),1.0);_abee =_fg .Min (_fg .Max (_abee ,0),1.0);
_baeb =_fg .Min (_fg .Max (_baeb ,0),1.0);_ecbgc [0]=uint32 (_gfea *_ecef );_ecbgc [1]=uint32 (_abee *_ecef );_ecbgc [2]=uint32 (_baeb *_ecef );if _affg =_ege .WriteSamples (_ecbgc );_affg !=nil {return img ,_affg ;};};return _cgfba (&_gfbb ),nil ;};func _gbagcc (_ccfbd []*_bf .PdfObjectStream )*_bf .PdfObjectArray {if len (_ccfbd )==0{return nil ;
};_abeee :=make ([]_bf .PdfObject ,0,len (_ccfbd ));for _ ,_gcced :=range _ccfbd {_abeee =append (_abeee ,_gcced );};return _bf .MakeArray (_abeee ...);};

// PdfFieldChoice represents a choice field which includes scrollable list boxes and combo boxes.
type PdfFieldChoice struct{*PdfField ;Opt *_bf .PdfObjectArray ;TI *_bf .PdfObjectInteger ;I *_bf .PdfObjectArray ;};

// Hasher is the interface that wraps the basic Write method.
type Hasher interface{Write (_accfe []byte )(_degag int ,_dgaaa error );};

// NewPdfActionRendition returns a new "rendition" action.
func NewPdfActionRendition ()*PdfActionRendition {_fdd :=NewPdfAction ();_dgd :=&PdfActionRendition {};_dgd .PdfAction =_fdd ;_fdd .SetContext (_dgd );return _dgd ;};

// SetDocInfo set document info.
// This will overwrite any globally declared document info.
func (_gacc *PdfWriter )SetDocInfo (info *PdfInfo ){_gacc .setDocInfo (info .ToPdfObject ())};

// Evaluate runs the function on the passed in slice and returns the results.
func (_dbcf *PdfFunctionType0 )Evaluate (x []float64 )([]float64 ,error ){if len (x )!=_dbcf .NumInputs {_bc .Log .Error ("\u004eu\u006d\u0062e\u0072\u0020\u006f\u0066 \u0069\u006e\u0070u\u0074\u0073\u0020\u006e\u006f\u0074\u0020\u006d\u0061tc\u0068\u0069\u006eg\u0020\u0077h\u0061\u0074\u0020\u0069\u0073\u0020n\u0065\u0065d\u0065\u0064");
return nil ,_eff .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};if _dbcf ._dacb ==nil {_cdgcg :=_dbcf .processSamples ();if _cdgcg !=nil {return nil ,_cdgcg ;};};_bagec :=_dbcf .Encode ;if _bagec ==nil {_bagec =[]float64 {};
for _gbag :=0;_gbag < len (_dbcf .Size );_gbag ++{_bagec =append (_bagec ,0);_bagec =append (_bagec ,float64 (_dbcf .Size [_gbag ]-1));};};_gged :=_dbcf .Decode ;if _gged ==nil {_gged =_dbcf .Range ;};_dbde :=make ([]int ,len (x ));for _ebce :=0;_ebce < len (x );
_ebce ++{_afbde :=x [_ebce ];_dbbfc :=_fg .Min (_fg .Max (_afbde ,_dbcf .Domain [2*_ebce ]),_dbcf .Domain [2*_ebce +1]);_cbebb :=_ff .LinearInterpolate (_dbbfc ,_dbcf .Domain [2*_ebce ],_dbcf .Domain [2*_ebce +1],_bagec [2*_ebce ],_bagec [2*_ebce +1]);
_dgbae :=_fg .Min (_fg .Max (_cbebb ,0),float64 (_dbcf .Size [_ebce ]-1));_faef :=int (_fg .Floor (_dgbae +0.5));if _faef < 0{_faef =0;}else if _faef > _dbcf .Size [_ebce ]{_faef =_dbcf .Size [_ebce ]-1;};_dbde [_ebce ]=_faef ;};_bcbb :=_dbde [0];for _ebfc :=1;
_ebfc < _dbcf .NumInputs ;_ebfc ++{_ggda :=_dbde [_ebfc ];for _dcece :=0;_dcece < _ebfc ;_dcece ++{_ggda *=_dbcf .Size [_dcece ];};_bcbb +=_ggda ;};_bcbb *=_dbcf .NumOutputs ;var _dgffd []float64 ;for _dggeb :=0;_dggeb < _dbcf .NumOutputs ;_dggeb ++{_gaafa :=_bcbb +_dggeb ;
if _gaafa >=len (_dbcf ._dacb ){_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a \u006e\u006ft\u0020\u0065\u006eo\u0075\u0067\u0068\u0020\u0069\u006ep\u0075\u0074\u0020sa\u006dp\u006c\u0065\u0073\u0020\u0074\u006f\u0020d\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u006f\u0075\u0074\u0070\u0075\u0074\u0020\u0076\u0061lu\u0065\u0073\u002e\u0020\u004f\u0075\u0074\u0070\u0075\u0074\u0020\u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0069\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u002e");
continue ;};_fdgb :=_dbcf ._dacb [_gaafa ];_agaeb :=_ff .LinearInterpolate (float64 (_fdgb ),0,_fg .Pow (2,float64 (_dbcf .BitsPerSample )),_gged [2*_dggeb ],_gged [2*_dggeb +1]);_ecbab :=_fg .Min (_fg .Max (_agaeb ,_dbcf .Range [2*_dggeb ]),_dbcf .Range [2*_dggeb +1]);
_dgffd =append (_dgffd ,_ecbab );};return _dgffd ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_bbfb *PdfAnnotationUnderline )ToPdfObject ()_bf .PdfObject {_bbfb .PdfAnnotation .ToPdfObject ();_cce :=_bbfb ._cdaf ;_fcfef :=_cce .PdfObject .(*_bf .PdfObjectDictionary );_bbfb .PdfAnnotationMarkup .appendToPdfDictionary (_fcfef );_fcfef .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0055n\u0064\u0065\u0072\u006c\u0069\u006ee"));
_fcfef .SetIfNotNil ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073",_bbfb .QuadPoints );return _cce ;};

// ToPdfObject implements model.PdfModel interface.
func (_dfdgb *PdfOutputIntent )ToPdfObject ()_bf .PdfObject {if _dfdgb ._dacca ==nil {_dfdgb ._dacca =_bf .MakeDict ();};_dgebe :=_dfdgb ._dacca ;if _dfdgb .Type !=""{_dgebe .Set ("\u0054\u0079\u0070\u0065",_bf .MakeName (_dfdgb .Type ));};_dgebe .Set ("\u0053",_bf .MakeName (_dfdgb .S .String ()));
if _dfdgb .OutputCondition !=""{_dgebe .Set ("\u004fu\u0074p\u0075\u0074\u0043\u006f\u006e\u0064\u0069\u0074\u0069\u006f\u006e",_bf .MakeString (_dfdgb .OutputCondition ));};_dgebe .Set ("\u004fu\u0074\u0070\u0075\u0074C\u006f\u006e\u0064\u0069\u0074i\u006fn\u0049d\u0065\u006e\u0074\u0069\u0066\u0069\u0065r",_bf .MakeString (_dfdgb .OutputConditionIdentifier ));
_dgebe .Set ("\u0052\u0065\u0067i\u0073\u0074\u0072\u0079\u004e\u0061\u006d\u0065",_bf .MakeString (_dfdgb .RegistryName ));if _dfdgb .Info !=""{_dgebe .Set ("\u0049\u006e\u0066\u006f",_bf .MakeString (_dfdgb .Info ));};if len (_dfdgb .DestOutputProfile )!=0{_beggf ,_gcaba :=_bf .MakeStream (_dfdgb .DestOutputProfile ,_bf .NewFlateEncoder ());
if _gcaba !=nil {_bc .Log .Error ("\u004d\u0061\u006b\u0065\u0053\u0074\u0072\u0065\u0061\u006d\u0020\u0044\u0065s\u0074\u004f\u0075\u0074\u0070\u0075t\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_gcaba );
};_beggf .PdfObjectDictionary .Set ("\u004e",_bf .MakeInteger (int64 (_dfdgb .ColorComponents )));_cbfc :=make ([]float64 ,_dfdgb .ColorComponents *2);for _geagg :=0;_geagg < _dfdgb .ColorComponents *2;_geagg ++{_ddedd :=0.0;if _geagg %2!=0{_ddedd =1.0;
};_cbfc [_geagg ]=_ddedd ;};_beggf .PdfObjectDictionary .Set ("\u0052\u0061\u006eg\u0065",_bf .MakeArrayFromFloats (_cbfc ));_dgebe .Set ("\u0044\u0065\u0073\u0074\u004f\u0075\u0074\u0070\u0075\u0074\u0050\u0072o\u0066\u0069\u006c\u0065",_beggf );};return _dgebe ;
};

// PdfAnnotationLine represents Line annotations.
// (Section 12.5.6.7).
type PdfAnnotationLine struct{*PdfAnnotation ;*PdfAnnotationMarkup ;L _bf .PdfObject ;BS _bf .PdfObject ;LE _bf .PdfObject ;IC _bf .PdfObject ;LL _bf .PdfObject ;LLE _bf .PdfObject ;Cap _bf .PdfObject ;IT _bf .PdfObject ;LLO _bf .PdfObject ;CP _bf .PdfObject ;
Measure _bf .PdfObject ;CO _bf .PdfObject ;};type fontCommon struct{_adccf string ;_fdfb string ;_bcggb string ;_bcdc _bf .PdfObject ;_ggcb *_cf .CMap ;_cedfe *PdfFontDescriptor ;_gbead int64 ;};

// ColorFromPdfObjects gets the color from a series of pdf objects (3 for rgb).
func (_cdagf *PdfColorspaceDeviceRGB )ColorFromPdfObjects (objects []_bf .PdfObject )(PdfColor ,error ){if len (objects )!=3{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_defba ,_cag :=_bf .GetNumbersAsFloat (objects );
if _cag !=nil {return nil ,_cag ;};return _cdagf .ColorFromFloats (_defba );};func (_daba *PdfAppender )addNewObject (_cacc _bf .PdfObject ){if _ ,_gegd :=_daba ._ceaf [_cacc ];!_gegd {_daba ._cbab =append (_daba ._cbab ,_cacc );_daba ._ceaf [_cacc ]=struct{}{};
};};

// NewXObjectImageFromImage creates a new XObject Image from an image object
// with default options. If encoder is nil, uses raw encoding (none).
func NewXObjectImageFromImage (img *Image ,cs PdfColorspace ,encoder _bf .StreamEncoder )(*XObjectImage ,error ){_fgacf :=NewXObjectImage ();return UpdateXObjectImageFromImage (_fgacf ,img ,cs ,encoder );};

// PdfTilingPattern is a Tiling pattern that consists of repetitions of a pattern cell with defined intervals.
// It is a type 1 pattern. (PatternType = 1).
// A tiling pattern is represented by a stream object, where the stream content is
// a content stream that describes the pattern cell.
type PdfTilingPattern struct{*PdfPattern ;PaintType *_bf .PdfObjectInteger ;TilingType *_bf .PdfObjectInteger ;BBox *PdfRectangle ;XStep *_bf .PdfObjectFloat ;YStep *_bf .PdfObjectFloat ;Resources *PdfPageResources ;Matrix *_bf .PdfObjectArray ;};func (_cfdaf *PdfPattern )getDict ()*_bf .PdfObjectDictionary {if _gdbdcd ,_dcfae :=_cfdaf ._bfcdg .(*_bf .PdfIndirectObject );
_dcfae {_edbgda ,_ccgc :=_gdbdcd .PdfObject .(*_bf .PdfObjectDictionary );if !_ccgc {return nil ;};return _edbgda ;}else if _fddb ,_agafg :=_cfdaf ._bfcdg .(*_bf .PdfObjectStream );_agafg {return _fddb .PdfObjectDictionary ;}else {_bc .Log .Debug ("\u0054r\u0079\u0069\u006e\u0067\u0020\u0074\u006f a\u0063\u0063\u0065\u0073\u0073\u0020\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020d\u0069\u0063t\u0069\u006f\u006ea\u0072\u0079\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0062j\u0065\u0063t \u0074\u0079\u0070e\u0020\u0028\u0025\u0054\u0029",_cfdaf ._bfcdg );
return nil ;};};func _aac (_cca _bf .PdfObject )(*PdfFilespec ,error ){if _cca ==nil {return nil ,nil ;};return NewPdfFilespecFromObj (_cca );};

// SetPageLabels sets the PageLabels entry in the PDF catalog.
// See section 12.4.2 "Page Labels" (p. 382 PDF32000_2008).
func (_eabbe *PdfWriter )SetPageLabels (pageLabels _bf .PdfObject )error {if pageLabels ==nil {return nil ;};_bc .Log .Trace ("\u0053\u0065t\u0074\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u0020\u0050\u0061\u0067\u0065\u004c\u0061\u0062\u0065\u006cs.\u002e\u002e");
_eabbe ._cecba .Set ("\u0050\u0061\u0067\u0065\u004c\u0061\u0062\u0065\u006c\u0073",pageLabels );return _eabbe .addObjects (pageLabels );};

// GetNameDictionary returns the Names entry in the PDF catalog.
// See section 7.7.4 "Name Dictionary" (p. 80 PDF32000_2008).
func (_agbef *PdfReader )GetNameDictionary ()(_bf .PdfObject ,error ){_bbdf :=_bf .ResolveReference (_agbef ._dbaea .Get ("\u004e\u0061\u006de\u0073"));if _bbdf ==nil {return nil ,nil ;};if !_agbef ._aggga {_ebbbag :=_agbef .traverseObjectData (_bbdf );
if _ebbbag !=nil {return nil ,_ebbbag ;};};return _bbdf ,nil ;};

// NewPdfColorDeviceRGB returns a new PdfColorDeviceRGB based on the r,g,b component values.
func NewPdfColorDeviceRGB (r ,g ,b float64 )*PdfColorDeviceRGB {_dcade :=PdfColorDeviceRGB {r ,g ,b };return &_dcade ;};

// ToPdfObject implements interface PdfModel.
func (_gdc *PdfActionMovie )ToPdfObject ()_bf .PdfObject {_gdc .PdfAction .ToPdfObject ();_dbdf :=_gdc ._fda ;_bdg :=_dbdf .PdfObject .(*_bf .PdfObjectDictionary );_bdg .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeMovie )));_bdg .SetIfNotNil ("\u0041\u006e\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e",_gdc .Annotation );
_bdg .SetIfNotNil ("\u0054",_gdc .T );_bdg .SetIfNotNil ("\u004fp\u0065\u0072\u0061\u0074\u0069\u006fn",_gdc .Operation );return _dbdf ;};

// Sign signs a specific page with a digital signature.
// The signature field parameter must have a valid signature dictionary
// specified by its V field.
func (_aadf *PdfAppender )Sign (pageNum int ,field *PdfFieldSignature )error {if field ==nil {return _eff .New ("\u0073\u0069g\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065 n\u0069\u006c");
};_bccd :=field .V ;if _bccd ==nil {return _eff .New ("\u0073\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0064\u0069\u0063\u0074i\u006fn\u0061r\u0079 \u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_dgab :=pageNum -1;
if _dgab < 0||_dgab > len (_aadf ._bagg )-1{return _af .Errorf ("\u0070\u0061\u0067\u0065\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064",pageNum );};_bbd :=_aadf .Reader .PageList [_dgab ];field .P =_bbd .ToPdfObject ();if field .T ==nil ||field .T .String ()==""{field .T =_bf .MakeString (_af .Sprintf ("\u0053\u0069\u0067n\u0061\u0074\u0075\u0072\u0065\u0020\u0025\u0064",pageNum ));
};_bbd .AddAnnotation (field .PdfAnnotationWidget .PdfAnnotation );if _aadf ._ccab ==_aadf ._abac .AcroForm {_aadf ._ccab =_aadf .Reader .AcroForm ;};_cgge :=_aadf ._ccab ;if _cgge ==nil {_cgge =NewPdfAcroForm ();};_cgge .SigFlags =_bf .MakeInteger (3);
_aafdf :=append (_cgge .AllFields (),field .PdfField );_cgge .Fields =&_aafdf ;_aadf .ReplaceAcroForm (_cgge );_aadf .UpdatePage (_bbd );_aadf ._bagg [_dgab ]=_bbd ;if _ ,_cfeg :=field .V .GetDocMDPPermission ();_cfeg {_aadf ._fcgf =NewPermissions (field .V );
};return nil ;};

// SetPdfAuthor sets the Author attribute of the output PDF.
func SetPdfAuthor (author string ){_ggeae .Lock ();defer _ggeae .Unlock ();_bfaacc =author };

// GetOutlinesFlattened returns a flattened list of tree nodes and titles.
// NOTE: for most use cases, it is recommended to use the high-level GetOutlines
// method instead, which also provides information regarding the destination
// of the outline items.
func (_gfdg *PdfReader )GetOutlinesFlattened ()([]*PdfOutlineTreeNode ,[]string ,error ){var _egffg []*PdfOutlineTreeNode ;var _ecgg []string ;var _bfcdc func (*PdfOutlineTreeNode ,*[]*PdfOutlineTreeNode ,*[]string ,int );_bfcdc =func (_bbgge *PdfOutlineTreeNode ,_degbgf *[]*PdfOutlineTreeNode ,_efdcc *[]string ,_gccd int ){if _bbgge ==nil {return ;
};if _bbgge ._bacb ==nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020M\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006e\u006fd\u0065\u002e\u0063o\u006et\u0065\u0078\u0074");return ;};_bfbeb ,_cfcfg :=_bbgge ._bacb .(*PdfOutlineItem );if _cfcfg {*_degbgf =append (*_degbgf ,&_bfbeb .PdfOutlineTreeNode );
_agfdc :=_gf .Repeat ("\u0020",_gccd *2)+_bfbeb .Title .Decoded ();*_efdcc =append (*_efdcc ,_agfdc );};if _bbgge .First !=nil {_dffbb :=_gf .Repeat ("\u0020",_gccd *2)+"\u002b";*_efdcc =append (*_efdcc ,_dffbb );_bfcdc (_bbgge .First ,_degbgf ,_efdcc ,_gccd +1);
};if _cfcfg &&_bfbeb .Next !=nil {_bfcdc (_bfbeb .Next ,_degbgf ,_efdcc ,_gccd );};};_bfcdc (_gfdg ._bgdac ,&_egffg ,&_ecgg ,0);return _egffg ,_ecgg ,nil ;};

// ToPdfObject implements interface PdfModel.
func (_dgg *PdfActionTrans )ToPdfObject ()_bf .PdfObject {_dgg .PdfAction .ToPdfObject ();_aea :=_dgg ._fda ;_gfg :=_aea .PdfObject .(*_bf .PdfObjectDictionary );_gfg .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeTrans )));_gfg .SetIfNotNil ("\u0054\u0072\u0061n\u0073",_dgg .Trans );
return _aea ;};

// ToPdfObject converts PdfAcroForm to a PdfObject, i.e. an indirect object containing the
// AcroForm dictionary.
func (_dabad *PdfAcroForm )ToPdfObject ()_bf .PdfObject {_ggefd :=_dabad ._ccfccd ;_beeffe :=_ggefd .PdfObject .(*_bf .PdfObjectDictionary );if _dabad .Fields !=nil {_dadef :=_bf .PdfObjectArray {};for _ ,_efefa :=range *_dabad .Fields {_dfaaf :=_efefa .GetContext ();
if _dfaaf !=nil {_dadef .Append (_dfaaf .ToPdfObject ());}else {_dadef .Append (_efefa .ToPdfObject ());};};_beeffe .Set ("\u0046\u0069\u0065\u006c\u0064\u0073",&_dadef );};if _dabad .NeedAppearances !=nil {_beeffe .Set ("\u004ee\u0065d\u0041\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0073",_dabad .NeedAppearances );
};if _dabad .SigFlags !=nil {_beeffe .Set ("\u0053\u0069\u0067\u0046\u006c\u0061\u0067\u0073",_dabad .SigFlags );};if _dabad .CO !=nil {_beeffe .Set ("\u0043\u004f",_dabad .CO );};if _dabad .DR !=nil {_beeffe .Set ("\u0044\u0052",_dabad .DR .ToPdfObject ());
};if _dabad .DA !=nil {_beeffe .Set ("\u0044\u0041",_dabad .DA );};if _dabad .Q !=nil {_beeffe .Set ("\u0051",_dabad .Q );};if _dabad .XFA !=nil {_beeffe .Set ("\u0058\u0046\u0041",_dabad .XFA );};return _ggefd ;};

// GetContext returns the action context which contains the specific type-dependent context.
// The context represents the subaction.
func (_gd *PdfAction )GetContext ()PdfModel {if _gd ==nil {return nil ;};return _gd ._baf ;};

// ReaderToWriterOpts options used to generate a PdfWriter.
type ReaderToWriterOpts struct{SkipAcroForm bool ;SkipInfo bool ;SkipNameDictionary bool ;SkipNamedDests bool ;SkipOCProperties bool ;SkipOutlines bool ;SkipPageLabels bool ;SkipRotation bool ;SkipMetadata bool ;PageProcessCallback PageProcessCallback ;


// Deprecated: will be removed in v4. Use PageProcessCallback instead.
PageCallback PageCallback ;};type pdfCIDFontType2 struct{fontCommon ;_ddfc *_bf .PdfIndirectObject ;_eddgf _faf .TextEncoder ;

// Table 117 – Entries in a CIDFont dictionary (page 269)
// Dictionary that defines the character collection of the CIDFont (required).
// See Table 116.
CIDSystemInfo *_bf .PdfObjectDictionary ;

// Glyph metrics fields (optional).
DW _bf .PdfObject ;W _bf .PdfObject ;DW2 _bf .PdfObject ;W2 _bf .PdfObject ;

// CIDs to glyph indices mapping (optional).
CIDToGIDMap _bf .PdfObject ;_deadg map[_faf .CharCode ]float64 ;_cecce float64 ;_ceae map[rune ]int ;};

// ToPdfObject returns the PDF representation of the function.
func (_bcee *PdfFunctionType3 )ToPdfObject ()_bf .PdfObject {_gegfc :=_bf .MakeDict ();_gegfc .Set ("\u0046\u0075\u006ec\u0074\u0069\u006f\u006e\u0054\u0079\u0070\u0065",_bf .MakeInteger (3));_aadad :=&_bf .PdfObjectArray {};for _ ,_gabc :=range _bcee .Domain {_aadad .Append (_bf .MakeFloat (_gabc ));
};_gegfc .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_aadad );if _bcee .Range !=nil {_cdec :=&_bf .PdfObjectArray {};for _ ,_dfgee :=range _bcee .Range {_cdec .Append (_bf .MakeFloat (_dfgee ));};_gegfc .Set ("\u0052\u0061\u006eg\u0065",_cdec );};if _bcee .Functions !=nil {_dfbge :=&_bf .PdfObjectArray {};
for _ ,_gafcb :=range _bcee .Functions {_dfbge .Append (_gafcb .ToPdfObject ());};_gegfc .Set ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006es",_dfbge );};if _bcee .Bounds !=nil {_dece :=&_bf .PdfObjectArray {};for _ ,_geafa :=range _bcee .Bounds {_dece .Append (_bf .MakeFloat (_geafa ));
};_gegfc .Set ("\u0042\u006f\u0075\u006e\u0064\u0073",_dece );};if _bcee .Encode !=nil {_fdddc :=&_bf .PdfObjectArray {};for _ ,_gcdea :=range _bcee .Encode {_fdddc .Append (_bf .MakeFloat (_gcdea ));};_gegfc .Set ("\u0045\u006e\u0063\u006f\u0064\u0065",_fdddc );
};if _bcee ._adcdfg !=nil {_bcee ._adcdfg .PdfObject =_gegfc ;return _bcee ._adcdfg ;};return _gegfc ;};func (_gcgb *PdfAppender )updateObjectsDeep (_caaa _bf .PdfObject ,_dgaf map[_bf .PdfObject ]struct{}){if _dgaf ==nil {_dgaf =map[_bf .PdfObject ]struct{}{};
};if _ ,_dafg :=_dgaf [_caaa ];_dafg ||_caaa ==nil {return ;};_dgaf [_caaa ]=struct{}{};_ffedd :=_bf .ResolveReferencesDeep (_caaa ,_gcgb ._ebed );if _ffedd !=nil {_bc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ffedd );};switch _dabg :=_caaa .(type ){case *_bf .PdfIndirectObject :switch {case _dabg .GetParser ()==_gcgb ._abac ._gafdb :return ;
case _dabg .GetParser ()==_gcgb .Reader ._gafdb :_ebcb ,_ :=_gcgb ._abac .GetIndirectObjectByNumber (int (_dabg .ObjectNumber ));_fbce ,_dbdd :=_ebcb .(*_bf .PdfIndirectObject );if _dbdd &&_fbce !=nil {if _fbce .PdfObject !=_dabg .PdfObject &&_fbce .PdfObject .WriteString ()!=_dabg .PdfObject .WriteString (){_gcgb .addNewObject (_caaa );
_gcgb ._bgfg [_caaa ]=_dabg .ObjectNumber ;};};default:_gcgb .addNewObject (_caaa );};_gcgb .updateObjectsDeep (_dabg .PdfObject ,_dgaf );case *_bf .PdfObjectArray :for _ ,_ffef :=range _dabg .Elements (){_gcgb .updateObjectsDeep (_ffef ,_dgaf );};case *_bf .PdfObjectDictionary :for _ ,_fbaaf :=range _dabg .Keys (){_gcgb .updateObjectsDeep (_dabg .Get (_fbaaf ),_dgaf );
};case *_bf .PdfObjectStreams :if _dabg .GetParser ()!=_gcgb ._abac ._gafdb {for _ ,_eadf :=range _dabg .Elements (){_gcgb .updateObjectsDeep (_eadf ,_dgaf );};};case *_bf .PdfObjectStream :switch {case _dabg .GetParser ()==_gcgb ._abac ._gafdb :return ;
case _dabg .GetParser ()==_gcgb .Reader ._gafdb :if _dddg ,_ffca :=_gcgb ._abac ._gafdb .LookupByReference (_dabg .PdfObjectReference );_ffca ==nil {var _ffbc bool ;if _dabgb ,_bgcf :=_bf .GetStream (_dddg );_bgcf &&_cdc .Equal (_dabgb .Stream ,_dabg .Stream ){_ffbc =true ;
};if _ecdf ,_dbda :=_bf .GetDict (_dddg );_ffbc &&_dbda {_ffbc =_ecdf .WriteString ()==_dabg .PdfObjectDictionary .WriteString ();};if _ffbc {return ;};};if _dabg .ObjectNumber !=0{_gcgb ._bgfg [_caaa ]=_dabg .ObjectNumber ;};default:if _ ,_dbeb :=_gcgb ._ceaf [_caaa ];
!_dbeb {_gcgb .addNewObject (_caaa );};};_gcgb .updateObjectsDeep (_dabg .PdfObjectDictionary ,_dgaf );};};

// SetColorspaceByName adds the provided colorspace to the page resources.
func (_agega *PdfPageResources )SetColorspaceByName (keyName _bf .PdfObjectName ,cs PdfColorspace )error {_ceea ,_egcaa :=_agega .GetColorspaces ();if _egcaa !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0072\u0061\u0063\u0065: \u0025\u0076",_egcaa );
return _egcaa ;};if _ceea ==nil {_ceea =NewPdfPageResourcesColorspaces ();_agega .SetColorSpace (_ceea );};_ceea .Set (keyName ,cs );return nil ;};

// Add appends a top level outline item to the outline.
func (_geaae *Outline )Add (item *OutlineItem ){_geaae .Entries =append (_geaae .Entries ,item )};

// Width returns the width of `rect`.
func (_agff *PdfRectangle )Width ()float64 {return _fg .Abs (_agff .Urx -_agff .Llx )};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_gedg *PdfShadingType1 )ToPdfObject ()_bf .PdfObject {_gedg .PdfShading .ToPdfObject ();_eegfd ,_ecce :=_gedg .getShadingDict ();if _ecce !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _gedg .Domain !=nil {_eegfd .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_gedg .Domain );};if _gedg .Matrix !=nil {_eegfd .Set ("\u004d\u0061\u0074\u0072\u0069\u0078",_gedg .Matrix );};if _gedg .Function !=nil {if len (_gedg .Function )==1{_eegfd .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_gedg .Function [0].ToPdfObject ());
}else {_cfbef :=_bf .MakeArray ();for _ ,_cadad :=range _gedg .Function {_cfbef .Append (_cadad .ToPdfObject ());};_eegfd .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_cfbef );};};return _gedg ._daaad ;};

// GetXObjectFormByName returns the XObjectForm with the specified name from the
// page resources, if it exists.
func (_gaafe *PdfPageResources )GetXObjectFormByName (keyName _bf .PdfObjectName )(*XObjectForm ,error ){_degd ,_bbceb :=_gaafe .GetXObjectByName (keyName );if _degd ==nil {return nil ,nil ;};if _bbceb !=XObjectTypeForm {return nil ,_eff .New ("\u006e\u006f\u0074\u0020\u0061\u0020\u0066\u006f\u0072\u006d");
};_cdcc ,_gfaca :=NewXObjectFormFromStream (_degd );if _gfaca !=nil {return nil ,_gfaca ;};return _cdcc ,nil ;};

// ReplaceAcroForm replaces the acrobat form. It appends a new form to the Pdf which
// replaces the original AcroForm.
func (_cbabf *PdfAppender )ReplaceAcroForm (acroForm *PdfAcroForm ){if acroForm !=nil {_cbabf .updateObjectsDeep (acroForm .ToPdfObject (),nil );};_cbabf ._ccab =acroForm ;};func (_cgaa *PdfReader )newPdfFieldFromIndirectObject (_ffdg *_bf .PdfIndirectObject ,_bbaad *PdfField )(*PdfField ,error ){if _ddbed ,_cdde :=_cgaa ._fgac .GetModelFromPrimitive (_ffdg ).(*PdfField );
_cdde {return _ddbed ,nil ;};_accge ,_cccf :=_bf .GetDict (_ffdg );if !_cccf {return nil ,_af .Errorf ("\u0050\u0064f\u0046\u0069\u0065\u006c\u0064 \u0069\u006e\u0064\u0069\u0072e\u0063\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0069\u006e\u0067\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_deaec :=NewPdfField ();_deaec ._fgcdf =_ffdg ;_deaec ._fgcdf .PdfObject =_accge ;if _eaca ,_dgbe :=_bf .GetName (_accge .Get ("\u0046\u0054"));_dgbe {_deaec .FT =_eaca ;};if _bbaad !=nil {_deaec .Parent =_bbaad ;};_deaec .T ,_ =_accge .Get ("\u0054").(*_bf .PdfObjectString );
_deaec .TU ,_ =_accge .Get ("\u0054\u0055").(*_bf .PdfObjectString );_deaec .TM ,_ =_accge .Get ("\u0054\u004d").(*_bf .PdfObjectString );_deaec .Ff ,_ =_accge .Get ("\u0046\u0066").(*_bf .PdfObjectInteger );_deaec .V =_accge .Get ("\u0056");_deaec .DV =_accge .Get ("\u0044\u0056");
_deaec .AA =_accge .Get ("\u0041\u0041");if DA :=_accge .Get ("\u0044\u0041");DA !=nil {DA ,_ :=_bf .GetString (DA );_deaec .VariableText =&VariableText {DA :DA };Q ,_ :=_accge .Get ("\u0051").(*_bf .PdfObjectInteger );DS ,_ :=_accge .Get ("\u0044\u0053").(*_bf .PdfObjectString );
RV :=_accge .Get ("\u0052\u0056");_deaec .VariableText .Q =Q ;_deaec .VariableText .DS =DS ;_deaec .VariableText .RV =RV ;};_dgacb :=_deaec .FT ;if _dgacb ==nil &&_bbaad !=nil {_dgacb =_bbaad .FT ;};if _dgacb !=nil {switch *_dgacb {case "\u0054\u0078":_gddd ,_gcc :=_fgcg (_accge );
if _gcc !=nil {return nil ,_gcc ;};_gddd .PdfField =_deaec ;_deaec ._gfbeb =_gddd ;case "\u0043\u0068":_abaa ,_gdbb :=_agbb (_accge );if _gdbb !=nil {return nil ,_gdbb ;};_abaa .PdfField =_deaec ;_deaec ._gfbeb =_abaa ;case "\u0042\u0074\u006e":_gceb ,_aaec :=_acab (_accge );
if _aaec !=nil {return nil ,_aaec ;};_gceb .PdfField =_deaec ;_deaec ._gfbeb =_gceb ;case "\u0053\u0069\u0067":_cega ,_agaeg :=_cgaa .newPdfFieldSignatureFromDict (_accge );if _agaeg !=nil {return nil ,_agaeg ;};_cega .PdfField =_deaec ;_deaec ._gfbeb =_cega ;
default:_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",*_deaec .FT );return nil ,_eff .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074\u0079p\u0065");
};};if _eagfb ,_accb :=_bf .GetName (_accge .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));_accb {if *_eagfb =="\u0057\u0069\u0064\u0067\u0065\u0074"{_dgafg ,_gabdc :=_cgaa .newPdfAnnotationFromIndirectObject (_ffdg );if _gabdc !=nil {return nil ,_gabdc ;
};_fcgeg ,_dddc :=_dgafg .GetContext ().(*PdfAnnotationWidget );if !_dddc {return nil ,_eff .New ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u0077\u0069\u0064\u0067e\u0074 \u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006fn");};_fcgeg ._adf =_deaec ;_fcgeg .Parent =_deaec ._fgcdf ;
_deaec .Annotations =append (_deaec .Annotations ,_fcgeg );return _deaec ,nil ;};};_bfdg :=true ;if _adbgb ,_fdag :=_bf .GetArray (_accge .Get ("\u004b\u0069\u0064\u0073"));_fdag {_daef :=make ([]*_bf .PdfIndirectObject ,0,_adbgb .Len ());for _ ,_cagg :=range _adbgb .Elements (){_ffffd ,_edag :=_bf .GetIndirect (_cagg );
if !_edag {_dbefb ,_gccf :=_bf .GetStream (_cagg );if _gccf &&_dbefb .PdfObjectDictionary !=nil {_aabc ,_dcfc :=_bf .GetNameVal (_dbefb .Get ("\u0054\u0079\u0070\u0065"));if _dcfc &&_aabc =="\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061"{_bc .Log .Debug ("E\u0052RO\u0052:\u0020f\u006f\u0072\u006d\u0020\u0066i\u0065\u006c\u0064 \u004b\u0069\u0064\u0073\u0020a\u0072\u0072\u0061y\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0069n\u0076\u0061\u006cid \u004d\u0065\u0074\u0061\u0064\u0061t\u0061\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u002e\u0020\u0053\u006bi\u0070p\u0069\u006e\u0067\u002e");
continue ;};};return nil ,_eff .New ("n\u006f\u0074\u0020\u0061\u006e\u0020i\u006e\u0064\u0069\u0072\u0065\u0063t\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0028\u0066\u006f\u0072\u006d\u0020\u0066\u0069\u0065\u006cd\u0029");};_cecc ,_ceab :=_bf .GetDict (_ffffd );
if !_ceab {return nil ,ErrTypeCheck ;};if _bfdg {_bfdg =!_fada (_cecc );};_daef =append (_daef ,_ffffd );};for _ ,_fbede :=range _daef {if _bfdg {_daad ,_aage :=_cgaa .newPdfAnnotationFromIndirectObject (_fbede );if _aage !=nil {_bc .Log .Debug ("\u0045r\u0072\u006fr\u0020\u006c\u006fa\u0064\u0069\u006e\u0067\u0020\u0077\u0069d\u0067\u0065\u0074\u0020\u0061\u006en\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u006f\u0072 \u0066\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0076",_aage );
return nil ,_aage ;};_decba ,_afbb :=_daad ._fgc .(*PdfAnnotationWidget );if !_afbb {return nil ,ErrTypeCheck ;};_decba ._adf =_deaec ;_deaec .Annotations =append (_deaec .Annotations ,_decba );}else {_cgccb ,_gfcg :=_cgaa .newPdfFieldFromIndirectObject (_fbede ,_deaec );
if _gfcg !=nil {_bc .Log .Debug ("\u0045\u0072r\u006f\u0072\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0063\u0068\u0069\u006c\u0064\u0020\u0066\u0069\u0065\u006c\u0064: \u0025\u0076",_gfcg );return nil ,_gfcg ;};_deaec .Kids =append (_deaec .Kids ,_cgccb );
};};};return _deaec ,nil ;};func (_fgfb *PdfReader )newPdfAnnotationCircleFromDict (_adcf *_bf .PdfObjectDictionary )(*PdfAnnotationCircle ,error ){_fbfb :=PdfAnnotationCircle {};_bea ,_fdcff :=_fgfb .newPdfAnnotationMarkupFromDict (_adcf );if _fdcff !=nil {return nil ,_fdcff ;
};_fbfb .PdfAnnotationMarkup =_bea ;_fbfb .BS =_adcf .Get ("\u0042\u0053");_fbfb .IC =_adcf .Get ("\u0049\u0043");_fbfb .BE =_adcf .Get ("\u0042\u0045");_fbfb .RD =_adcf .Get ("\u0052\u0044");return &_fbfb ,nil ;};func (_ecf *PdfAnnotation )String ()string {_feb :="";
_fegc ,_gaag :=_ecf .ToPdfObject ().(*_bf .PdfIndirectObject );if _gaag {_feb =_af .Sprintf ("\u0025\u0054\u003a\u0020\u0025\u0073",_ecf ._fgc ,_fegc .PdfObject .String ());};return _feb ;};var _ pdfFont =(*pdfCIDFontType2 )(nil );

// ToPdfObject converts the font to a PDF representation.
func (_afgb *pdfFontType3 )ToPdfObject ()_bf .PdfObject {if _afgb ._ggeeg ==nil {_afgb ._ggeeg =&_bf .PdfIndirectObject {};};_ddcd :=_afgb .baseFields ().asPdfObjectDictionary ("\u0054\u0079\u0070e\u0033");_afgb ._ggeeg .PdfObject =_ddcd ;if _afgb .FirstChar !=nil {_ddcd .Set ("\u0046i\u0072\u0073\u0074\u0043\u0068\u0061r",_afgb .FirstChar );
};if _afgb .LastChar !=nil {_ddcd .Set ("\u004c\u0061\u0073\u0074\u0043\u0068\u0061\u0072",_afgb .LastChar );};if _afgb .Widths !=nil {_ddcd .Set ("\u0057\u0069\u0064\u0074\u0068\u0073",_afgb .Widths );};if _afgb .Encoding !=nil {_ddcd .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_afgb .Encoding );
}else if _afgb ._adgcd !=nil {_dbcb :=_afgb ._adgcd .ToPdfObject ();if _dbcb !=nil {_ddcd .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_dbcb );};};if _afgb .FontBBox !=nil {_ddcd .Set ("\u0046\u006f\u006e\u0074\u0042\u0042\u006f\u0078",_afgb .FontBBox );
};if _afgb .FontMatrix !=nil {_ddcd .Set ("\u0046\u006f\u006e\u0074\u004d\u0061\u0074\u0069\u0072\u0078",_afgb .FontMatrix );};if _afgb .CharProcs !=nil {_ddcd .Set ("\u0043h\u0061\u0072\u0050\u0072\u006f\u0063s",_afgb .CharProcs );};if _afgb .Resources !=nil {_ddcd .Set ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s",_afgb .Resources );
};return _afgb ._ggeeg ;};

// DecodeArray returns the range of color component values in DeviceCMYK colorspace.
func (_cfca *PdfColorspaceDeviceCMYK )DecodeArray ()[]float64 {return []float64 {0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0};};

// ColorToRGB converts a color in Separation colorspace to RGB colorspace.
func (_gffc *PdfColorspaceSpecialSeparation )ColorToRGB (color PdfColor )(PdfColor ,error ){if _gffc .AlternateSpace ==nil {return nil ,_eff .New ("\u0061\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0020c\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};return _gffc .AlternateSpace .ColorToRGB (color );};

// Val returns the color value.
func (_bbge *PdfColorDeviceGray )Val ()float64 {return float64 (*_bbge )};

// GetPatternByName gets the pattern specified by keyName. Returns nil if not existing.
// The bool flag indicated whether it was found or not.
func (_cabef *PdfPageResources )GetPatternByName (keyName _bf .PdfObjectName )(*PdfPattern ,bool ){if _cabef .Pattern ==nil {return nil ,false ;};_efadg ,_gefd :=_bf .TraceToDirectObject (_cabef .Pattern ).(*_bf .PdfObjectDictionary );if !_gefd {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0061\u0074t\u0065\u0072\u006e\u0020\u0065\u006e\u0074r\u0079\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064i\u0063\u0074\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_cabef .Pattern );
return nil ,false ;};if _bdaee :=_efadg .Get (keyName );_bdaee !=nil {_bbee ,_gfga :=_cegc (_bdaee );if _gfga !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020f\u0061\u0069l\u0065\u0064\u0020\u0074\u006f\u0020\u006c\u006fa\u0064\u0020\u0070\u0064\u0066\u0020\u0070\u0061\u0074\u0074\u0065\u0072n\u003a\u0020\u0025\u0076",_gfga );
return nil ,false ;};return _bbee ,true ;};return nil ,false ;};func _fgcg (_ceagb *_bf .PdfObjectDictionary )(*PdfFieldText ,error ){_cbgg :=&PdfFieldText {};_cbgg .DA ,_ =_bf .GetString (_ceagb .Get ("\u0044\u0041"));_cbgg .Q ,_ =_bf .GetInt (_ceagb .Get ("\u0051"));
_cbgg .DS ,_ =_bf .GetString (_ceagb .Get ("\u0044\u0053"));_cbgg .RV =_ceagb .Get ("\u0052\u0056");_cbgg .MaxLen ,_ =_bf .GetInt (_ceagb .Get ("\u004d\u0061\u0078\u004c\u0065\u006e"));return _cbgg ,nil ;};

// NewPdfActionSound returns a new "sound" action.
func NewPdfActionSound ()*PdfActionSound {_dgb :=NewPdfAction ();_deb :=&PdfActionSound {};_deb .PdfAction =_dgb ;_dgb .SetContext (_deb );return _deb ;};

// PdfActionJavaScript represents a javaScript action.
type PdfActionJavaScript struct{*PdfAction ;JS _bf .PdfObject ;};

// GetEncryptionMethod returns a descriptive information string about the encryption method used.
func (_abbd *PdfReader )GetEncryptionMethod ()string {_ageae :=_abbd ._gafdb .GetCrypter ();return _ageae .String ();};

// PdfAnnotationTrapNet represents TrapNet annotations.
// (Section 12.5.6.21).
type PdfAnnotationTrapNet struct{*PdfAnnotation };

// GetStandardApplier gets currently used StandardApplier..
func (_aceff *PdfWriter )GetStandardApplier ()StandardApplier {return _aceff ._ggaa };

// SetAction sets the PDF action for the annotation link.
func (_gbeg *PdfAnnotationLink )SetAction (action *PdfAction ){_gbeg ._fcfb =action ;if action ==nil {_gbeg .A =nil ;};};type modelManager struct{_bdcfa map[PdfModel ]_bf .PdfObject ;_deade map[_bf .PdfObject ]PdfModel ;};

// PdfAnnotationCircle represents Circle annotations.
// (Section 12.5.6.8).
type PdfAnnotationCircle struct{*PdfAnnotation ;*PdfAnnotationMarkup ;BS _bf .PdfObject ;IC _bf .PdfObject ;BE _bf .PdfObject ;RD _bf .PdfObject ;};func (_facef *PdfAcroForm )fill (_bcbg FieldValueProvider ,_gbcbg FieldAppearanceGenerator )error {if _facef ==nil {return nil ;
};_gada ,_afabb :=_bcbg .FieldValues ();if _afabb !=nil {return _afabb ;};for _ ,_ceacb :=range _facef .AllFields (){_ddgg :=_ceacb .PartialName ();_aceg ,_feaa :=_gada [_ddgg ];if !_feaa {if _dadbb ,_bedf :=_ceacb .FullName ();_bedf ==nil {_aceg ,_feaa =_gada [_dadbb ];
};};if !_feaa {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020f\u006f\u0072\u006d \u0066\u0069\u0065l\u0064\u0020\u0025\u0073\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u0069n \u0074\u0068\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0072\u002e\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u002e",_ddgg );
continue ;};if _ebecg :=_geegg (_ceacb ,_aceg );_ebecg !=nil {return _ebecg ;};if _gbcbg ==nil {continue ;};for _ ,_afcd :=range _ceacb .Annotations {_aggce ,_acgga :=_gbcbg .GenerateAppearanceDict (_facef ,_ceacb ,_afcd );if _acgga !=nil {return _acgga ;
};_afcd .AP =_aggce ;_afcd .ToPdfObject ();};};return nil ;};var _adccb =map[string ]struct{}{"\u0057i\u006eA\u006e\u0073\u0069\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067":{},"\u004d\u0061c\u0052\u006f\u006da\u006e\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067":{},"\u004d\u0061\u0063\u0045\u0078\u0070\u0065\u0072\u0074\u0045\u006e\u0063o\u0064\u0069\u006e\u0067":{},"\u0053\u0074a\u006e\u0064\u0061r\u0064\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067":{}};


// NewPdfReader returns a new PdfReader for an input io.ReadSeeker interface. Can be used to read PDF from
// memory or file. Immediately loads and traverses the PDF structure including pages and page contents (if
// not encrypted). Loads entire document structure into memory.
// Alternatively a lazy-loading reader can be created with NewPdfReaderLazy which loads only references,
// and references are loaded from disk into memory on an as-needed basis.
func NewPdfReader (rs _ag .ReadSeeker )(*PdfReader ,error ){const _acce ="\u006do\u0064e\u006c\u003a\u004e\u0065\u0077P\u0064\u0066R\u0065\u0061\u0064\u0065\u0072";return _bfaag (rs ,&ReaderOpts {},false ,_acce );};func _baef (_fdec _bf .PdfObject )(*PdfFunctionType3 ,error ){_daebfe :=&PdfFunctionType3 {};
var _afbfe *_bf .PdfObjectDictionary ;if _gcdad ,_ddac :=_fdec .(*_bf .PdfIndirectObject );_ddac {_fddcf ,_cgfcd :=_gcdad .PdfObject .(*_bf .PdfObjectDictionary );if !_cgfcd {return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
};_daebfe ._adcdfg =_gcdad ;_afbfe =_fddcf ;}else if _ccbff ,_ebga :=_fdec .(*_bf .PdfObjectDictionary );_ebga {_afbfe =_ccbff ;}else {return nil ,_eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_agcg ,_daacd :=_bf .TraceToDirectObject (_afbfe .Get ("\u0044\u006f\u006d\u0061\u0069\u006e")).(*_bf .PdfObjectArray );
if !_daacd {_bc .Log .Error ("D\u006fm\u0061\u0069\u006e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063\u0069fi\u0065\u0064");return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if _agcg .Len ()!=2{_bc .Log .Error ("\u0044\u006f\u006d\u0061\u0069\u006e\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");return nil ,_eff .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0064\u006f\u006da\u0069\u006e\u0020\u0072an\u0067\u0065");};_deada ,_aagbg :=_agcg .ToFloat64Array ();
if _aagbg !=nil {return nil ,_aagbg ;};_daebfe .Domain =_deada ;_agcg ,_daacd =_bf .TraceToDirectObject (_afbfe .Get ("\u0052\u0061\u006eg\u0065")).(*_bf .PdfObjectArray );if _daacd {if _agcg .Len ()< 0||_agcg .Len ()%2!=0{return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");
};_gdfde ,_aedef :=_agcg .ToFloat64Array ();if _aedef !=nil {return nil ,_aedef ;};_daebfe .Range =_gdfde ;};_agcg ,_daacd =_bf .TraceToDirectObject (_afbfe .Get ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006es")).(*_bf .PdfObjectArray );if !_daacd {_bc .Log .Error ("\u0046\u0075\u006ect\u0069\u006f\u006e\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064");
return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};_daebfe .Functions =[]PdfFunction {};
for _ ,_ebdfg :=range _agcg .Elements (){_ccec ,_ccfa :=_bbbbd (_ebdfg );if _ccfa !=nil {return nil ,_ccfa ;};_daebfe .Functions =append (_daebfe .Functions ,_ccec );};_agcg ,_daacd =_bf .TraceToDirectObject (_afbfe .Get ("\u0042\u006f\u0075\u006e\u0064\u0073")).(*_bf .PdfObjectArray );
if !_daacd {_bc .Log .Error ("B\u006fu\u006e\u0064\u0073\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063\u0069fi\u0065\u0064");return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};_cedea ,_aagbg :=_agcg .ToFloat64Array ();if _aagbg !=nil {return nil ,_aagbg ;};_daebfe .Bounds =_cedea ;if len (_daebfe .Bounds )!=len (_daebfe .Functions )-1{_bc .Log .Error ("B\u006f\u0075\u006e\u0064\u0073\u0020\u0028\u0025\u0064)\u0020\u0061\u006e\u0064\u0020\u006e\u0075m \u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0073\u0020\u0028\u0025\u0064\u0029 n\u006f\u0074 \u006d\u0061\u0074\u0063\u0068\u0069\u006e\u0067",len (_daebfe .Bounds ),len (_daebfe .Functions ));
return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_agcg ,_daacd =_bf .TraceToDirectObject (_afbfe .Get ("\u0045\u006e\u0063\u006f\u0064\u0065")).(*_bf .PdfObjectArray );if !_daacd {_bc .Log .Error ("E\u006ec\u006f\u0064\u0065\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063\u0069fi\u0065\u0064");
return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};_aaag ,_aagbg :=_agcg .ToFloat64Array ();
if _aagbg !=nil {return nil ,_aagbg ;};_daebfe .Encode =_aaag ;if len (_daebfe .Encode )!=2*len (_daebfe .Functions ){_bc .Log .Error ("\u004c\u0065\u006e\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0020\u0028\u0025\u0064\u0029 \u0061\u006e\u0064\u0020\u006e\u0075\u006d\u0020\u0066\u0075\u006e\u0063\u0074i\u006f\u006e\u0073\u0020\u0028\u0025\u0064\u0029\u0020\u006e\u006f\u0074 m\u0061\u0074\u0063\u0068\u0069\u006e\u0067\u0020\u0075\u0070",len (_daebfe .Encode ),len (_daebfe .Functions ));
return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};return _daebfe ,nil ;};

// NewPdfAnnotationRichMedia returns a new rich media annotation.
func NewPdfAnnotationRichMedia ()*PdfAnnotationRichMedia {_aae :=NewPdfAnnotation ();_ebc :=&PdfAnnotationRichMedia {};_ebc .PdfAnnotation =_aae ;_aae .SetContext (_ebc );return _ebc ;};func (_bccb *PdfReader )newPdfAnnotationSquareFromDict (_deed *_bf .PdfObjectDictionary )(*PdfAnnotationSquare ,error ){_eea :=PdfAnnotationSquare {};
_edcb ,_efb :=_bccb .newPdfAnnotationMarkupFromDict (_deed );if _efb !=nil {return nil ,_efb ;};_eea .PdfAnnotationMarkup =_edcb ;_eea .BS =_deed .Get ("\u0042\u0053");_eea .IC =_deed .Get ("\u0049\u0043");_eea .BE =_deed .Get ("\u0042\u0045");_eea .RD =_deed .Get ("\u0052\u0044");
return &_eea ,nil ;};

// NewPdfAppenderWithOpts creates a new Pdf appender from a Pdf reader with options.
func NewPdfAppenderWithOpts (reader *PdfReader ,opts *ReaderOpts ,encryptOptions *EncryptOptions )(*PdfAppender ,error ){_cede :=&PdfAppender {_fab :reader ._geeda ,Reader :reader ,_gaed :reader ._gafdb ,_ebed :reader ._eddf };_bdc ,_ecca :=_cede ._fab .Seek (0,_ag .SeekEnd );
if _ecca !=nil {return nil ,_ecca ;};_cede ._eac =_bdc ;if _ ,_ecca =_cede ._fab .Seek (0,_ag .SeekStart );_ecca !=nil {return nil ,_ecca ;};_cede ._abac ,_ecca =NewPdfReaderWithOpts (_cede ._fab ,opts );if _ecca !=nil {return nil ,_ecca ;};for _ ,_edbgd :=range _cede .Reader .GetObjectNums (){if _cede ._dcgcc < _edbgd {_cede ._dcgcc =_edbgd ;
};};_cede ._bfb =_cede ._gaed .GetXrefTable ();_cede ._dafc =_cede ._gaed .GetXrefOffset ();_cede ._bagg =append (_cede ._bagg ,_cede ._abac .PageList ...);_cede ._ceaf =make (map[_bf .PdfObject ]struct{});_cede ._bgfg =make (map[_bf .PdfObject ]int64 );
_cede ._gcbg =make (map[_bf .PdfObject ]struct{});_cede ._ccab =_cede ._abac .AcroForm ;_cede ._abecf =_cede ._abac .DSS ;if opts !=nil {_cede ._fggd =opts .Password ;};if encryptOptions !=nil {_cede ._abgb =encryptOptions ;};return _cede ,nil ;};

// FlattenFields flattens the form fields and annotations for the PDF loaded in `pdf` and makes
// non-editable.
// Looks up all widget annotations corresponding to form fields and flattens them by drawing the content
// through the content stream rather than annotations.
// References to flattened annotations will be removed from Page Annots array. For fields the AcroForm entry
// will be emptied.
// When `allannots` is true, all annotations will be flattened. Keep false if want to keep non-form related
// annotations intact.
// When `appgen` is not nil, it will be used to generate appearance streams for the field annotations.
func (_eegc *PdfReader )FlattenFields (allannots bool ,appgen FieldAppearanceGenerator )error {return _eegc .flattenFieldsWithOpts (allannots ,appgen ,nil );};

// R returns the value of the red component of the color.
func (_gfac *PdfColorDeviceRGB )R ()float64 {return _gfac [0]};

// PdfAnnotation3D represents 3D annotations.
// (Section 13.6.2).
type PdfAnnotation3D struct{*PdfAnnotation ;T3DD _bf .PdfObject ;T3DV _bf .PdfObject ;T3DA _bf .PdfObject ;T3DI _bf .PdfObject ;T3DB _bf .PdfObject ;};

// ToPdfObject implements interface PdfModel.
func (_bffbd *PdfSignature )ToPdfObject ()_bf .PdfObject {_ecdg :=_bffbd ._decde ;var _eccdc *_bf .PdfObjectDictionary ;if _bbggee ,_gadad :=_ecdg .PdfObject .(*pdfSignDictionary );_gadad {_eccdc =_bbggee .PdfObjectDictionary ;}else {_eccdc =_ecdg .PdfObject .(*_bf .PdfObjectDictionary );
};_eccdc .SetIfNotNil ("\u0054\u0079\u0070\u0065",_bffbd .Type );_eccdc .SetIfNotNil ("\u0046\u0069\u006c\u0074\u0065\u0072",_bffbd .Filter );_eccdc .SetIfNotNil ("\u0053u\u0062\u0046\u0069\u006c\u0074\u0065r",_bffbd .SubFilter );_eccdc .SetIfNotNil ("\u0042y\u0074\u0065\u0052\u0061\u006e\u0067e",_bffbd .ByteRange );
_eccdc .SetIfNotNil ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_bffbd .Contents );_eccdc .SetIfNotNil ("\u0043\u0065\u0072\u0074",_bffbd .Cert );_eccdc .SetIfNotNil ("\u004e\u0061\u006d\u0065",_bffbd .Name );_eccdc .SetIfNotNil ("\u0052\u0065\u0061\u0073\u006f\u006e",_bffbd .Reason );
_eccdc .SetIfNotNil ("\u004d",_bffbd .M );_eccdc .SetIfNotNil ("\u0052e\u0066\u0065\u0072\u0065\u006e\u0063e",_bffbd .Reference );_eccdc .SetIfNotNil ("\u0043h\u0061\u006e\u0067\u0065\u0073",_bffbd .Changes );_eccdc .SetIfNotNil ("C\u006f\u006e\u0074\u0061\u0063\u0074\u0049\u006e\u0066\u006f",_bffbd .ContactInfo );
return _ecdg ;};func (_facb *PdfReader )newPdfActionSoundFromDict (_adce *_bf .PdfObjectDictionary )(*PdfActionSound ,error ){return &PdfActionSound {Sound :_adce .Get ("\u0053\u006f\u0075n\u0064"),Volume :_adce .Get ("\u0056\u006f\u006c\u0075\u006d\u0065"),Synchronous :_adce .Get ("S\u0079\u006e\u0063\u0068\u0072\u006f\u006e\u006f\u0075\u0073"),Repeat :_adce .Get ("\u0052\u0065\u0070\u0065\u0061\u0074"),Mix :_adce .Get ("\u004d\u0069\u0078")},nil ;
};

// GetContentStream returns the XObject Form's content stream.
func (_deege *XObjectForm )GetContentStream ()([]byte ,error ){_eacfb ,_agggf :=_bf .DecodeStream (_deege ._cdaggd );if _agggf !=nil {return nil ,_agggf ;};return _eacfb ,nil ;};

// GetContainingPdfObject returns the containing object for the PdfField, i.e. an indirect object
// containing the field dictionary.
func (_dedb *PdfField )GetContainingPdfObject ()_bf .PdfObject {return _dedb ._fgcdf };

// GetRuneMetrics returns the character metrics for the rune.
// A bool flag is returned to indicate whether or not the entry was found.
func (_fdfef pdfFontSimple )GetRuneMetrics (r rune )(_eb .CharMetrics ,bool ){if _fdfef ._bdcde !=nil {_dbgbf ,_bgda :=_fdfef ._bdcde .Read (r );if _bgda {return _dbgbf ,true ;};};_dfad :=_fdfef .Encoder ();if _dfad ==nil {_bc .Log .Debug ("\u004e\u006f\u0020en\u0063\u006f\u0064\u0065\u0072\u0020\u0066\u006f\u0072\u0020\u0066\u006f\u006e\u0074\u0073\u003d\u0025\u0073",_fdfef );
return _eb .CharMetrics {},false ;};_gcfea ,_defeg :=_dfad .RuneToCharcode (r );if !_defeg {if r !=' '{_bc .Log .Trace ("\u004e\u006f\u0020c\u0068\u0061\u0072\u0063o\u0064\u0065\u0020\u0066\u006f\u0072\u0020r\u0075\u006e\u0065\u003d\u0025\u0076\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0073",r ,_fdfef );
};return _eb .CharMetrics {},false ;};_ggbc ,_afcc :=_fdfef .GetCharMetrics (_gcfea );return _ggbc ,_afcc ;};

// NewPdfTransformParamsDocMDP create a PdfTransformParamsDocMDP with the specific permissions.
func NewPdfTransformParamsDocMDP (permission _bcd .DocMDPPermission )*PdfTransformParamsDocMDP {return &PdfTransformParamsDocMDP {Type :_bf .MakeName ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u0050\u0061\u0072\u0061\u006d\u0073"),P :_bf .MakeInteger (int64 (permission )),V :_bf .MakeName ("\u0031\u002e\u0032")};
};

// AlphaMap performs mapping of alpha data for transformations. Allows custom filtering of alpha data etc.
func (_bfcbd *Image )AlphaMap (mapFunc AlphaMapFunc ){for _begff ,_fefa :=range _bfcbd ._gfegf {_bfcbd ._gfegf [_begff ]=mapFunc (_fefa );};};func (_effae *PdfWriter )checkLicense ()error {_efcef :=_bad .GetLicenseKey ();if (_efcef ==nil ||!_efcef .IsLicensed ())&&!_cddga {_af .Printf ("\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064\u0020c\u006f\u0070\u0079\u0020\u006f\u0066\u0020\u0055\u006e\u0069P\u0044\u0046\u000a");
_af .Println ("-\u0020\u0047\u0065\u0074\u0020\u0061\u0020\u0066\u0072e\u0065\u0020\u0074\u0072\u0069\u0061\u006c l\u0069\u0063\u0065\u006es\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070s:\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _eff .New ("\u0075\u006e\u0069\u0070d\u0066\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020c\u006fd\u0065\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0064");};return nil ;};

// GetColorspaces loads PdfPageResourcesColorspaces from `r.ColorSpace` and returns an error if there
// is a problem loading. Once loaded, the same object is returned on multiple calls.
func (_agagf *PdfPageResources )GetColorspaces ()(*PdfPageResourcesColorspaces ,error ){if _agagf ._dbcab !=nil {return _agagf ._dbcab ,nil ;};if _agagf .ColorSpace ==nil {return nil ,nil ;};_dfbee ,_abaag :=_aecdf (_agagf .ColorSpace );if _abaag !=nil {return nil ,_abaag ;
};_agagf ._dbcab =_dfbee ;return _agagf ._dbcab ,nil ;};

// GetOutlineTree returns the outline tree.
func (_bbcbc *PdfReader )GetOutlineTree ()*PdfOutlineTreeNode {return _bbcbc ._bgdac };

// FieldFilterFunc represents a PDF field filtering function. If the function
// returns true, the PDF field is kept, otherwise it is discarded.
type FieldFilterFunc func (*PdfField )bool ;

// ColorToRGB converts a ICCBased color to an RGB color.
func (_dbgd *PdfColorspaceICCBased )ColorToRGB (color PdfColor )(PdfColor ,error ){if _dbgd .Alternate ==nil {_bc .Log .Debug ("I\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061lt\u0065\u0072\u006ea\u0074i\u0076\u0065");
if _dbgd .N ==1{_bc .Log .Debug ("\u0049\u0043\u0043\u0020\u0042a\u0073\u0065\u0064\u0020\u0063o\u006co\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061\u006c\u0074\u0065r\u006e\u0061\u0074\u0069\u0076\u0065\u0020\u002d\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061y\u0020\u0028\u004e\u003d\u0031\u0029");
_bcgc :=NewPdfColorspaceDeviceGray ();return _bcgc .ColorToRGB (color );}else if _dbgd .N ==3{_bc .Log .Debug ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0061\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0069\u0076\u0065\u0020\u002d\u0020\u0075\u0073\u0069\u006eg\u0020\u0044\u0065\u0076\u0069\u0063e\u0052\u0047B\u0020\u0028N\u003d3\u0029");
return color ,nil ;}else if _dbgd .N ==4{_bc .Log .Debug ("\u0049\u0043\u0043\u0020\u0042a\u0073\u0065\u0064\u0020\u0063o\u006co\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061\u006c\u0074\u0065r\u006e\u0061\u0074\u0069\u0076\u0065\u0020\u002d\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059K\u0020\u0028\u004e\u003d\u0034\u0029");
_dcaf :=NewPdfColorspaceDeviceCMYK ();return _dcaf .ColorToRGB (color );}else {return nil ,_eff .New ("I\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0061lt\u0065\u0072\u006ea\u0074i\u0076\u0065");
};};_bc .Log .Trace ("\u0049\u0043\u0043 \u0042\u0061\u0073\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u006c\u0074\u0065\u0072\u006e\u0061t\u0069\u0076\u0065\u003a\u0020\u0025\u0023\u0076",_dbgd );
return _dbgd .Alternate .ColorToRGB (color );};

// NewPdfActionJavaScript returns a new "javaScript" action.
func NewPdfActionJavaScript ()*PdfActionJavaScript {_afd :=NewPdfAction ();_fgd :=&PdfActionJavaScript {};_fgd .PdfAction =_afd ;_afd .SetContext (_fgd );return _fgd ;};

// ToPdfObject implements interface PdfModel.
func (_acde *PdfAnnotationPolygon )ToPdfObject ()_bf .PdfObject {_acde .PdfAnnotation .ToPdfObject ();_fec :=_acde ._cdaf ;_ccbf :=_fec .PdfObject .(*_bf .PdfObjectDictionary );_acde .PdfAnnotationMarkup .appendToPdfDictionary (_ccbf );_ccbf .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0050o\u006c\u0079\u0067\u006f\u006e"));
_ccbf .SetIfNotNil ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073",_acde .Vertices );_ccbf .SetIfNotNil ("\u004c\u0045",_acde .LE );_ccbf .SetIfNotNil ("\u0042\u0053",_acde .BS );_ccbf .SetIfNotNil ("\u0049\u0043",_acde .IC );_ccbf .SetIfNotNil ("\u0042\u0045",_acde .BE );
_ccbf .SetIfNotNil ("\u0049\u0054",_acde .IT );_ccbf .SetIfNotNil ("\u004de\u0061\u0073\u0075\u0072\u0065",_acde .Measure );return _fec ;};

// Write writes the Appender output to io.Writer.
// It can only be called once and further invocations will result in an error.
func (_bacc *PdfAppender )Write (w _ag .Writer )error {if _bacc ._bfbe {return _eff .New ("\u0061\u0070\u0070\u0065\u006e\u0064\u0065\u0072\u0020\u0077\u0072\u0069\u0074e\u0020\u0063\u0061\u006e\u0020\u006fn\u006c\u0079\u0020\u0062\u0065\u0020\u0069\u006e\u0076\u006f\u006b\u0065\u0064 \u006f\u006e\u0063\u0065");
};_fagb :=NewPdfWriter ();_gddg ,_accf :=_bf .GetDict (_fagb ._bfgbf );if !_accf {return _eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0061g\u0065\u0073\u0020\u006f\u0062\u006a\u0020(\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0029");
};_ceaa ,_accf :=_gddg .Get ("\u004b\u0069\u0064\u0073").(*_bf .PdfObjectArray );if !_accf {return _eff .New ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0050\u0061g\u0065\u0073\u0020\u004b\u0069\u0064\u0073\u0020o\u0062\u006a\u0020\u0028\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061r\u0072\u0061\u0079\u0029");
};_dgba ,_accf :=_gddg .Get ("\u0043\u006f\u0075n\u0074").(*_bf .PdfObjectInteger );if !_accf {return _eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064 \u0050\u0061\u0067e\u0073\u0020\u0043\u006fu\u006e\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0028\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0029");
};_cffc :=_bacc ._abac ._gafdb ;_gecf :=_cffc .GetTrailer ();if _gecf ==nil {return _eff .New ("\u006di\u0073s\u0069\u006e\u0067\u0020\u0074\u0072\u0061\u0069\u006c\u0065\u0072");};_gaedb ,_accf :=_bf .GetIndirect (_gecf .Get ("\u0052\u006f\u006f\u0074"));
if !_accf {return _eff .New ("c\u0061\u0074\u0061\u006c\u006f\u0067 \u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072 \u006e\u006f\u0074 \u0066o\u0075\u006e\u0064");};_cbaa ,_accf :=_bf .GetDict (_gaedb );if !_accf {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067\u003a\u0020\u0028\u0072\u006f\u006f\u0074\u0020\u0025\u0071\u0029\u0020\u0028\u0074\u0072\u0061\u0069\u006c\u0065\u0072\u0020\u0025\u0073\u0029",_gaedb ,*_gecf );
return _eff .New ("\u006di\u0073s\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006c\u006f\u0067");};for _ ,_fbfee :=range _cbaa .Keys (){if _fagb ._cecba .Get (_fbfee )==nil {_acgg :=_cbaa .Get (_fbfee );_fagb ._cecba .Set (_fbfee ,_acgg );};};if _bacc ._ccab !=nil {_fagb ._cecba .Set ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d",_bacc ._ccab .ToPdfObject ());
_bacc .updateObjectsDeep (_bacc ._ccab .ToPdfObject (),nil );};if _bacc ._abecf !=nil {_bacc .updateObjectsDeep (_bacc ._abecf .ToPdfObject (),nil );_fagb ._cecba .Set ("\u0044\u0053\u0053",_bacc ._abecf .GetContainingPdfObject ());};if _bacc ._fcgf !=nil {_fagb ._cecba .Set ("\u0050\u0065\u0072m\u0073",_bacc ._fcgf .ToPdfObject ());
_bacc .updateObjectsDeep (_bacc ._fcgf .ToPdfObject (),nil );};if _fagb ._abccg .Major < 2{_fagb .AddExtension ("\u0045\u0053\u0049\u0043","\u0031\u002e\u0037",5);_fagb .AddExtension ("\u0041\u0044\u0042\u0045","\u0031\u002e\u0037",8);};if _cgba ,_fadg :=_bf .GetDict (_gecf .Get ("\u0049\u006e\u0066\u006f"));
_fadg {if _bcdg ,_bebg :=_bf .GetDict (_fagb ._efddb );_bebg {for _ ,_dcfe :=range _cgba .Keys (){if _bcdg .Get (_dcfe )==nil {_bcdg .Set (_dcfe ,_cgba .Get (_dcfe ));};};};};if _bacc ._bgd !=nil {_fagb ._efddb =_bf .MakeIndirectObject (_bacc ._bgd .ToPdfObject ());
};_bacc .addNewObject (_fagb ._efddb );_bacc .addNewObject (_fagb ._eacbc );_dgga :=false ;if len (_bacc ._abac .PageList )!=len (_bacc ._bagg ){_dgga =true ;}else {for _feacc :=range _bacc ._abac .PageList {switch {case _bacc ._bagg [_feacc ]==_bacc ._abac .PageList [_feacc ]:case _bacc ._bagg [_feacc ]==_bacc .Reader .PageList [_feacc ]:default:_dgga =true ;
};if _dgga {break ;};};};if _dgga {_bacc .updateObjectsDeep (_fagb ._bfgbf ,nil );}else {_bacc ._gcbg [_fagb ._bfgbf ]=struct{}{};};_fagb ._bfgbf .ObjectNumber =_bacc .Reader ._afece .ObjectNumber ;_bacc ._bgfg [_fagb ._bfgbf ]=_bacc .Reader ._afece .ObjectNumber ;
_aebe :=[]_bf .PdfObjectName {"\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s","\u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078","\u0043r\u006f\u0070\u0042\u006f\u0078","\u0052\u006f\u0074\u0061\u0074\u0065"};for _ ,_cdafe :=range _bacc ._bagg {_bbba :=_cdafe .ToPdfObject ();
*_dgba =*_dgba +1;if _bdec ,_efgc :=_bbba .(*_bf .PdfIndirectObject );_efgc &&_bdec .GetParser ()==_bacc ._abac ._gafdb {_ceaa .Append (&_bdec .PdfObjectReference );continue ;};if _fbb ,_fcee :=_bf .GetDict (_bbba );_fcee {_gbea ,_efcg :=_fbb .Get ("\u0050\u0061\u0072\u0065\u006e\u0074").(*_bf .PdfIndirectObject );
for _efcg {_bc .Log .Trace ("\u0050a\u0067e\u0020\u0050\u0061\u0072\u0065\u006e\u0074\u003a\u0020\u0025\u0054",_gbea );_cfc ,_dbfe :=_gbea .PdfObject .(*_bf .PdfObjectDictionary );if !_dbfe {return _eff .New ("i\u006e\u0076\u0061\u006cid\u0020P\u0061\u0072\u0065\u006e\u0074 \u006f\u0062\u006a\u0065\u0063\u0074");
};for _ ,_defa :=range _aebe {_bc .Log .Trace ("\u0046\u0069\u0065\u006c\u0064\u0020\u0025\u0073",_defa );if _fbb .Get (_defa )!=nil {_bc .Log .Trace ("\u002d \u0070a\u0067\u0065\u0020\u0068\u0061s\u0020\u0061l\u0072\u0065\u0061\u0064\u0079");continue ;
};if _dacd :=_cfc .Get (_defa );_dacd !=nil {_bc .Log .Trace ("\u0049\u006e\u0068\u0065ri\u0074\u0069\u006e\u0067\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0025\u0073",_defa );_fbb .Set (_defa ,_dacd );};};_gbea ,_efcg =_cfc .Get ("\u0050\u0061\u0072\u0065\u006e\u0074").(*_bf .PdfIndirectObject );
_bc .Log .Trace ("\u004ee\u0078t\u0020\u0070\u0061\u0072\u0065\u006e\u0074\u003a\u0020\u0025\u0054",_cfc .Get ("\u0050\u0061\u0072\u0065\u006e\u0074"));};_fbb .Set ("\u0050\u0061\u0072\u0065\u006e\u0074",_fagb ._bfgbf );};_bacc .updateObjectsDeep (_bbba ,nil );
_ceaa .Append (_bbba );};if _ ,_ebbb :=_bacc ._fab .Seek (0,_ag .SeekStart );_ebbb !=nil {return _ebbb ;};_fcefc :=make (map[SignatureHandler ]_ag .Writer );_fbage :=_bf .MakeArray ();for _ ,_fbgc :=range _bacc ._cbab {if _afdb ,_aebf :=_bf .GetIndirect (_fbgc );
_aebf {if _dbed ,_affd :=_afdb .PdfObject .(*pdfSignDictionary );_affd {_cdfc :=*_dbed ._efdd ;var _bcec error ;_fcefc [_cdfc ],_bcec =_cdfc .NewDigest (_dbed ._debae );if _bcec !=nil {return _bcec ;};_fbage .Append (_bf .MakeInteger (0xfffff),_bf .MakeInteger (0xfffff));
};};};if _fbage .Len ()> 0{_fbage .Append (_bf .MakeInteger (0xfffff),_bf .MakeInteger (0xfffff));};for _ ,_bgef :=range _bacc ._cbab {if _bgag ,_acgc :=_bf .GetIndirect (_bgef );_acgc {if _dfcc ,_fdfa :=_bgag .PdfObject .(*pdfSignDictionary );_fdfa {_dfcc .Set ("\u0042y\u0074\u0065\u0052\u0061\u006e\u0067e",_fbage );
};};};_bgba :=len (_fcefc )> 0;var _dgcd _ag .Reader =_bacc ._fab ;if _bgba {_bafg :=make ([]_ag .Writer ,0,len (_fcefc ));for _ ,_egdcg :=range _fcefc {_bafg =append (_bafg ,_egdcg );};_dgcd =_ag .TeeReader (_bacc ._fab ,_ag .MultiWriter (_bafg ...));
};_acad ,_daebf :=_ag .Copy (w ,_dgcd );if _daebf !=nil {return _daebf ;};if len (_bacc ._cbab )==0{return nil ;};_fagb ._cffb =_acad ;_fagb .ObjNumOffset =_bacc ._dcgcc ;_fagb ._dgbga =true ;_fagb ._cffd =_bacc ._bfb ;_fagb ._dbdff =_bacc ._dafc ;_fagb ._gdgdd =_bacc ._eac ;
_fagb ._abccg =_bacc ._abac .PdfVersion ();_fagb ._bbcbd =_bacc ._bgfg ;_fagb ._ebefb =_bacc ._gaed .GetCrypter ();_fagb ._caacf =_bacc ._gaed .GetEncryptObj ();_bcgag :=_bacc ._gaed .GetXrefType ();if _bcgag !=nil {_bdcd :=*_bcgag ==_bf .XrefTypeObjectStream ;
_fagb ._fdecf =&_bdcd ;};_fagb ._bcgbbe =map[_bf .PdfObject ]struct{}{};_fagb ._agfac =[]_bf .PdfObject {};for _ ,_cege :=range _bacc ._cbab {if _ ,_abacb :=_bacc ._gcbg [_cege ];_abacb {continue ;};_fagb .addObject (_cege );};_cdda :=w ;if _bgba {_cdda =_cdc .NewBuffer (nil );
};if _bacc ._fggd !=""&&_fagb ._ebefb ==nil {_fagb .Encrypt ([]byte (_bacc ._fggd ),[]byte (_bacc ._fggd ),_bacc ._abgb );};if _cgag :=_gecf .Get ("\u0049\u0044");_cgag !=nil {if _ddg ,_daga :=_bf .GetArray (_cgag );_daga {_fagb ._bdeaee =_ddg ;};};if _bccc :=_fagb .Write (_cdda );
_bccc !=nil {return _bccc ;};if _bgba {_gabe :=_cdda .(*_cdc .Buffer ).Bytes ();_ecbbc :=_bf .MakeArray ();var _gfbga []*pdfSignDictionary ;var _dagcd int64 ;for _ ,_fdba :=range _fagb ._agfac {if _cccbg ,_fabg :=_bf .GetIndirect (_fdba );_fabg {if _afe ,_cbbb :=_cccbg .PdfObject .(*pdfSignDictionary );
_cbbb {_gfbga =append (_gfbga ,_afe );_dbbac :=_afe ._caeadf +int64 (_afe ._fccba );_ecbbc .Append (_bf .MakeInteger (_dagcd ),_bf .MakeInteger (_dbbac -_dagcd ));_dagcd =_afe ._caeadf +int64 (_afe ._ddbc );};};};_ecbbc .Append (_bf .MakeInteger (_dagcd ),_bf .MakeInteger (_acad +int64 (len (_gabe ))-_dagcd ));
_adcc :=[]byte (_ecbbc .WriteString ());for _ ,_affa :=range _gfbga {_cbcd :=int (_affa ._caeadf -_acad );for _efeg :=_affa ._bgbeg ;_efeg < _affa ._bcfab ;_efeg ++{_gabe [_cbcd +_efeg ]=' ';};_geaff :=_gabe [_cbcd +_affa ._bgbeg :_cbcd +_affa ._bcfab ];
copy (_geaff ,_adcc );};var _abfc int ;for _ ,_gegdc :=range _gfbga {_dfcb :=int (_gegdc ._caeadf -_acad );_fgca :=_gabe [_abfc :_dfcb +_gegdc ._fccba ];_eebf :=*_gegdc ._efdd ;_fcefc [_eebf ].Write (_fgca );_abfc =_dfcb +_gegdc ._ddbc ;};for _ ,_bcge :=range _gfbga {_cdea :=_gabe [_abfc :];
_ffde :=*_bcge ._efdd ;_fcefc [_ffde ].Write (_cdea );};for _ ,_bfe :=range _gfbga {_dce :=int (_bfe ._caeadf -_acad );_feeg :=*_bfe ._efdd ;_ecbdd :=_fcefc [_feeg ];if _bgadc :=_feeg .Sign (_bfe ._debae ,_ecbdd );_bgadc !=nil {return _bgadc ;};_bfe ._debae .ByteRange =_ecbbc ;
_dbdg :=[]byte (_bfe ._debae .Contents .WriteString ());for _ffdfa :=_bfe ._bgbeg ;_ffdfa < _bfe ._bcfab ;_ffdfa ++{_gabe [_dce +_ffdfa ]=' ';};for _eeegb :=_bfe ._fccba ;_eeegb < _bfe ._ddbc ;_eeegb ++{_gabe [_dce +_eeegb ]=' ';};_adcga :=_gabe [_dce +_bfe ._bgbeg :_dce +_bfe ._bcfab ];
copy (_adcga ,_adcc );_adcga =_gabe [_dce +_bfe ._fccba :_dce +_bfe ._ddbc ];copy (_adcga ,_dbdg );};_bda :=_cdc .NewBuffer (_gabe );_ ,_daebf =_ag .Copy (w ,_bda );if _daebf !=nil {return _daebf ;};};_bacc ._bfbe =true ;return nil ;};func (_dcad *PdfReader )newPdfAnnotationHighlightFromDict (_fggg *_bf .PdfObjectDictionary )(*PdfAnnotationHighlight ,error ){_edbc :=PdfAnnotationHighlight {};
_bgee ,_agef :=_dcad .newPdfAnnotationMarkupFromDict (_fggg );if _agef !=nil {return nil ,_agef ;};_edbc .PdfAnnotationMarkup =_bgee ;_edbc .QuadPoints =_fggg .Get ("\u0051\u0075\u0061\u0064\u0050\u006f\u0069\u006e\u0074\u0073");return &_edbc ,nil ;};

// Evaluate runs the function on the passed in slice and returns the results.
func (_gcag *PdfFunctionType3 )Evaluate (x []float64 )([]float64 ,error ){if len (x )!=1{_bc .Log .Error ("\u004f\u006e\u006c\u0079 o\u006e\u0065\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0061\u006c\u006c\u006f\u0077e\u0064");return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");
};return nil ,_eff .New ("\u006e\u006f\u0074\u0020im\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0065\u0064\u0020\u0079\u0065\u0074");};

// GetCharMetrics returns the char metrics for character code `code`.
// How it works:
//  1) It calls the GetCharMetrics function for the underlying font, either a simple font or
//     a Type0 font. The underlying font GetCharMetrics() functions do direct charcode ➞  metrics
//     mappings.
//  2) If the underlying font's GetCharMetrics() doesn't have a CharMetrics for `code` then a
//     a CharMetrics with the FontDescriptor's /MissingWidth is returned.
//  3) If there is no /MissingWidth then a failure is returned.
// TODO(peterwilliams97) There is nothing callers can do if no CharMetrics are found so we might as
//                       well give them 0 width. There is no need for the bool return.
// TODO(gunnsth): Reconsider whether needed or if can map via GlyphName.
func (_dfee *PdfFont )GetCharMetrics (code _faf .CharCode )(CharMetrics ,bool ){var _dadd _eb .CharMetrics ;switch _cbfb :=_dfee ._cacce .(type ){case *pdfFontSimple :if _dabdd ,_gecc :=_cbfb .GetCharMetrics (code );_gecc {return _dabdd ,_gecc ;};case *pdfFontType0 :if _agfd ,_eaffe :=_cbfb .GetCharMetrics (code );
_eaffe {return _agfd ,_eaffe ;};case *pdfCIDFontType0 :if _fbeae ,_gaee :=_cbfb .GetCharMetrics (code );_gaee {return _fbeae ,_gaee ;};case *pdfCIDFontType2 :if _befe ,_efbd :=_cbfb .GetCharMetrics (code );_efbd {return _befe ,_efbd ;};case *pdfFontType3 :if _egabb ,_ddgc :=_cbfb .GetCharMetrics (code );
_ddgc {return _egabb ,_ddgc ;};default:_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020G\u0065\u0074\u0043h\u0061\u0072\u004de\u0074\u0072i\u0063\u0073\u0020\u006e\u006f\u0074 \u0069mp\u006c\u0065\u006d\u0065\u006e\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u003d\u0025\u0054\u002e",_dfee ._cacce );
return _dadd ,false ;};if _ebeda ,_bgeea :=_dfee .GetFontDescriptor ();_bgeea ==nil &&_ebeda !=nil {return _eb .CharMetrics {Wx :_ebeda ._dbdgeb },true ;};_bc .Log .Debug ("\u0047\u0065\u0074\u0043\u0068\u0061\u0072\u004d\u0065\u0074\u0072\u0069\u0063\u0073\u003a\u0020\u004e\u006f\u0020\u006d\u0065\u0074\u0072\u0069c\u0073\u0020\u0066\u006f\u0072 \u0066\u006fn\u0074\u003d\u0025\u0073",_dfee );
return _dadd ,false ;};const (BorderEffectNoEffect BorderEffect =iota ;BorderEffectCloudy BorderEffect =iota ;);

// FontDescriptor returns font's PdfFontDescriptor. This may be a builtin descriptor for standard 14
// fonts but must be an explicit descriptor for other fonts.
func (_acbe *PdfFont )FontDescriptor ()*PdfFontDescriptor {if _acbe .baseFields ()._cedfe !=nil {return _acbe .baseFields ()._cedfe ;};if _abad :=_acbe ._cacce .getFontDescriptor ();_abad !=nil {return _abad ;};_bc .Log .Error ("\u0041\u006cl \u0066\u006f\u006et\u0073\u0020\u0068\u0061ve \u0061 D\u0065\u0073\u0063\u0072\u0069\u0070\u0074or\u002e\u0020\u0066\u006f\u006e\u0074\u003d%\u0073",_acbe );
return nil ;};

// NewPdfActionSetOCGState returns a new "named" action.
func NewPdfActionSetOCGState ()*PdfActionSetOCGState {_bfd :=NewPdfAction ();_gea :=&PdfActionSetOCGState {};_gea .PdfAction =_bfd ;_bfd .SetContext (_gea );return _gea ;};

// GetContext returns the annotation context which contains the specific type-dependent context.
// The context represents the subannotation.
func (_gac *PdfAnnotation )GetContext ()PdfModel {if _gac ==nil {return nil ;};return _gac ._fgc ;};

// NewPdfColorspaceICCBased returns a new ICCBased colorspace object.
func NewPdfColorspaceICCBased (N int )(*PdfColorspaceICCBased ,error ){_ccef :=&PdfColorspaceICCBased {};if N !=1&&N !=3&&N !=4{return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u004e\u0020\u0028\u0031/\u0033\u002f\u0034\u0029");
};_ccef .N =N ;return _ccef ,nil ;};func (_afec *DSS )generateHashMaps ()error {_eecad ,_ccgb :=_afec .generateHashMap (_afec .Certs );if _ccgb !=nil {return _ccgb ;};_fecag ,_ccgb :=_afec .generateHashMap (_afec .OCSPs );if _ccgb !=nil {return _ccgb ;
};_dfgf ,_ccgb :=_afec .generateHashMap (_afec .CRLs );if _ccgb !=nil {return _ccgb ;};_afec ._dbae =_eecad ;_afec ._eabfad =_fecag ;_afec ._dega =_dfgf ;return nil ;};

// SetPdfModifiedDate sets the ModDate attribute of the output PDF.
func SetPdfModifiedDate (modifiedDate _g .Time ){_ggeae .Lock ();defer _ggeae .Unlock ();_dceee =modifiedDate ;};

// GetNumComponents returns the number of color components of the underlying
// colorspace device.
func (_ecfg *PdfColorspaceSpecialPattern )GetNumComponents ()int {return _ecfg .UnderlyingCS .GetNumComponents ();};

// ToPdfObject implements interface PdfModel.
func (_dcgd *PdfAnnotationText )ToPdfObject ()_bf .PdfObject {_dcgd .PdfAnnotation .ToPdfObject ();_ageg :=_dcgd ._cdaf ;_fbd :=_ageg .PdfObject .(*_bf .PdfObjectDictionary );if _dcgd .PdfAnnotationMarkup !=nil {_dcgd .PdfAnnotationMarkup .appendToPdfDictionary (_fbd );
};_fbd .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0054\u0065\u0078\u0074"));_fbd .SetIfNotNil ("\u004f\u0070\u0065\u006e",_dcgd .Open );_fbd .SetIfNotNil ("\u004e\u0061\u006d\u0065",_dcgd .Name );_fbd .SetIfNotNil ("\u0053\u0074\u0061t\u0065",_dcgd .State );
_fbd .SetIfNotNil ("\u0053\u0074\u0061\u0074\u0065\u004d\u006f\u0064\u0065\u006c",_dcgd .StateModel );return _ageg ;};

// ToPdfObject implements interface PdfModel.
func (_gbe *PdfActionRendition )ToPdfObject ()_bf .PdfObject {_gbe .PdfAction .ToPdfObject ();_ccd :=_gbe ._fda ;_eee :=_ccd .PdfObject .(*_bf .PdfObjectDictionary );_eee .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeRendition )));_eee .SetIfNotNil ("\u0052",_gbe .R );
_eee .SetIfNotNil ("\u0041\u004e",_gbe .AN );_eee .SetIfNotNil ("\u004f\u0050",_gbe .OP );_eee .SetIfNotNil ("\u004a\u0053",_gbe .JS );return _ccd ;};

// SetXObjectFormByName adds the provided XObjectForm to the page resources.
// The added XObjectForm is identified by the specified name.
func (_ceecb *PdfPageResources )SetXObjectFormByName (keyName _bf .PdfObjectName ,xform *XObjectForm )error {_eddfg :=xform .ToPdfObject ().(*_bf .PdfObjectStream );_gcfec :=_ceecb .SetXObjectByName (keyName ,_eddfg );return _gcfec ;};

// SetNameDictionary sets the Names entry in the PDF catalog.
// See section 7.7.4 "Name Dictionary" (p. 80 PDF32000_2008).
func (_afbc *PdfWriter )SetNameDictionary (names _bf .PdfObject )error {if names ==nil {return nil ;};_bc .Log .Trace ("\u0053e\u0074\u0074\u0069\u006e\u0067\u0020\u0063\u0061\u0074\u0061\u006co\u0067\u0020\u004e\u0061\u006d\u0065\u0073\u002e\u002e\u002e");
_afbc ._cecba .Set ("\u004e\u0061\u006de\u0073",names );return _afbc .addObjects (names );};func (_ebd *PdfReader )newPdfActionURIFromDict (_geb *_bf .PdfObjectDictionary )(*PdfActionURI ,error ){return &PdfActionURI {URI :_geb .Get ("\u0055\u0052\u0049"),IsMap :_geb .Get ("\u0049\u0073\u004da\u0070")},nil ;
};

// ToPdfObject returns a PdfObject representation of PdfColorspaceDeviceNAttributes as a PdfObjectDictionary directly
// or indirectly within an indirect object container.
func (_bcecc *PdfColorspaceDeviceNAttributes )ToPdfObject ()_bf .PdfObject {_fbagd :=_bf .MakeDict ();if _bcecc .Subtype !=nil {_fbagd .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bcecc .Subtype );};_fbagd .SetIfNotNil ("\u0043o\u006c\u006f\u0072\u0061\u006e\u0074s",_bcecc .Colorants );
_fbagd .SetIfNotNil ("\u0050r\u006f\u0063\u0065\u0073\u0073",_bcecc .Process );_fbagd .SetIfNotNil ("M\u0069\u0078\u0069\u006e\u0067\u0048\u0069\u006e\u0074\u0073",_bcecc .MixingHints );if _bcecc ._agcf !=nil {_bcecc ._agcf .PdfObject =_fbagd ;return _bcecc ._agcf ;
};return _fbagd ;};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_ecgec *PdfShadingType5 )ToPdfObject ()_bf .PdfObject {_ecgec .PdfShading .ToPdfObject ();_bgcc ,_abbbd :=_ecgec .getShadingDict ();if _abbbd !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _ecgec .BitsPerCoordinate !=nil {_bgcc .Set ("\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006f\u0072\u0064i\u006e\u0061\u0074\u0065",_ecgec .BitsPerCoordinate );};if _ecgec .BitsPerComponent !=nil {_bgcc .Set ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074",_ecgec .BitsPerComponent );
};if _ecgec .VerticesPerRow !=nil {_bgcc .Set ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073\u0050e\u0072\u0052\u006f\u0077",_ecgec .VerticesPerRow );};if _ecgec .Decode !=nil {_bgcc .Set ("\u0044\u0065\u0063\u006f\u0064\u0065",_ecgec .Decode );};if _ecgec .Function !=nil {if len (_ecgec .Function )==1{_bgcc .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_ecgec .Function [0].ToPdfObject ());
}else {_afgffc :=_bf .MakeArray ();for _ ,_addef :=range _ecgec .Function {_afgffc .Append (_addef .ToPdfObject ());};_bgcc .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_afgffc );};};return _ecgec ._daaad ;};

// RunesToCharcodeBytes maps the provided runes to charcode bytes and it
// returns the resulting slice of bytes, along with the number of runes which
// could not be converted. If the number of misses is 0, all runes were
// successfully converted.
func (_cfacd *PdfFont )RunesToCharcodeBytes (data []rune )([]byte ,int ){var _daag []_faf .TextEncoder ;var _edbd _faf .CMapEncoder ;if _abdee :=_cfacd .baseFields ()._ggcb ;_abdee !=nil {_edbd =_faf .NewCMapEncoder ("",nil ,_abdee );};_dbfa :=_cfacd .Encoder ();
if _dbfa !=nil {switch _abag :=_dbfa .(type ){case _faf .SimpleEncoder :_aagdb :=_abag .BaseName ();if _ ,_dgfda :=_adccb [_aagdb ];_dgfda {_daag =append (_daag ,_dbfa );};};};if len (_daag )==0{if _cfacd .baseFields ()._ggcb !=nil {_daag =append (_daag ,_edbd );
};if _dbfa !=nil {_daag =append (_daag ,_dbfa );};};var _eefbg _cdc .Buffer ;var _bfef int ;for _ ,_egbgb :=range data {var _bbbef bool ;for _ ,_abdef :=range _daag {if _gead :=_abdef .Encode (string (_egbgb ));len (_gead )> 0{_eefbg .Write (_gead );_bbbef =true ;
break ;};};if !_bbbef {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020f\u0061\u0069\u006ce\u0064\u0020\u0074\u006f \u006d\u0061\u0070\u0020\u0072\u0075\u006e\u0065\u0020\u0060\u0025\u002b\u0071\u0060\u0020\u0074\u006f\u0020\u0063\u0068\u0061\u0072\u0063\u006f\u0064\u0065",_egbgb );
_bfef ++;};};if _bfef !=0{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0020\u0061\u006cl\u0020\u0072\u0075\u006e\u0065\u0073\u0020\u0074\u006f\u0020\u0063\u0068\u0061\u0072c\u006fd\u0065\u0073\u002e\u000a"+"\u0009\u006e\u0075\u006d\u0052\u0075\u006e\u0065\u0073\u003d\u0025d\u0020\u006e\u0075\u006d\u004d\u0069\u0073\u0073\u0065\u0073=\u0025\u0064\u000a"+"\t\u0066\u006f\u006e\u0074=%\u0073 \u0065\u006e\u0063\u006f\u0064e\u0072\u0073\u003d\u0025\u002b\u0076",len (data ),_bfef ,_cfacd ,_daag );
};return _eefbg .Bytes (),_bfef ;};

// GetObjectNums returns the object numbers of the PDF objects in the file
// Numbered objects are either indirect objects or stream objects.
// e.g. objNums := pdfReader.GetObjectNums()
// The underlying objects can then be accessed with
// pdfReader.GetIndirectObjectByNumber(objNums[0]) for the first available object.
func (_fcdff *PdfReader )GetObjectNums ()[]int {return _fcdff ._gafdb .GetObjectNums ()};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain three elements representing the
// red, green and blue components of the color. The values of the elements
// should be between 0 and 1.
func (_dfgg *PdfColorspaceDeviceRGB )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=3{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_fece :=vals [0];if _fece < 0.0||_fece > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_fece );
return nil ,ErrColorOutOfRange ;};_gaad :=vals [1];if _gaad < 0.0||_gaad > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_fece );return nil ,ErrColorOutOfRange ;
};_ecdd :=vals [2];if _ecdd < 0.0||_ecdd > 1.0{_bc .Log .Debug ("\u0063\u006f\u006cor\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0043\u0053\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020",_fece );return nil ,ErrColorOutOfRange ;};_geab :=NewPdfColorDeviceRGB (_fece ,_gaad ,_ecdd );
return _geab ,nil ;};

// Add appends an outline item as a child of the current outline item.
func (_dddgc *OutlineItem )Add (item *OutlineItem ){_dddgc .Entries =append (_dddgc .Entries ,item )};

// NewDSS returns a new DSS dictionary.
func NewDSS ()*DSS {return &DSS {_agagg :_bf .MakeIndirectObject (_bf .MakeDict ()),VRI :map[string ]*VRI {}};};

// MergePageWith appends page content to source Pdf file page content.
func (_agfe *PdfAppender )MergePageWith (pageNum int ,page *PdfPage )error {_ecbf :=pageNum -1;var _gcef *PdfPage ;for _dgced ,_ffba :=range _agfe ._bagg {if _dgced ==_ecbf {_gcef =_ffba ;};};if _gcef ==nil {return _af .Errorf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0050\u0061\u0067\u0065\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0073o\u0075\u0072\u0063\u0065\u0020\u0064o\u0063\u0075\u006de\u006e\u0074",pageNum );
};if _gcef ._cddaa !=nil &&_gcef ._cddaa .GetParser ()==_agfe ._abac ._gafdb {_gcef =_gcef .Duplicate ();_agfe ._bagg [_ecbf ]=_gcef ;};page =page .Duplicate ();_fdfcd (page );_gebgb :=_edac (_gcef );_cebf :=_edac (page );_cdafb :=make (map[_bf .PdfObjectName ]_bf .PdfObjectName );
for _dgac :=range _cebf {if _ ,_ecdb :=_gebgb [_dgac ];_ecdb {for _cec :=1;true ;_cec ++{_dcb :=_bf .PdfObjectName (string (_dgac )+_ef .Itoa (_cec ));if _ ,_aedee :=_gebgb [_dcb ];!_aedee {_cdafb [_dgac ]=_dcb ;break ;};};};};_dbec ,_bcfgb :=page .GetContentStreams ();
if _bcfgb !=nil {return _bcfgb ;};_ebaf ,_bcfgb :=_gcef .GetContentStreams ();if _bcfgb !=nil {return _bcfgb ;};for _cccb ,_agag :=range _dbec {for _cbed ,_bbe :=range _cdafb {_agag =_gf .Replace (_agag ,"\u002f"+string (_cbed ),"\u002f"+string (_bbe ),-1);
};_dbec [_cccb ]=_agag ;};_ebaf =append (_ebaf ,_dbec ...);if _fgcd :=_gcef .SetContentStreams (_ebaf ,_bf .NewFlateEncoder ());_fgcd !=nil {return _fgcd ;};_gcef ._gbcab =append (_gcef ._gbcab ,page ._gbcab ...);if _gcef .Resources ==nil {_gcef .Resources =NewPdfPageResources ();
};if page .Resources !=nil {_gcef .Resources .Font =_agfe .mergeResources (_gcef .Resources .Font ,page .Resources .Font ,_cdafb );_gcef .Resources .XObject =_agfe .mergeResources (_gcef .Resources .XObject ,page .Resources .XObject ,_cdafb );_gcef .Resources .Properties =_agfe .mergeResources (_gcef .Resources .Properties ,page .Resources .Properties ,_cdafb );
if _gcef .Resources .ProcSet ==nil {_gcef .Resources .ProcSet =page .Resources .ProcSet ;};_gcef .Resources .Shading =_agfe .mergeResources (_gcef .Resources .Shading ,page .Resources .Shading ,_cdafb );_gcef .Resources .ExtGState =_agfe .mergeResources (_gcef .Resources .ExtGState ,page .Resources .ExtGState ,_cdafb );
};_effbb ,_bcfgb :=_gcef .GetMediaBox ();if _bcfgb !=nil {return _bcfgb ;};_eccg ,_bcfgb :=page .GetMediaBox ();if _bcfgb !=nil {return _bcfgb ;};var _cbcf bool ;if _effbb .Llx > _eccg .Llx {_effbb .Llx =_eccg .Llx ;_cbcf =true ;};if _effbb .Lly > _eccg .Lly {_effbb .Lly =_eccg .Lly ;
_cbcf =true ;};if _effbb .Urx < _eccg .Urx {_effbb .Urx =_eccg .Urx ;_cbcf =true ;};if _effbb .Ury < _eccg .Ury {_effbb .Ury =_eccg .Ury ;_cbcf =true ;};if _cbcf {_gcef .MediaBox =_effbb ;};return nil ;};

// ToPdfObject implements interface PdfModel.
func (_bebd *PdfAnnotationStamp )ToPdfObject ()_bf .PdfObject {_bebd .PdfAnnotation .ToPdfObject ();_bcfg :=_bebd ._cdaf ;_fege :=_bcfg .PdfObject .(*_bf .PdfObjectDictionary );_bebd .PdfAnnotationMarkup .appendToPdfDictionary (_fege );_fege .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u0053\u0074\u0061m\u0070"));
_fege .SetIfNotNil ("\u004e\u0061\u006d\u0065",_bebd .Name );return _bcfg ;};

// IsValid checks if the given pdf output intent type is valid.
func (_fbaef PdfOutputIntentType )IsValid ()bool {return _fbaef >=PdfOutputIntentTypeA1 &&_fbaef <=PdfOutputIntentTypeX ;};func _fbbd (_bfbd *fontCommon )*pdfCIDFontType2 {return &pdfCIDFontType2 {fontCommon :*_bfbd }};

// AddPages adds pages to be appended to the end of the source PDF.
func (_eafeb *PdfAppender )AddPages (pages ...*PdfPage ){for _ ,_fgcb :=range pages {_fgcb =_fgcb .Duplicate ();_fdfcd (_fgcb );_eafeb ._bagg =append (_eafeb ._bagg ,_fgcb );};};

// GetContainingPdfObject implements interface PdfModel.
func (_deadc *Permissions )GetContainingPdfObject ()_bf .PdfObject {return _deadc ._agcgc };

// UpdatePage updates the `page` in the new revision if it has changed.
func (_fgef *PdfAppender )UpdatePage (page *PdfPage ){_fgef .updateObjectsDeep (page .ToPdfObject (),nil )};

// PdfAnnotationProjection represents Projection annotations.
type PdfAnnotationProjection struct{*PdfAnnotation ;*PdfAnnotationMarkup ;};

// ToPdfObject implements interface PdfModel.
func (_adcec *PdfAnnotationLine )ToPdfObject ()_bf .PdfObject {_adcec .PdfAnnotation .ToPdfObject ();_agecd :=_adcec ._cdaf ;_gcb :=_agecd .PdfObject .(*_bf .PdfObjectDictionary );_adcec .PdfAnnotationMarkup .appendToPdfDictionary (_gcb );_gcb .SetIfNotNil ("\u0053u\u0062\u0074\u0079\u0070\u0065",_bf .MakeName ("\u004c\u0069\u006e\u0065"));
_gcb .SetIfNotNil ("\u004c",_adcec .L );_gcb .SetIfNotNil ("\u0042\u0053",_adcec .BS );_gcb .SetIfNotNil ("\u004c\u0045",_adcec .LE );_gcb .SetIfNotNil ("\u0049\u0043",_adcec .IC );_gcb .SetIfNotNil ("\u004c\u004c",_adcec .LL );_gcb .SetIfNotNil ("\u004c\u004c\u0045",_adcec .LLE );
_gcb .SetIfNotNil ("\u0043\u0061\u0070",_adcec .Cap );_gcb .SetIfNotNil ("\u0049\u0054",_adcec .IT );_gcb .SetIfNotNil ("\u004c\u004c\u004f",_adcec .LLO );_gcb .SetIfNotNil ("\u0043\u0050",_adcec .CP );_gcb .SetIfNotNil ("\u004de\u0061\u0073\u0075\u0072\u0065",_adcec .Measure );
_gcb .SetIfNotNil ("\u0043\u004f",_adcec .CO );return _agecd ;};func (_gaf *PdfReader )newPdfActionHideFromDict (_add *_bf .PdfObjectDictionary )(*PdfActionHide ,error ){return &PdfActionHide {T :_add .Get ("\u0054"),H :_add .Get ("\u0048")},nil ;};func _fdfee (_gbfd *_bf .PdfObjectStream )(*PdfFunctionType4 ,error ){_bgcdf :=&PdfFunctionType4 {};
_bgcdf ._fcdd =_gbfd ;_dfbcb :=_gbfd .PdfObjectDictionary ;_cgbf ,_cbge :=_bf .TraceToDirectObject (_dfbcb .Get ("\u0044\u006f\u006d\u0061\u0069\u006e")).(*_bf .PdfObjectArray );if !_cbge {_bc .Log .Error ("D\u006fm\u0061\u0069\u006e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065\u0063\u0069fi\u0065\u0064");
return nil ,_eff .New ("\u0072\u0065q\u0075\u0069\u0072\u0065d\u0020\u0061t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020m\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u006f\u0072\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if _cgbf .Len ()%2!=0{_bc .Log .Error ("\u0044\u006f\u006d\u0061\u0069\u006e\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
return nil ,_eff .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0064\u006f\u006da\u0069\u006e\u0020\u0072an\u0067\u0065");};_fcgd ,_faeb :=_cgbf .ToFloat64Array ();if _faeb !=nil {return nil ,_faeb ;};_bgcdf .Domain =_fcgd ;_cgbf ,_cbge =_bf .TraceToDirectObject (_dfbcb .Get ("\u0052\u0061\u006eg\u0065")).(*_bf .PdfObjectArray );
if _cbge {if _cgbf .Len ()< 0||_cgbf .Len ()%2!=0{return nil ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");};_eedf ,_afdc :=_cgbf .ToFloat64Array ();if _afdc !=nil {return nil ,_afdc ;};_bgcdf .Range =_eedf ;
};_dgefe ,_faeb :=_bf .DecodeStream (_gbfd );if _faeb !=nil {return nil ,_faeb ;};_bgcdf ._acfcc =_dgefe ;_bgbbc :=_ga .NewPSParser (_dgefe );_feec ,_faeb :=_bgbbc .Parse ();if _faeb !=nil {return nil ,_faeb ;};_bgcdf .Program =_feec ;return _bgcdf ,nil ;
};

// AlphaMapFunc represents a alpha mapping function: byte -> byte. Can be used for
// thresholding the alpha channel, i.e. setting all alpha values below threshold to transparent.
type AlphaMapFunc func (_bdeea byte )byte ;

// VRI represents a Validation-Related Information dictionary.
// The VRI dictionary contains validation data in the form of
// certificates, OCSP and CRL information, for a single signature.
// See ETSI TS 102 778-4 V1.1.1 for more information.
type VRI struct{Cert []*_bf .PdfObjectStream ;OCSP []*_bf .PdfObjectStream ;CRL []*_bf .PdfObjectStream ;TU *_bf .PdfObjectString ;TS *_bf .PdfObjectString ;};type fontFile struct{_cgbb string ;_cecga string ;_bdbe _faf .SimpleEncoder ;};

// GetAsShadingPattern returns a shading pattern. Check with IsShading() prior to using this.
func (_ffdfg *PdfPattern )GetAsShadingPattern ()*PdfShadingPattern {return _ffdfg ._adccfb .(*PdfShadingPattern );};

// AddExtGState adds a graphics state to the XObject resources.
func (_ffbbf *PdfPage )AddExtGState (name _bf .PdfObjectName ,egs *_bf .PdfObjectDictionary )error {if _ffbbf .Resources ==nil {_ffbbf .Resources =NewPdfPageResources ();};if _ffbbf .Resources .ExtGState ==nil {_ffbbf .Resources .ExtGState =_bf .MakeDict ();
};_debc ,_ggbb :=_bf .TraceToDirectObject (_ffbbf .Resources .ExtGState ).(*_bf .PdfObjectDictionary );if !_ggbb {_bc .Log .Debug ("\u0045\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0045\u0078t\u0047\u0053\u0074\u0061\u0074\u0065\u0020\u0064i\u0063t\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064\u0069c\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u003a\u0020\u0025\u0076",_bf .TraceToDirectObject (_ffbbf .Resources .ExtGState ));
return _eff .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_debc .Set (name ,egs );return nil ;};func (_dbac *PdfReader )newPdfActionTransFromDict (_ffb *_bf .PdfObjectDictionary )(*PdfActionTrans ,error ){return &PdfActionTrans {Trans :_ffb .Get ("\u0054\u0072\u0061n\u0073")},nil ;
};func (_egfaa *PdfWriter )writeObjectsInStreams (_caaee map[_bf .PdfObject ]bool )error {for _ ,_eaaec :=range _egfaa ._agfac {if _ddcbc :=_caaee [_eaaec ];_ddcbc {continue ;};_feba :=int64 (0);switch _acfdgd :=_eaaec .(type ){case *_bf .PdfIndirectObject :_feba =_acfdgd .ObjectNumber ;
case *_bf .PdfObjectStream :_feba =_acfdgd .ObjectNumber ;case *_bf .PdfObjectStreams :_feba =_acfdgd .ObjectNumber ;default:_bc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0055n\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0074\u0079\u0070\u0065 \u0069\u006e\u0020\u0077\u0072\u0069\u0074\u0065\u0072\u0020\u006fb\u006a\u0065\u0063\u0074\u0073\u003a\u0020\u0025\u0054",_eaaec );
return ErrTypeCheck ;};if _egfaa ._ebefb !=nil &&_eaaec !=_egfaa ._caacf {_afecag :=_egfaa ._ebefb .Encrypt (_eaaec ,_feba ,0);if _afecag !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006e\u0067\u0020(%\u0073\u0029",_afecag );
return _afecag ;};};_egfaa .writeObject (int (_feba ),_eaaec );};return nil ;};

// ImageToRGB returns an error since an image cannot be defined in a pattern colorspace.
func (_aadd *PdfColorspaceSpecialPattern )ImageToRGB (img Image )(Image ,error ){_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u0061n\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0069\u006e\u0020\u0050\u0061\u0074\u0074\u0065\u0072n \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065");
return img ,_eff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u0020\u0066\u006f\u0072\u0020\u0069m\u0061\u0067\u0065\u0020\u0028p\u0061\u0074t\u0065\u0072\u006e\u0029");};func (_deedb *PdfWriter )setDocInfo (_gdcdc _bf .PdfObject ){if _deedb .hasObject (_deedb ._efddb ){delete (_deedb ._bcgbbe ,_deedb ._efddb );
delete (_deedb ._dacda ,_deedb ._efddb );for _efcfb ,_bcgca :=range _deedb ._agfac {if _bcgca ==_deedb ._efddb {copy (_deedb ._agfac [_efcfb :],_deedb ._agfac [_efcfb +1:]);_deedb ._agfac [len (_deedb ._agfac )-1]=nil ;_deedb ._agfac =_deedb ._agfac [:len (_deedb ._agfac )-1];
break ;};};};_efage :=_bf .PdfIndirectObject {};_efage .PdfObject =_gdcdc ;_deedb ._efddb =&_efage ;_deedb .addObject (&_efage );};

// AddExtension adds the specified extension to the Extensions dictionary.
// See section 7.1.2 "Extensions Dictionary" (pp. 108-109 PDF32000_2008).
func (_ffec *PdfWriter )AddExtension (extName ,baseVersion string ,extLevel int ){_gfcb ,_bdadf :=_bf .GetDict (_ffec ._cecba .Get ("\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u0073"));if !_bdadf {_gfcb =_bf .MakeDict ();_ffec ._cecba .Set ("\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u0073",_gfcb );
};_fcggfc ,_bdadf :=_bf .GetDict (_gfcb .Get (_bf .PdfObjectName (extName )));if !_bdadf {_fcggfc =_bf .MakeDict ();_gfcb .Set (_bf .PdfObjectName (extName ),_fcggfc );};if _gcfd ,_ :=_bf .GetNameVal (_fcggfc .Get ("B\u0061\u0073\u0065\u0056\u0065\u0072\u0073\u0069\u006f\u006e"));
_gcfd !=baseVersion {_fcggfc .Set ("B\u0061\u0073\u0065\u0056\u0065\u0072\u0073\u0069\u006f\u006e",_bf .MakeName (baseVersion ));};if _ggbbd ,_ :=_bf .GetIntVal (_fcggfc .Get ("\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006eL\u0065\u0076\u0065\u006c"));
_ggbbd !=extLevel {_fcggfc .Set ("\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006eL\u0065\u0076\u0065\u006c",_bf .MakeInteger (int64 (extLevel )));};};

// GetAsTilingPattern returns a tiling pattern. Check with IsTiling() prior to using this.
func (_eadfd *PdfPattern )GetAsTilingPattern ()*PdfTilingPattern {return _eadfd ._adccfb .(*PdfTilingPattern );};

// K returns the value of the key component of the color.
func (_ffgc *PdfColorDeviceCMYK )K ()float64 {return _ffgc [3]};

// Encrypt encrypts the output file with a specified user/owner password.
func (_ggced *PdfWriter )Encrypt (userPass ,ownerPass []byte ,options *EncryptOptions )error {_aabgc :=RC4_128bit ;if options !=nil {_aabgc =options .Algorithm ;};_gccdc :=_fd .PermOwner ;if options !=nil {_gccdc =options .Permissions ;};var _abegg _ba .Filter ;
switch _aabgc {case RC4_128bit :_abegg =_ba .NewFilterV2 (16);case AES_128bit :_abegg =_ba .NewFilterAESV2 ();case AES_256bit :_abegg =_ba .NewFilterAESV3 ();default:return _af .Errorf ("\u0075n\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020a\u006cg\u006fr\u0069\u0074\u0068\u006d\u003a\u0020\u0025v",options .Algorithm );
};_gecda ,_cfbce ,_gfbaa :=_bf .PdfCryptNewEncrypt (_abegg ,userPass ,ownerPass ,_gccdc );if _gfbaa !=nil {return _gfbaa ;};_ggced ._ebefb =_gecda ;if _cfbce .Major !=0{_ggced .SetVersion (_cfbce .Major ,_cfbce .Minor );};_ggced ._edaf =_cfbce .Encrypt ;
_ggced ._ggfdb ,_ggced ._ebecb =_cfbce .ID0 ,_cfbce .ID1 ;_ggdff :=_bf .MakeIndirectObject (_cfbce .Encrypt );_ggced ._caacf =_ggdff ;_ggced .addObject (_ggdff );return nil ;};

// PdfColorspaceSpecialSeparation is a Separation colorspace.
// At the moment the colour space is set to a Separation space, the conforming reader shall determine whether the
// device has an available colorant (e.g. dye) corresponding to the name of the requested space. If so, the conforming
// reader shall ignore the alternateSpace and tintTransform parameters; subsequent painting operations within the
// space shall apply the designated colorant directly, according to the tint values supplied.
//
// Format: [/Separation name alternateSpace tintTransform]
type PdfColorspaceSpecialSeparation struct{ColorantName *_bf .PdfObjectName ;AlternateSpace PdfColorspace ;TintTransform PdfFunction ;_dade *_bf .PdfIndirectObject ;};

// SetAnnotations sets the annotations list.
func (_dgbgc *PdfPage )SetAnnotations (annotations []*PdfAnnotation ){_dgbgc ._gbcab =annotations };func (_gebg *PdfReader )newPdfAnnotationPolygonFromDict (_aba *_bf .PdfObjectDictionary )(*PdfAnnotationPolygon ,error ){_geaf :=PdfAnnotationPolygon {};
_eafgd ,_adcfg :=_gebg .newPdfAnnotationMarkupFromDict (_aba );if _adcfg !=nil {return nil ,_adcfg ;};_geaf .PdfAnnotationMarkup =_eafgd ;_geaf .Vertices =_aba .Get ("\u0056\u0065\u0072\u0074\u0069\u0063\u0065\u0073");_geaf .LE =_aba .Get ("\u004c\u0045");
_geaf .BS =_aba .Get ("\u0042\u0053");_geaf .IC =_aba .Get ("\u0049\u0043");_geaf .BE =_aba .Get ("\u0042\u0045");_geaf .IT =_aba .Get ("\u0049\u0054");_geaf .Measure =_aba .Get ("\u004de\u0061\u0073\u0075\u0072\u0065");return &_geaf ,nil ;};

// PdfFont represents an underlying font structure which can be of type:
// - Type0
// - Type1
// - TrueType
// etc.
type PdfFont struct{_cacce pdfFont };

// ColorToRGB converts an Indexed color to an RGB color.
func (_fedf *PdfColorspaceSpecialIndexed )ColorToRGB (color PdfColor )(PdfColor ,error ){if _fedf .Base ==nil {return nil ,_eff .New ("\u0069\u006e\u0064\u0065\u0078\u0065d\u0020\u0062\u0061\u0073\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065\u0020\u0075\u006e\u0064\u0065f\u0069\u006e\u0065\u0064");
};return _fedf .Base .ColorToRGB (color );};

// PdfAnnotationStamp represents Stamp annotations.
// (Section 12.5.6.12).
type PdfAnnotationStamp struct{*PdfAnnotation ;*PdfAnnotationMarkup ;Name _bf .PdfObject ;};func (_baa *PdfReader )newPdfActionGotoRFromDict (_efe *_bf .PdfObjectDictionary )(*PdfActionGoToR ,error ){_cdf ,_bfdf :=_aac (_efe .Get ("\u0046"));if _bfdf !=nil {return nil ,_bfdf ;
};return &PdfActionGoToR {D :_efe .Get ("\u0044"),NewWindow :_efe .Get ("\u004ee\u0077\u0057\u0069\u006e\u0064\u006fw"),F :_cdf },nil ;};

// SetImage updates XObject Image with new image data.
func (_ebege *XObjectImage )SetImage (img *Image ,cs PdfColorspace )error {_ebege .Filter .UpdateParams (img .GetParamsDict ());_efefe ,_afea :=_ebege .Filter .EncodeBytes (img .Data );if _afea !=nil {return _afea ;};_ebege .Stream =_efefe ;_aeegf :=img .Width ;
_ebege .Width =&_aeegf ;_dacbg :=img .Height ;_ebege .Height =&_dacbg ;_ecabf :=img .BitsPerComponent ;_ebege .BitsPerComponent =&_ecabf ;if cs ==nil {if img .ColorComponents ==1{_ebege .ColorSpace =NewPdfColorspaceDeviceGray ();}else if img .ColorComponents ==3{_ebege .ColorSpace =NewPdfColorspaceDeviceRGB ();
}else if img .ColorComponents ==4{_ebege .ColorSpace =NewPdfColorspaceDeviceCMYK ();}else {return _eff .New ("c\u006fl\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u0020u\u006e\u0064\u0065\u0066in\u0065\u0064");};}else {_ebege .ColorSpace =cs ;};return nil ;
};

// Permissions specify a permissions dictionary (PDF 1.5).
// (Section 12.8.4, Table 258 - Entries in a permissions dictionary p. 477 in PDF32000_2008).
type Permissions struct{DocMDP *PdfSignature ;_agcgc *_bf .PdfObjectDictionary ;};func (_dgee *PdfAppender )replaceObject (_abba ,_aeb _bf .PdfObject ){switch _bagd :=_abba .(type ){case *_bf .PdfIndirectObject :_dgee ._bgfg [_aeb ]=_bagd .ObjectNumber ;
case *_bf .PdfObjectStream :_dgee ._bgfg [_aeb ]=_bagd .ObjectNumber ;};};func _adae (_bgbe _bf .PdfObject )(*PdfColorspaceSpecialSeparation ,error ){_ggec :=NewPdfColorspaceSpecialSeparation ();if _caaeg ,_aegc :=_bgbe .(*_bf .PdfIndirectObject );_aegc {_ggec ._dade =_caaeg ;
};_bgbe =_bf .TraceToDirectObject (_bgbe );_ecab ,_dgef :=_bgbe .(*_bf .PdfObjectArray );if !_dgef {return nil ,_af .Errorf ("\u0073\u0065p\u0061\u0072\u0061\u0074\u0069\u006f\u006e\u0020\u0043\u0053\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0062je\u0063\u0074");
};if _ecab .Len ()!=4{return nil ,_af .Errorf ("\u0073\u0065p\u0061\u0072\u0061\u0074i\u006f\u006e \u0043\u0053\u003a\u0020\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u006ce\u006e\u0067\u0074\u0068");};_bgbe =_ecab .Get (0);
_dbcdd ,_dgef :=_bgbe .(*_bf .PdfObjectName );if !_dgef {return nil ,_af .Errorf ("\u0073\u0065\u0070ar\u0061\u0074\u0069\u006f\u006e\u0020\u0043\u0053\u003a \u0069n\u0076a\u006ci\u0064\u0020\u0066\u0061\u006d\u0069\u006c\u0079\u0020\u006e\u0061\u006d\u0065");
};if *_dbcdd !="\u0053\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006f\u006e"{return nil ,_af .Errorf ("\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u0069\u006f\u006e\u0020\u0043\u0053\u003a\u0020w\u0072o\u006e\u0067\u0020\u0066\u0061\u006d\u0069\u006c\u0079\u0020\u006e\u0061\u006d\u0065");
};_bgbe =_ecab .Get (1);_dbcdd ,_dgef =_bgbe .(*_bf .PdfObjectName );if !_dgef {return nil ,_af .Errorf ("\u0073\u0065pa\u0072\u0061\u0074i\u006f\u006e\u0020\u0043S: \u0049nv\u0061\u006c\u0069\u0064\u0020\u0063\u006flo\u0072\u0061\u006e\u0074\u0020\u006e\u0061m\u0065");
};_ggec .ColorantName =_dbcdd ;_bgbe =_ecab .Get (2);_afgg ,_ffce :=NewPdfColorspaceFromPdfObject (_bgbe );if _ffce !=nil {return nil ,_ffce ;};_ggec .AlternateSpace =_afgg ;_dfcce ,_ffce :=_bbbbd (_ecab .Get (3));if _ffce !=nil {return nil ,_ffce ;};_ggec .TintTransform =_dfcce ;
return _ggec ,nil ;};

// PdfColorCalGray represents a CalGray colorspace.
type PdfColorCalGray float64 ;func (_eeec *PdfAcroForm )filteredFields (_agcfd FieldFilterFunc ,_agafd bool )[]*PdfField {if _eeec ==nil {return nil ;};return _gefa (_eeec .Fields ,_agcfd ,_agafd );};func (_cdag *PdfReader )newPdfAnnotationWidgetFromDict (_caf *_bf .PdfObjectDictionary )(*PdfAnnotationWidget ,error ){_eecg :=PdfAnnotationWidget {};
_eecg .H =_caf .Get ("\u0048");_eecg .MK =_caf .Get ("\u004d\u004b");_eecg .A =_caf .Get ("\u0041");_eecg .AA =_caf .Get ("\u0041\u0041");_eecg .BS =_caf .Get ("\u0042\u0053");_eecg .Parent =_caf .Get ("\u0050\u0061\u0072\u0065\u006e\u0074");return &_eecg ,nil ;
};func (_cggbd *PdfWriter )copyObjects (){_fbbfc :=make (map[_bf .PdfObject ]_bf .PdfObject );_fdbg :=make ([]_bf .PdfObject ,0,len (_cggbd ._agfac ));_afcb :=make (map[_bf .PdfObject ]struct{},len (_cggbd ._agfac ));_badd :=make (map[_bf .PdfObject ]struct{});
for _ ,_feccc :=range _cggbd ._agfac {_ggafg :=_cggbd .copyObject (_feccc ,_fbbfc ,_badd ,false );if _ ,_cagac :=_badd [_feccc ];_cagac {continue ;};_fdbg =append (_fdbg ,_ggafg );_afcb [_ggafg ]=struct{}{};};_cggbd ._agfac =_fdbg ;_cggbd ._bcgbbe =_afcb ;
_cggbd ._efddb =_cggbd .copyObject (_cggbd ._efddb ,_fbbfc ,nil ,false ).(*_bf .PdfIndirectObject );_cggbd ._eacbc =_cggbd .copyObject (_cggbd ._eacbc ,_fbbfc ,nil ,false ).(*_bf .PdfIndirectObject );if _cggbd ._caacf !=nil {_cggbd ._caacf =_cggbd .copyObject (_cggbd ._caacf ,_fbbfc ,nil ,false ).(*_bf .PdfIndirectObject );
};if _cggbd ._dgbga {_cfaac :=make (map[_bf .PdfObject ]int64 );for _dgfgg ,_eeadf :=range _cggbd ._bbcbd {if _edgag ,_cfbeb :=_fbbfc [_dgfgg ];_cfbeb {_cfaac [_edgag ]=_eeadf ;}else {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020a\u0070\u0070\u0065n\u0064\u0020\u006d\u006fd\u0065\u0020\u002d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0063\u006f\u0070\u0079\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070");
};};_cggbd ._bbcbd =_cfaac ;};};

// NewPdfColorspaceDeviceN returns an initialized PdfColorspaceDeviceN.
func NewPdfColorspaceDeviceN ()*PdfColorspaceDeviceN {_cgca :=&PdfColorspaceDeviceN {};return _cgca };

// GetContainingPdfObject returns the container of the resources object (indirect object).
func (_efdgg *PdfPageResources )GetContainingPdfObject ()_bf .PdfObject {return _efdgg ._dbfed };func (_dadfd *PdfReader )lookupPageByObject (_addgf _bf .PdfObject )(*PdfPage ,error ){return nil ,_eff .New ("\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};

// SetDSS sets the DSS dictionary (ETSI TS 102 778-4 V1.1.1) of the current
// document revision.
func (_fafea *PdfAppender )SetDSS (dss *DSS ){if dss !=nil {_fafea .updateObjectsDeep (dss .ToPdfObject (),nil );};_fafea ._abecf =dss ;};

// PdfColorspaceDeviceCMYK represents a CMYK32 colorspace.
type PdfColorspaceDeviceCMYK struct{};

// ToPdfObject returns the PDF representation of the shading dictionary.
func (_ecag *PdfShadingType3 )ToPdfObject ()_bf .PdfObject {_ecag .PdfShading .ToPdfObject ();_deecb ,_aaaae :=_ecag .getShadingDict ();if _aaaae !=nil {_bc .Log .Error ("\u0055\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0063\u0063\u0065\u0073\u0073\u0020\u0073\u0068\u0061\u0064\u0069\u006e\u0067\u0020di\u0063\u0074");
return nil ;};if _ecag .Coords !=nil {_deecb .Set ("\u0043\u006f\u006f\u0072\u0064\u0073",_ecag .Coords );};if _ecag .Domain !=nil {_deecb .Set ("\u0044\u006f\u006d\u0061\u0069\u006e",_ecag .Domain );};if _ecag .Function !=nil {if len (_ecag .Function )==1{_deecb .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_ecag .Function [0].ToPdfObject ());
}else {_dfdfe :=_bf .MakeArray ();for _ ,_fdgea :=range _ecag .Function {_dfdfe .Append (_fdgea .ToPdfObject ());};_deecb .Set ("\u0046\u0075\u006e\u0063\u0074\u0069\u006f\u006e",_dfdfe );};};if _ecag .Extend !=nil {_deecb .Set ("\u0045\u0078\u0074\u0065\u006e\u0064",_ecag .Extend );
};return _ecag ._daaad ;};func (_cgb *PdfReader )newPdfAnnotationProjectionFromDict (_accab *_bf .PdfObjectDictionary )(*PdfAnnotationProjection ,error ){_eaga :=&PdfAnnotationProjection {};_bgad ,_defb :=_cgb .newPdfAnnotationMarkupFromDict (_accab );
if _defb !=nil {return nil ,_defb ;};_eaga .PdfAnnotationMarkup =_bgad ;return _eaga ,nil ;};

// NewStandard14Font returns the standard 14 font named `basefont` as a *PdfFont, or an error if it
// `basefont` is not one of the standard 14 font names.
func NewStandard14Font (basefont StdFontName )(*PdfFont ,error ){_eafgfd ,_acaf :=_cbabg (basefont );if _acaf !=nil {return nil ,_acaf ;};if basefont !=SymbolName &&basefont !=ZapfDingbatsName {_eafgfd ._adbcf =_faf .NewWinAnsiEncoder ();};return &PdfFont {_cacce :&_eafgfd },nil ;
};func _geebb ()string {_ggeae .Lock ();defer _ggeae .Unlock ();return _dfecf };

// NewPdfActionLaunch returns a new "launch" action.
func NewPdfActionLaunch ()*PdfActionLaunch {_efd :=NewPdfAction ();_gae :=&PdfActionLaunch {};_gae .PdfAction =_efd ;_efd .SetContext (_gae );return _gae ;};

// SetContext sets the sub action (context).
func (_cde *PdfAction )SetContext (ctx PdfModel ){_cde ._baf =ctx };

// GetTrailer returns the PDF's trailer dictionary.
func (_gggbf *PdfReader )GetTrailer ()(*_bf .PdfObjectDictionary ,error ){_bgdd :=_gggbf ._gafdb .GetTrailer ();if _bgdd ==nil {return nil ,_eff .New ("\u0074r\u0061i\u006c\u0065\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};return _bgdd ,nil ;
};

// Image interface is a basic representation of an image used in PDF.
// The colorspace is not specified, but must be known when handling the image.
type Image struct{Width int64 ;Height int64 ;BitsPerComponent int64 ;ColorComponents int ;Data []byte ;_gfegf []byte ;_dbcfb []float64 ;};func _baadd (_ceef _bf .PdfObject )(*PdfColorspaceSpecialIndexed ,error ){_edbgf :=NewPdfColorspaceSpecialIndexed ();
if _adef ,_gbde :=_ceef .(*_bf .PdfIndirectObject );_gbde {_edbgf ._gbfc =_adef ;};_ceef =_bf .TraceToDirectObject (_ceef );_eaac ,_eabd :=_ceef .(*_bf .PdfObjectArray );if !_eabd {return nil ,_af .Errorf ("\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
};if _eaac .Len ()!=4{return nil ,_af .Errorf ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0043\u0053\u003a\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u006c\u0065\u006e\u0067\u0074\u0068");};_ceef =_eaac .Get (0);
_daec ,_eabd :=_ceef .(*_bf .PdfObjectName );if !_eabd {return nil ,_af .Errorf ("\u0069n\u0064\u0065\u0078\u0065\u0064\u0020\u0043\u0053\u003a\u0020\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0061\u006d\u0065");};if *_daec !="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_af .Errorf ("\u0069\u006e\u0064\u0065xe\u0064\u0020\u0043\u0053\u003a\u0020\u0077\u0072\u006f\u006e\u0067\u0020\u006e\u0061m\u0065");
};_ceef =_eaac .Get (1);_adefe ,_ecdfe :=DetermineColorspaceNameFromPdfObject (_ceef );if _ecdfe !=nil {return nil ,_ecdfe ;};if _adefe =="\u0049n\u0064\u0065\u0078\u0065\u0064"||_adefe =="\u0050a\u0074\u0074\u0065\u0072\u006e"{_bc .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0049\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0049\u006e\u0064e\u0078\u0065\u0064\u002f\u0050\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0043S\u0020\u0061\u0073\u0020\u0062\u0061\u0073\u0065\u0020\u0028\u0025v\u0029",_adefe );
return nil ,_egbe ;};_bebea ,_ecdfe :=NewPdfColorspaceFromPdfObject (_ceef );if _ecdfe !=nil {return nil ,_ecdfe ;};_edbgf .Base =_bebea ;_ceef =_eaac .Get (2);_cbea ,_ecdfe :=_bf .GetNumberAsInt64 (_ceef );if _ecdfe !=nil {return nil ,_ecdfe ;};if _cbea > 255{return nil ,_af .Errorf ("\u0069n\u0064\u0065\u0078\u0065d\u0020\u0043\u0053\u003a\u0020I\u006ev\u0061l\u0069\u0064\u0020\u0068\u0069\u0076\u0061l");
};_edbgf .HiVal =int (_cbea );_ceef =_eaac .Get (3);_edbgf .Lookup =_ceef ;_ceef =_bf .TraceToDirectObject (_ceef );var _fgga []byte ;if _fdcb ,_fggga :=_ceef .(*_bf .PdfObjectString );_fggga {_fgga =_fdcb .Bytes ();_bc .Log .Trace ("\u0049\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0063\u006f\u006co\u0072\u0020\u0064\u0061\u0074\u0061\u003a\u0020\u0025\u0020\u0064",_fgga );
}else if _fdaaf ,_ecda :=_ceef .(*_bf .PdfObjectStream );_ecda {_bc .Log .Trace ("\u0049n\u0064e\u0078\u0065\u0064\u0020\u0073t\u0072\u0065a\u006d\u003a\u0020\u0025\u0073",_ceef .String ());_bc .Log .Trace ("\u0045\u006e\u0063\u006fde\u0064\u0020\u0028\u0025\u0064\u0029\u0020\u003a\u0020\u0025\u0023\u0020\u0078",len (_fdaaf .Stream ),_fdaaf .Stream );
_eced ,_bfadg :=_bf .DecodeStream (_fdaaf );if _bfadg !=nil {return nil ,_bfadg ;};_bc .Log .Trace ("\u0044e\u0063o\u0064\u0065\u0064\u0020\u0028%\u0064\u0029 \u003a\u0020\u0025\u0020\u0058",len (_eced ),_eced );_fgga =_eced ;}else {_bc .Log .Debug ("\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0054",_ceef );
return nil ,_af .Errorf ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0043\u0053\u003a\u0020\u0049\u006e\u0076a\u006ci\u0064\u0020\u0074\u0061\u0062\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if len (_fgga )< _edbgf .Base .GetNumComponents ()*(_edbgf .HiVal +1){_bc .Log .Debug ("\u0050\u0044\u0046\u0020\u0049\u006e\u0063o\u006d\u0070\u0061t\u0069\u0062\u0069\u006ci\u0074\u0079\u003a\u0020\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0074\u006f\u006f\u0020\u0073\u0068\u006f\u0072\u0074");
_bc .Log .Debug ("\u0046\u0061i\u006c\u002c\u0020\u006c\u0065\u006e\u0028\u0064\u0061\u0074\u0061\u0029\u003a\u0020\u0025\u0064\u002c\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0064\u002c\u0020\u0068\u0069\u0056\u0061\u006c\u003a\u0020\u0025\u0064",len (_fgga ),_edbgf .Base .GetNumComponents (),_edbgf .HiVal );
}else {_fgga =_fgga [:_edbgf .Base .GetNumComponents ()*(_edbgf .HiVal +1)];};_edbgf ._fddea =_fgga ;return _edbgf ,nil ;};

// PdfAnnotationRichMedia represents Rich Media annotations.
type PdfAnnotationRichMedia struct{*PdfAnnotation ;RichMediaSettings _bf .PdfObject ;RichMediaContent _bf .PdfObject ;};

// PdfColor interface represents a generic color in PDF.
type PdfColor interface{};

// PdfPageResources is a Page resources model.
// Implements PdfModel.
type PdfPageResources struct{ExtGState _bf .PdfObject ;ColorSpace _bf .PdfObject ;Pattern _bf .PdfObject ;Shading _bf .PdfObject ;XObject _bf .PdfObject ;Font _bf .PdfObject ;ProcSet _bf .PdfObject ;Properties _bf .PdfObject ;_dbfed *_bf .PdfObjectDictionary ;
_dbcab *PdfPageResourcesColorspaces ;};

// ContentStreamWrapper wraps the Page's contentstream into q ... Q blocks.
type ContentStreamWrapper interface{WrapContentStream (_agbc *PdfPage )error ;};

// ImageToRGB convert 1-component grayscale data to 3-component RGB.
func (_bdedb *PdfColorspaceDeviceGray )ImageToRGB (img Image )(Image ,error ){if img .ColorComponents !=1{return img ,_eff .New ("\u0074\u0068e \u0070\u0072\u006fv\u0069\u0064\u0065\u0064 im\u0061ge\u0020\u0069\u0073\u0020\u006e\u006f\u0074 g\u0072\u0061\u0079\u0020\u0073\u0063\u0061l\u0065");
};_cdad ,_gcaf :=_ff .NewImage (int (img .Width ),int (img .Height ),int (img .BitsPerComponent ),img .ColorComponents ,img .Data ,img ._gfegf ,img ._dbcfb );if _gcaf !=nil {return img ,_gcaf ;};_edbe ,_gcaf :=_ff .NRGBAConverter .Convert (_cdad );if _gcaf !=nil {return img ,_gcaf ;
};_feff :=_cgfba (_edbe .Base ());_bc .Log .Trace ("\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079\u0020\u002d>\u0020\u0052\u0047\u0042");_bc .Log .Trace ("s\u0061\u006d\u0070\u006c\u0065\u0073\u003a\u0020\u0025\u0076",img .Data );_bc .Log .Trace ("\u0052G\u0042 \u0073\u0061\u006d\u0070\u006c\u0065\u0073\u003a\u0020\u0025\u0076",_feff .Data );
_bc .Log .Trace ("\u0025\u0076\u0020\u002d\u003e\u0020\u0025\u0076",img ,_feff );return _feff ,nil ;};func _dcdg (_gggfb []byte )([]byte ,error ){_cbgbf :=_cc .New ();if _ ,_aggcb :=_ag .Copy (_cbgbf ,_cdc .NewReader (_gggfb ));_aggcb !=nil {return nil ,_aggcb ;
};return _cbgbf .Sum (nil ),nil ;};

// SetDecode sets the decode image float slice.
func (_bcgf *Image )SetDecode (decode []float64 ){_bcgf ._dbcfb =decode };func (_ecfca *PdfAcroForm )signatureFields ()[]*PdfFieldSignature {var _bfaca []*PdfFieldSignature ;for _ ,_cbgdf :=range _ecfca .AllFields (){switch _aafcb :=_cbgdf .GetContext ().(type ){case *PdfFieldSignature :_fdfaa :=_aafcb ;
_bfaca =append (_bfaca ,_fdfaa );};};return _bfaca ;};func (_dee *PdfReader )newPdfActionGoTo3DViewFromDict (_dfe *_bf .PdfObjectDictionary )(*PdfActionGoTo3DView ,error ){return &PdfActionGoTo3DView {TA :_dfe .Get ("\u0054\u0041"),V :_dfe .Get ("\u0056")},nil ;
};

// RemovePage removes a page by number.
func (_ecdea *PdfAppender )RemovePage (pageNum int ){_aace :=pageNum -1;_ecdea ._bagg =append (_ecdea ._bagg [0:_aace ],_ecdea ._bagg [pageNum :]...);};

// DecodeArray returns the range of color component values in DeviceGray colorspace.
func (_bfdfb *PdfColorspaceDeviceGray )DecodeArray ()[]float64 {return []float64 {0,1.0}};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain a single element between 0 and 1.
func (_cbgb *PdfColorspaceDeviceGray )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=1{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_cgcb :=vals [0];if _cgcb < 0.0||_cgcb > 1.0{_bc .Log .Debug ("\u0049\u006eco\u006d\u0070\u0061t\u0069\u0062\u0069\u006city\u003a R\u0061\u006e\u0067\u0065\u0020\u006f\u0075ts\u0069\u0064\u0065\u0020\u005b\u0030\u002c1\u005d");
};if _cgcb < 0.0{_cgcb =0.0;}else if _cgcb > 1.0{_cgcb =1.0;};return NewPdfColorDeviceGray (_cgcb ),nil ;};

// GetDocMDPPermission returns the DocMDP level of the restrictions
func (_gdeda *PdfSignature )GetDocMDPPermission ()(_bcd .DocMDPPermission ,bool ){for _ ,_ccfbc :=range _gdeda .Reference .Elements (){if _cgab ,_fcba :=_bf .GetDict (_ccfbc );_fcba {if _bedcbe ,_ggggc :=_bf .GetNameVal (_cgab .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u004d\u0065\u0074\u0068\u006f\u0064"));
_ggggc &&_bedcbe =="\u0044\u006f\u0063\u004d\u0044\u0050"{if _gfegg ,_ecded :=_bf .GetDict (_cgab .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u0050\u0061\u0072\u0061\u006d\u0073"));_ecded {if P ,_edfbe :=_bf .GetIntVal (_gfegg .Get ("\u0050"));
_edfbe {return _bcd .DocMDPPermission (P ),true ;};};};};};return 0,false ;};

// NewPdfFilespec returns an initialized generic PDF filespec model.
func NewPdfFilespec ()*PdfFilespec {_ebegc :=&PdfFilespec {};_ebegc ._fbbg =_bf .MakeIndirectObject (_bf .MakeDict ());return _ebegc ;};

// ColorFromFloats returns a new PdfColor based on the input slice of color
// components. The slice should contain three elements representing the
// L (range 0-100), A (range -100-100) and B (range -100-100) components of
// the color.
func (_egbaf *PdfColorspaceLab )ColorFromFloats (vals []float64 )(PdfColor ,error ){if len (vals )!=3{return nil ,_eff .New ("r\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b");};_ebfd :=vals [0];if _ebfd < 0.0||_ebfd > 100.0{_bc .Log .Debug ("\u004c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067e\u0020\u0028\u0067\u006f\u0074\u0020%\u0076\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030-\u0031\u0030\u0030\u0029",_ebfd );
return nil ,ErrColorOutOfRange ;};_gfeg :=vals [1];_fabe :=float64 (-100);_ffefg :=float64 (100);if len (_egbaf .Range )> 1{_fabe =_egbaf .Range [0];_ffefg =_egbaf .Range [1];};if _gfeg < _fabe ||_gfeg > _ffefg {_bc .Log .Debug ("\u0041\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067e\u0020\u0028\u0067\u006f\u0074\u0020%\u0076\u003b\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0025\u0076\u0020\u0074o\u0020\u0025\u0076\u0029",_gfeg ,_fabe ,_ffefg );
return nil ,ErrColorOutOfRange ;};_faae :=vals [2];_dfbb :=float64 (-100);_bebbf :=float64 (100);if len (_egbaf .Range )> 3{_dfbb =_egbaf .Range [2];_bebbf =_egbaf .Range [3];};if _faae < _dfbb ||_faae > _bebbf {_bc .Log .Debug ("\u0062\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067e\u0020\u0028\u0067\u006f\u0074\u0020%\u0076\u003b\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0025\u0076\u0020\u0074o\u0020\u0025\u0076\u0029",_faae ,_dfbb ,_bebbf );
return nil ,ErrColorOutOfRange ;};_fdad :=NewPdfColorLab (_ebfd ,_gfeg ,_faae );return _fdad ,nil ;};

// PdfAnnotationPolygon represents Polygon annotations.
// (Section 12.5.6.9).
type PdfAnnotationPolygon struct{*PdfAnnotation ;*PdfAnnotationMarkup ;Vertices _bf .PdfObject ;LE _bf .PdfObject ;BS _bf .PdfObject ;IC _bf .PdfObject ;BE _bf .PdfObject ;IT _bf .PdfObject ;Measure _bf .PdfObject ;};func (_accg *PdfColorspaceICCBased )String ()string {return "\u0049\u0043\u0043\u0042\u0061\u0073\u0065\u0064";
};func (_eaff *PdfReader )newPdfActionSubmitFormFromDict (_cfdd *_bf .PdfObjectDictionary )(*PdfActionSubmitForm ,error ){_cdef ,_fcc :=_aac (_cfdd .Get ("\u0046"));if _fcc !=nil {return nil ,_fcc ;};return &PdfActionSubmitForm {F :_cdef ,Fields :_cfdd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"),Flags :_cfdd .Get ("\u0046\u006c\u0061g\u0073")},nil ;
};

// SetSubtype sets the Subtype S for given PdfOutputIntent.
func (_acggg *PdfOutputIntent )SetSubtype (subtype PdfOutputIntentType )error {if !subtype .IsValid (){return _eff .New ("\u0070\u0072o\u0076\u0069\u0064\u0065d\u0020\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u004f\u0075t\u0070\u0075\u0074\u0049\u006e\u0074\u0065\u006e\u0074\u0020\u0053\u0075b\u0054\u0079\u0070\u0065");
};_acggg .S =subtype ;return nil ;};

// StringToCharcodeBytes maps the provided string runes to charcode bytes and
// it returns the resulting slice of bytes, along with the number of runes
// which could not be converted. If the number of misses is 0, all string runes
// were successfully converted.
func (_cccc *PdfFont )StringToCharcodeBytes (str string )([]byte ,int ){return _cccc .RunesToCharcodeBytes ([]rune (str ));};func _ccegc (_fagg _bf .PdfObject )(*_bf .PdfObjectDictionary ,*fontCommon ,error ){_efad :=&fontCommon {};if _ggfe ,_gbed :=_fagg .(*_bf .PdfIndirectObject );
_gbed {_efad ._gbead =_ggfe .ObjectNumber ;};_dfbe ,_gdaa :=_bf .GetDict (_fagg );if !_gdaa {_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0046\u006f\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0067\u0069\u0076\u0065\u006e\u0020\u0062\u0079\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u0020\u0028\u0025\u0054\u0029",_fagg );
return nil ,nil ,ErrFontNotSupported ;};_gbec ,_gdaa :=_bf .GetNameVal (_dfbe .Get ("\u0054\u0079\u0070\u0065"));if !_gdaa {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0046o\u006e\u0074\u0020\u0049\u006ec\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u002e\u0020\u0054\u0079\u0070\u0065\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
return nil ,nil ,ErrRequiredAttributeMissing ;};if _gbec !="\u0046\u006f\u006e\u0074"{_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0046\u006f\u006e\u0074\u0020\u0049\u006e\u0063\u006f\u006d\u0070\u0061t\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u002e\u0020\u0054\u0079\u0070\u0065\u003d\u0025\u0071\u002e\u0020\u0053\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0025\u0071.",_gbec ,"\u0046\u006f\u006e\u0074");
return nil ,nil ,_bf .ErrTypeError ;};_agfcf ,_gdaa :=_bf .GetNameVal (_dfbe .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_gdaa {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020F\u006f\u006e\u0074 \u0049\u006e\u0063o\u006d\u0070a\u0074\u0069\u0062\u0069\u006c\u0069t\u0079. \u0053\u0075\u0062\u0074\u0079\u0070\u0065\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
return nil ,nil ,ErrRequiredAttributeMissing ;};_efad ._fdfb =_agfcf ;_edfba ,_gdaa :=_bf .GetNameVal (_dfbe .Get ("\u004e\u0061\u006d\u0065"));if _gdaa {_efad ._bcggb =_edfba ;};_ccfcc :=_dfbe .Get ("\u0054o\u0055\u006e\u0069\u0063\u006f\u0064e");if _ccfcc !=nil {_efad ._bcdc =_bf .TraceToDirectObject (_ccfcc );
_edbcg ,_bcaeg :=_cdagb (_efad ._bcdc ,_efad );if _bcaeg !=nil {return _dfbe ,_efad ,_bcaeg ;};_efad ._ggcb =_edbcg ;}else if _agfcf =="\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0030"||_agfcf =="\u0043\u0049\u0044F\u006f\u006e\u0074\u0054\u0079\u0070\u0065\u0032"{_cefec ,_cbdg :=_cf .NewCIDSystemInfo (_dfbe .Get ("\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f"));
if _cbdg !=nil {return _dfbe ,_efad ,_cbdg ;};_efbb :=_af .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0055\u0043\u0053\u0032",_cefec .Registry ,_cefec .Ordering );if _cf .IsPredefinedCMap (_efbb ){_efad ._ggcb ,_cbdg =_cf .LoadPredefinedCMap (_efbb );
if _cbdg !=nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063o\u0075\u006c\u0064 \u006e\u006f\u0074\u0020l\u006f\u0061\u0064\u0020\u0070\u0072\u0065\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0043\u004d\u0061\u0070\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_efbb ,_cbdg );
};};};_cdgg :=_dfbe .Get ("\u0046\u006f\u006e\u0074\u0044\u0065\u0073\u0063\u0072i\u0070\u0074\u006f\u0072");if _cdgg !=nil {_eaage ,_acac :=_affge (_cdgg );if _acac !=nil {_bc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0042\u0061\u0064\u0020\u0066\u006f\u006et\u0020d\u0065s\u0063r\u0069\u0070\u0074\u006f\u0072\u002e\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_acac );
return _dfbe ,_efad ,_acac ;};_efad ._cedfe =_eaage ;};if _agfcf !="\u0054\u0079\u0070e\u0033"{_fbca ,_bfgg :=_bf .GetNameVal (_dfbe .Get ("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074"));if !_bfgg {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0046\u006f\u006et\u0020\u0049\u006ec\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069t\u0079\u002e\u0020\u0042\u0061se\u0046\u006f\u006e\u0074\u0020\u0028\u0052\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0029\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
return _dfbe ,_efad ,ErrRequiredAttributeMissing ;};_efad ._adccf =_fbca ;};return _dfbe ,_efad ,nil ;};func (_bbagb *PdfWriter )hasObject (_bcef _bf .PdfObject )bool {_ ,_caadd :=_bbagb ._bcgbbe [_bcef ];return _caadd ;};

// EnableByName LTV enables the signature dictionary of the PDF AcroForm
// field identified the specified name. The signing certificate chain is
// extracted from the signature dictionary. Optionally, additional certificates
// can be specified through the `extraCerts` parameter. The LTV client attempts
// to build the certificate chain up to a trusted root by downloading any
// missing certificates.
func (_egcd *LTV )EnableByName (name string ,extraCerts []*_d .Certificate )error {_gefbb :=_egcd ._ceaaf ._abac .AcroForm ;for _ ,_abade :=range _gefbb .AllFields (){_gfdba ,_ :=_abade .GetContext ().(*PdfFieldSignature );if _gfdba ==nil {continue ;};
if _cfdcg :=_gfdba .PartialName ();_cfdcg !=name {continue ;};return _egcd .Enable (_gfdba .V ,extraCerts );};return nil ;};

// ToPdfObject implements interface PdfModel.
func (_fed *PdfActionJavaScript )ToPdfObject ()_bf .PdfObject {_fed .PdfAction .ToPdfObject ();_feg :=_fed ._fda ;_fac :=_feg .PdfObject .(*_bf .PdfObjectDictionary );_fac .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeJavaScript )));_fac .SetIfNotNil ("\u004a\u0053",_fed .JS );
return _feg ;};

// ToPdfObject implements interface PdfModel.
func (_bgc *PdfActionGoTo )ToPdfObject ()_bf .PdfObject {_bgc .PdfAction .ToPdfObject ();_bd :=_bgc ._fda ;_ac :=_bd .PdfObject .(*_bf .PdfObjectDictionary );_ac .SetIfNotNil ("\u0053",_bf .MakeName (string (ActionTypeGoTo )));_ac .SetIfNotNil ("\u0044",_bgc .D );
return _bd ;};

// NewPdfAnnotationCaret returns a new caret annotation.
func NewPdfAnnotationCaret ()*PdfAnnotationCaret {_eed :=NewPdfAnnotation ();_gdf :=&PdfAnnotationCaret {};_gdf .PdfAnnotation =_eed ;_gdf .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_eed .SetContext (_gdf );return _gdf ;};var _ pdfFont =(*pdfCIDFontType0 )(nil );


// XObjectImage (Table 89 in 8.9.5.1).
// Implements PdfModel interface.
type XObjectImage struct{

//ColorSpace       PdfObject
Width *int64 ;Height *int64 ;ColorSpace PdfColorspace ;BitsPerComponent *int64 ;Filter _bf .StreamEncoder ;Intent _bf .PdfObject ;ImageMask _bf .PdfObject ;Mask _bf .PdfObject ;Matte _bf .PdfObject ;Decode _bf .PdfObject ;Interpolate _bf .PdfObject ;Alternatives _bf .PdfObject ;
SMask _bf .PdfObject ;SMaskInData _bf .PdfObject ;Name _bf .PdfObject ;StructParent _bf .PdfObject ;ID _bf .PdfObject ;OPI _bf .PdfObject ;Metadata _bf .PdfObject ;OC _bf .PdfObject ;Stream []byte ;_bccdb *_bf .PdfObjectStream ;};func _decef (_dgeegc _bf .PdfObject )[]*_bf .PdfObjectStream {if _dgeegc ==nil {return nil ;
};_dcbcgd ,_feacff :=_bf .GetArray (_dgeegc );if !_feacff ||_dcbcgd .Len ()==0{return nil ;};_cbdd :=make ([]*_bf .PdfObjectStream ,0,_dcbcgd .Len ());for _ ,_baged :=range _dcbcgd .Elements (){if _fdfeca ,_bcdba :=_bf .GetStream (_baged );_bcdba {_cbdd =append (_cbdd ,_fdfeca );
};};return _cbdd ;};

// GetShadingByName gets the shading specified by keyName. Returns nil if not existing.
// The bool flag indicated whether it was found or not.
func (_gdaggc *PdfPageResources )GetShadingByName (keyName _bf .PdfObjectName )(*PdfShading ,bool ){if _gdaggc .Shading ==nil {return nil ,false ;};_bfeda ,_adfgb :=_bf .TraceToDirectObject (_gdaggc .Shading ).(*_bf .PdfObjectDictionary );if !_adfgb {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0053\u0068\u0061d\u0069\u006e\u0067\u0020\u0065\u006e\u0074r\u0079\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0064i\u0063\u0074\u0020\u0028\u0067\u006f\u0074\u0020\u0025\u0054\u0029",_gdaggc .Shading );
return nil ,false ;};if _ccbcf :=_bfeda .Get (keyName );_ccbcf !=nil {_cgea ,_ebfgg :=_ceacbf (_ccbcf );if _ebfgg !=nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020f\u0061\u0069l\u0065\u0064\u0020\u0074\u006f\u0020\u006c\u006fa\u0064\u0020\u0070\u0064\u0066\u0020\u0073\u0068\u0061\u0064\u0069\u006eg\u003a\u0020\u0025\u0076",_ebfgg );
return nil ,false ;};return _cgea ,true ;};return nil ,false ;};

// String implements interface PdfObject.
func (_ae *PdfAction )String ()string {_fb ,_cge :=_ae .ToPdfObject ().(*_bf .PdfIndirectObject );if _cge {return _af .Sprintf ("\u0025\u0054\u003a\u0020\u0025\u0073",_ae ._baf ,_fb .PdfObject .String ());};return "";};

// GetRuneMetrics returns the character metrics for the specified rune.
// A bool flag is returned to indicate whether or not the entry was found.
func (_degcc pdfFontType0 )GetRuneMetrics (r rune )(_eb .CharMetrics ,bool ){if _degcc .DescendantFont ==nil {_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0064\u0065\u0073\u0063\u0065\u006e\u0064\u0061\u006e\u0074\u002e\u0020\u0066\u006f\u006et=\u0025\u0073",_degcc );
return _eb .CharMetrics {},false ;};return _degcc .DescendantFont .GetRuneMetrics (r );};

// PdfColorspaceDeviceNAttributes contains additional information about the components of colour space that
// conforming readers may use. Conforming readers need not use the alternateSpace and tintTransform parameters,
// and may instead use a custom blending algorithms, along with other information provided in the attributes
// dictionary if present.
type PdfColorspaceDeviceNAttributes struct{Subtype *_bf .PdfObjectName ;Colorants _bf .PdfObject ;Process _bf .PdfObject ;MixingHints _bf .PdfObject ;_agcf *_bf .PdfIndirectObject ;};

// ToUnicode returns the name of the font's "ToUnicode" field if there is one, or "" if there isn't.
func (_aada *PdfFont )ToUnicode ()string {if _aada .baseFields ()._ggcb ==nil {return "";};return _aada .baseFields ()._ggcb .Name ();};

// ColorToRGB converts a DeviceN color to an RGB color.
func (_fbff *PdfColorspaceDeviceN )ColorToRGB (color PdfColor )(PdfColor ,error ){if _fbff .AlternateSpace ==nil {return nil ,_eff .New ("\u0044\u0065\u0076\u0069\u0063\u0065N\u0020\u0061\u006c\u0074\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070a\u0063\u0065\u0020\u0075\u006e\u0064\u0065f\u0069\u006e\u0065\u0064");
};return _fbff .AlternateSpace .ColorToRGB (color );};

// UpdateObject marks `obj` as updated and to be included in the following revision.
func (_deg *PdfAppender )UpdateObject (obj _bf .PdfObject ){_deg .replaceObject (obj ,obj );if _ ,_eeeg :=_deg ._ceaf [obj ];!_eeeg {_deg ._cbab =append (_deg ._cbab ,obj );_deg ._ceaf [obj ]=struct{}{};};};

// PdfActionLaunch represents a launch action.
type PdfActionLaunch struct{*PdfAction ;F *PdfFilespec ;Win _bf .PdfObject ;Mac _bf .PdfObject ;Unix _bf .PdfObject ;NewWindow _bf .PdfObject ;};

// NewPdfActionURI returns a new "Uri" action.
func NewPdfActionURI ()*PdfActionURI {_dfa :=NewPdfAction ();_ffa :=&PdfActionURI {};_ffa .PdfAction =_dfa ;_dfa .SetContext (_ffa );return _ffa ;};

// NewPdfAnnotationPolyLine returns a new polyline annotation.
func NewPdfAnnotationPolyLine ()*PdfAnnotationPolyLine {_ecfc :=NewPdfAnnotation ();_gg :=&PdfAnnotationPolyLine {};_gg .PdfAnnotation =_ecfc ;_gg .PdfAnnotationMarkup =&PdfAnnotationMarkup {};_ecfc .SetContext (_gg );return _gg ;};