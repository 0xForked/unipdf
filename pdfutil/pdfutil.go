//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_d "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/contentstream";_e "github.com/unidoc/unipdf/v3/contentstream/draw";_bg "github.com/unidoc/unipdf/v3/core";_ba "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_ba .PdfPage )error {_a ,_g :=page .GetMediaBox ();if _g !=nil {return _g ;};_f :=page .Rotate ;_fa :=_f !=nil &&*_f %360!=0&&*_f %90==0;_a .Normalize ();_fe ,_fc ,_ae ,_fb :=_a .Llx ,_a .Lly ,_a .Width (),_a .Height ();_bf :=_fe !=0||_fc !=0;
if !_fa &&!_bf {return nil ;};_af :=func (_aa ,_ca ,_fg float64 )_e .BoundingBox {return _e .Path {Points :[]_e .Point {_e .NewPoint (0,0).Rotate (_fg ),_e .NewPoint (_aa ,0).Rotate (_fg ),_e .NewPoint (0,_ca ).Rotate (_fg ),_e .NewPoint (_aa ,_ca ).Rotate (_fg )}}.GetBoundingBox ();
};_gd :=_c .NewContentCreator ();var _bb float64 ;if _fa {_bb =-float64 (*page .Rotate );_faf :=_af (_ae ,_fb ,_bb );_gd .Translate ((_faf .Width -_ae )/2+_ae /2,(_faf .Height -_fb )/2+_fb /2);_gd .RotateDeg (_bb );_gd .Translate (-_ae /2,-_fb /2);_ae ,_fb =_faf .Width ,_faf .Height ;
};if _bf {_gd .Translate (-_fe ,-_fc );};_fbb :=_gd .Operations ();_cf ,_g :=_bg .MakeStream (_fbb .Bytes (),_bg .NewFlateEncoder ());if _g !=nil {return _g ;};_fga :=_bg .MakeArray (_cf );_fga .Append (page .GetContentStreamObjs ()...);*_a =_ba .PdfRectangle {Urx :_ae ,Ury :_fb };
if _ga :=page .CropBox ;_ga !=nil {_ga .Normalize ();_gaa ,_df ,_bff ,_dg :=_ga .Llx -_fe ,_ga .Lly -_fc ,_ga .Width (),_ga .Height ();if _fa {_aee :=_af (_bff ,_dg ,_bb );_bff ,_dg =_aee .Width ,_aee .Height ;};*_ga =_ba .PdfRectangle {Llx :_gaa ,Lly :_df ,Urx :_gaa +_bff ,Ury :_df +_dg };
};_d .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_bb ,_fbb ,_a );page .Contents =_fga ;page .Rotate =nil ;
return nil ;};