//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_ed "github.com/unidoc/unipdf/v3/common";_aa "github.com/unidoc/unipdf/v3/contentstream";_a "github.com/unidoc/unipdf/v3/contentstream/draw";_c "github.com/unidoc/unipdf/v3/core";_ef "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_ef .PdfPage )error {_eff ,_ag :=page .GetMediaBox ();if _ag !=nil {return _ag ;};_g :=page .Rotate ;_b :=_g !=nil &&*_g %360!=0&&*_g %90==0;_eff .Normalize ();_cf ,_d ,_f ,_ba :=_eff .Llx ,_eff .Lly ,_eff .Width (),_eff .Height ();
_df :=_cf !=0||_d !=0;if !_b &&!_df {return nil ;};_aag :=func (_cfe ,_cfc ,_ee float64 )_a .BoundingBox {return _a .Path {Points :[]_a .Point {_a .NewPoint (0,0).Rotate (_ee ),_a .NewPoint (_cfe ,0).Rotate (_ee ),_a .NewPoint (0,_cfc ).Rotate (_ee ),_a .NewPoint (_cfe ,_cfc ).Rotate (_ee )}}.GetBoundingBox ();
};_cb :=_aa .NewContentCreator ();var _gg float64 ;if _b {_gg =-float64 (*page .Rotate );_fb :=_aag (_f ,_ba ,_gg );_cb .Translate ((_fb .Width -_f )/2+_f /2,(_fb .Height -_ba )/2+_ba /2);_cb .RotateDeg (_gg );_cb .Translate (-_f /2,-_ba /2);_f ,_ba =_fb .Width ,_fb .Height ;
};if _df {_cb .Translate (-_cf ,-_d );};_ggg :=_cb .Operations ();_fe ,_ag :=_c .MakeStream (_ggg .Bytes (),_c .NewFlateEncoder ());if _ag !=nil {return _ag ;};_eed :=_c .MakeArray (_fe );_eed .Append (page .GetContentStreamObjs ()...);*_eff =_ef .PdfRectangle {Urx :_f ,Ury :_ba };
if _aab :=page .CropBox ;_aab !=nil {_aab .Normalize ();_cg ,_af ,_fd ,_bf :=_aab .Llx -_cf ,_aab .Lly -_d ,_aab .Width (),_aab .Height ();if _b {_gd :=_aag (_fd ,_bf ,_gg );_fd ,_bf =_gd .Width ,_gd .Height ;};*_aab =_ef .PdfRectangle {Llx :_cg ,Lly :_af ,Urx :_cg +_fd ,Ury :_af +_bf };
};_ed .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_gg ,_ggg ,_eff );page .Contents =_eed ;page .Rotate =nil ;
return nil ;};