//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_b "github.com/unidoc/unipdf/v3/common";_gb "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/contentstream/draw";_ba "github.com/unidoc/unipdf/v3/core";_ga "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_ga .PdfPage )error {_f ,_bg :=page .GetMediaBox ();if _bg !=nil {return _bg ;};_c ,_bg :=page .GetRotate ();if _bg !=nil {_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_bg .Error ());
};_cd :=_c %360!=0&&_c %90==0;_f .Normalize ();_fc ,_e ,_ge ,_gaa :=_f .Llx ,_f .Lly ,_f .Width (),_f .Height ();_ec :=_fc !=0||_e !=0;if !_cd &&!_ec {return nil ;};_bge :=func (_a ,_fcc ,_eg float64 )_d .BoundingBox {return _d .Path {Points :[]_d .Point {_d .NewPoint (0,0).Rotate (_eg ),_d .NewPoint (_a ,0).Rotate (_eg ),_d .NewPoint (0,_fcc ).Rotate (_eg ),_d .NewPoint (_a ,_fcc ).Rotate (_eg )}}.GetBoundingBox ();
};_ae :=_gb .NewContentCreator ();var _ecb float64 ;if _cd {_ecb =-float64 (_c );_gd :=_bge (_ge ,_gaa ,_ecb );_ae .Translate ((_gd .Width -_ge )/2+_ge /2,(_gd .Height -_gaa )/2+_gaa /2);_ae .RotateDeg (_ecb );_ae .Translate (-_ge /2,-_gaa /2);_ge ,_gaa =_gd .Width ,_gd .Height ;
};if _ec {_ae .Translate (-_fc ,-_e );};_ag :=_ae .Operations ();_aa ,_bg :=_ba .MakeStream (_ag .Bytes (),_ba .NewFlateEncoder ());if _bg !=nil {return _bg ;};_bc :=_ba .MakeArray (_aa );_bc .Append (page .GetContentStreamObjs ()...);*_f =_ga .PdfRectangle {Urx :_ge ,Ury :_gaa };
if _fd :=page .CropBox ;_fd !=nil {_fd .Normalize ();_dg ,_gbb ,_cc ,_cdb :=_fd .Llx -_fc ,_fd .Lly -_e ,_fd .Width (),_fd .Height ();if _cd {_gg :=_bge (_cc ,_cdb ,_ecb );_cc ,_cdb =_gg .Width ,_gg .Height ;};*_fd =_ga .PdfRectangle {Llx :_dg ,Lly :_gbb ,Urx :_dg +_cc ,Ury :_gbb +_cdb };
};_b .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ecb ,_ag ,_f );page .Contents =_bc ;page .Rotate =nil ;
return nil ;};