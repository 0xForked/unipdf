//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_bcb "github.com/unidoc/unipdf/v3/contentstream";_c "github.com/unidoc/unipdf/v3/contentstream/draw";_f "github.com/unidoc/unipdf/v3/core";_bc "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_bc .PdfPage )error {_eg ,_a :=page .GetMediaBox ();if _a !=nil {return _a ;};_ag ,_a :=page .GetRotate ();if _a !=nil {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_a .Error ());
};_be :=_ag %360!=0&&_ag %90==0;_eg .Normalize ();_eb ,_bb ,_ba ,_d :=_eg .Llx ,_eg .Lly ,_eg .Width (),_eg .Height ();_g :=_eb !=0||_bb !=0;if !_be &&!_g {return nil ;};_ff :=func (_gg ,_cd ,_ab float64 )_c .BoundingBox {return _c .Path {Points :[]_c .Point {_c .NewPoint (0,0).Rotate (_ab ),_c .NewPoint (_gg ,0).Rotate (_ab ),_c .NewPoint (0,_cd ).Rotate (_ab ),_c .NewPoint (_gg ,_cd ).Rotate (_ab )}}.GetBoundingBox ();
};_dg :=_bcb .NewContentCreator ();var _fc float64 ;if _be {_fc =-float64 (_ag );_cf :=_ff (_ba ,_d ,_fc );_dg .Translate ((_cf .Width -_ba )/2+_ba /2,(_cf .Height -_d )/2+_d /2);_dg .RotateDeg (_fc );_dg .Translate (-_ba /2,-_d /2);_ba ,_d =_cf .Width ,_cf .Height ;
};if _g {_dg .Translate (-_eb ,-_bb );};_bcbe :=_dg .Operations ();_fd ,_a :=_f .MakeStream (_bcbe .Bytes (),_f .NewFlateEncoder ());if _a !=nil {return _a ;};_de :=_f .MakeArray (_fd );_de .Append (page .GetContentStreamObjs ()...);*_eg =_bc .PdfRectangle {Urx :_ba ,Ury :_d };
if _da :=page .CropBox ;_da !=nil {_da .Normalize ();_dd ,_ea ,_eac ,_gd :=_da .Llx -_eb ,_da .Lly -_bb ,_da .Width (),_da .Height ();if _be {_ggc :=_ff (_eac ,_gd ,_fc );_eac ,_gd =_ggc .Width ,_ggc .Height ;};*_da =_bc .PdfRectangle {Llx :_dd ,Lly :_ea ,Urx :_dd +_eac ,Ury :_ea +_gd };
};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_fc ,_bcbe ,_eg );page .Contents =_de ;page .Rotate =nil ;
return nil ;};