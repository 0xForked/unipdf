//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_a "github.com/unidoc/unipdf/v3/common";_ff "github.com/unidoc/unipdf/v3/contentstream";_fg "github.com/unidoc/unipdf/v3/contentstream/draw";_c "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_f .PdfPage )error {_e ,_ee :=page .GetMediaBox ();if _ee !=nil {return _ee ;};_cc :=page .Rotate ;_b :=_cc !=nil &&*_cc %360!=0&&*_cc %90==0;_e .Normalize ();_ccd ,_ea ,_d ,_ge :=_e .Llx ,_e .Lly ,_e .Width (),_e .Height ();_ec :=_ccd !=0||_ea !=0;
if !_b &&!_ec {return nil ;};_cb :=func (_gf ,_ed ,_dc float64 )_fg .BoundingBox {return _fg .Path {Points :[]_fg .Point {_fg .NewPoint (0,0).Rotate (_dc ),_fg .NewPoint (_gf ,0).Rotate (_dc ),_fg .NewPoint (0,_ed ).Rotate (_dc ),_fg .NewPoint (_gf ,_ed ).Rotate (_dc )}}.GetBoundingBox ();
};_be :=_ff .NewContentCreator ();var _eb float64 ;if _b {_eb =-float64 (*page .Rotate );_ac :=_cb (_d ,_ge ,_eb );_be .Translate ((_ac .Width -_d )/2+_d /2,(_ac .Height -_ge )/2+_ge /2);_be .RotateDeg (_eb );_be .Translate (-_d /2,-_ge /2);_d ,_ge =_ac .Width ,_ac .Height ;
};if _ec {_be .Translate (-_ccd ,-_ea );};_gg :=_be .Operations ();_df ,_ee :=_c .MakeStream (_gg .Bytes (),_c .NewFlateEncoder ());if _ee !=nil {return _ee ;};_aa :=_c .MakeArray (_df );_aa .Append (page .GetContentStreamObjs ()...);*_e =_f .PdfRectangle {Urx :_d ,Ury :_ge };
if _cd :=page .CropBox ;_cd !=nil {_cd .Normalize ();_dd ,_eg ,_fd ,_ddb :=_cd .Llx -_ccd ,_cd .Lly -_ea ,_cd .Width (),_cd .Height ();if _b {_ag :=_cb (_fd ,_ddb ,_eb );_fd ,_ddb =_ag .Width ,_ag .Height ;};*_cd =_f .PdfRectangle {Llx :_dd ,Lly :_eg ,Urx :_dd +_fd ,Ury :_eg +_ddb };
};_a .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_eb ,_gg ,_e );page .Contents =_aa ;page .Rotate =nil ;
return nil ;};