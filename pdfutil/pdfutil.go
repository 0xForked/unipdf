//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_c "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/contentstream";_b "github.com/unidoc/unipdf/v3/contentstream/draw";_e "github.com/unidoc/unipdf/v3/core";_fe "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_fe .PdfPage )error {_eb ,_fg :=page .GetMediaBox ();if _fg !=nil {return _fg ;};_cc ,_fg :=page .GetRotate ();if _fg !=nil {_c .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_fg .Error ());
};_ebf :=_cc %360!=0&&_cc %90==0;_eb .Normalize ();_ce ,_g ,_ef ,_bb :=_eb .Llx ,_eb .Lly ,_eb .Width (),_eb .Height ();_ff :=_ce !=0||_g !=0;if !_ebf &&!_ff {return nil ;};_eg :=func (_ea ,_bbb ,_a float64 )_b .BoundingBox {return _b .Path {Points :[]_b .Point {_b .NewPoint (0,0).Rotate (_a ),_b .NewPoint (_ea ,0).Rotate (_a ),_b .NewPoint (0,_bbb ).Rotate (_a ),_b .NewPoint (_ea ,_bbb ).Rotate (_a )}}.GetBoundingBox ();
};_dc :=_d .NewContentCreator ();var _efa float64 ;if _ebf {_efa =-float64 (_cc );_eaa :=_eg (_ef ,_bb ,_efa );_dc .Translate ((_eaa .Width -_ef )/2+_ef /2,(_eaa .Height -_bb )/2+_bb /2);_dc .RotateDeg (_efa );_dc .Translate (-_ef /2,-_bb /2);_ef ,_bb =_eaa .Width ,_eaa .Height ;
};if _ff {_dc .Translate (-_ce ,-_g );};_cd :=_dc .Operations ();_ab ,_fg :=_e .MakeStream (_cd .Bytes (),_e .NewFlateEncoder ());if _fg !=nil {return _fg ;};_ga :=_e .MakeArray (_ab );_ga .Append (page .GetContentStreamObjs ()...);*_eb =_fe .PdfRectangle {Urx :_ef ,Ury :_bb };
if _ba :=page .CropBox ;_ba !=nil {_ba .Normalize ();_gf ,_cb ,_bc ,_eaf :=_ba .Llx -_ce ,_ba .Lly -_g ,_ba .Width (),_ba .Height ();if _ebf {_gd :=_eg (_bc ,_eaf ,_efa );_bc ,_eaf =_gd .Width ,_gd .Height ;};*_ba =_fe .PdfRectangle {Llx :_gf ,Lly :_cb ,Urx :_gf +_bc ,Ury :_cb +_eaf };
};_c .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_efa ,_cd ,_eb );page .Contents =_ga ;page .Rotate =nil ;
return nil ;};