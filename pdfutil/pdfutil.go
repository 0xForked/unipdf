//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_cb "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/contentstream";_fb "github.com/unidoc/unipdf/v3/contentstream/draw";_f "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_g .PdfPage )error {_dg ,_b :=page .GetMediaBox ();if _b !=nil {return _b ;};_a :=page .Rotate ;_ac :=_a !=nil &&*_a %360!=0&&*_a %90==0;_dg .Normalize ();_gd ,_be ,_db ,_ff :=_dg .Llx ,_dg .Lly ,_dg .Width (),_dg .Height ();_fg :=_gd !=0||_be !=0;if !_ac &&!_fg {return nil ;};_ad :=func (_af ,_e ,_aff float64 )_fb .BoundingBox {return _fb .Path {Points :[]_fb .Point {_fb .NewPoint (0,0).Rotate (_aff ),_fb .NewPoint (_af ,0).Rotate (_aff ),_fb .NewPoint (0,_e ).Rotate (_aff ),_fb .NewPoint (_af ,_e ).Rotate (_aff )}}.GetBoundingBox ();};_bc :=_d .NewContentCreator ();var _fge float64 ;if _ac {_fge =-float64 (*page .Rotate );_cc :=_ad (_db ,_ff ,_fge );_bc .Translate ((_cc .Width -_db )/2+_db /2,(_cc .Height -_ff )/2+_ff /2);_bc .RotateDeg (_fge );_bc .Translate (-_db /2,-_ff /2);_db ,_ff =_cc .Width ,_cc .Height ;};if _fg {_bc .Translate (-_gd ,-_be );};_ffd :=_bc .Operations ();_ce ,_b :=_f .MakeStream (_ffd .Bytes (),_f .NewFlateEncoder ());if _b !=nil {return _b ;};_bd :=_f .MakeArray (_ce );_bd .Append (page .GetContentStreamObjs ()...);*_dg =_g .PdfRectangle {Urx :_db ,Ury :_ff };if _cf :=page .CropBox ;_cf !=nil {_cf .Normalize ();_gf ,_gc ,_df ,_dfd :=_cf .Llx -_gd ,_cf .Lly -_be ,_cf .Width (),_cf .Height ();if _ac {_bcd :=_ad (_df ,_dfd ,_fge );_df ,_dfd =_bcd .Width ,_bcd .Height ;};*_cf =_g .PdfRectangle {Llx :_gf ,Lly :_gc ,Urx :_gf +_df ,Ury :_gc +_dfd };};_cb .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_fge ,_ffd ,_dg );page .Contents =_bd ;page .Rotate =nil ;return nil ;};