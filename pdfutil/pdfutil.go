//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/contentstream";_gc "github.com/unidoc/unipdf/v3/contentstream/draw";_d "github.com/unidoc/unipdf/v3/core";_ge "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_ge .PdfPage )error {_a ,_de :=page .GetMediaBox ();if _de !=nil {return _de ;};_c ,_de :=page .GetRotate ();if _de !=nil {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_de .Error ());
};_f :=_c %360!=0&&_c %90==0;_a .Normalize ();_fd ,_gb ,_aa ,_ca :=_a .Llx ,_a .Lly ,_a .Width (),_a .Height ();_ged :=_fd !=0||_gb !=0;if !_f &&!_ged {return nil ;};_gf :=func (_cc ,_fa ,_ag float64 )_gc .BoundingBox {return _gc .Path {Points :[]_gc .Point {_gc .NewPoint (0,0).Rotate (_ag ),_gc .NewPoint (_cc ,0).Rotate (_ag ),_gc .NewPoint (0,_fa ).Rotate (_ag ),_gc .NewPoint (_cc ,_fa ).Rotate (_ag )}}.GetBoundingBox ();
};_ce :=_b .NewContentCreator ();var _eg float64 ;if _f {_eg =-float64 (_c );_gea :=_gf (_aa ,_ca ,_eg );_ce .Translate ((_gea .Width -_aa )/2+_aa /2,(_gea .Height -_ca )/2+_ca /2);_ce .RotateDeg (_eg );_ce .Translate (-_aa /2,-_ca /2);_aa ,_ca =_gea .Width ,_gea .Height ;
};if _ged {_ce .Translate (-_fd ,-_gb );};_cad :=_ce .Operations ();_da ,_de :=_d .MakeStream (_cad .Bytes (),_d .NewFlateEncoder ());if _de !=nil {return _de ;};_bc :=_d .MakeArray (_da );_bc .Append (page .GetContentStreamObjs ()...);*_a =_ge .PdfRectangle {Urx :_aa ,Ury :_ca };
if _bb :=page .CropBox ;_bb !=nil {_bb .Normalize ();_cf ,_gbf ,_ab ,_bcg :=_bb .Llx -_fd ,_bb .Lly -_gb ,_bb .Width (),_bb .Height ();if _f {_ee :=_gf (_ab ,_bcg ,_eg );_ab ,_bcg =_ee .Width ,_ee .Height ;};*_bb =_ge .PdfRectangle {Llx :_cf ,Lly :_gbf ,Urx :_cf +_ab ,Ury :_gbf +_bcg };
};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_eg ,_cad ,_a );page .Contents =_bc ;page .Rotate =nil ;
return nil ;};