//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_a "github.com/unidoc/unipdf/v3/common";_fa "github.com/unidoc/unipdf/v3/contentstream";_f "github.com/unidoc/unipdf/v3/contentstream/draw";_ac "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_d .PdfPage )error {_ce ,_ff :=page .GetMediaBox ();if _ff !=nil {return _ff ;};_e :=page .Rotate ;_eg :=_e !=nil &&*_e %360!=0&&*_e %90==0;_ce .Normalize ();_dg ,_ed ,_ad ,_aa :=_ce .Llx ,_ce .Lly ,_ce .Width (),_ce .Height ();
_ag :=_dg !=0||_ed !=0;if !_eg &&!_ag {return nil ;};_b :=func (_cc ,_ae ,_ee float64 )_f .BoundingBox {return _f .Path {Points :[]_f .Point {_f .NewPoint (0,0).Rotate (_ee ),_f .NewPoint (_cc ,0).Rotate (_ee ),_f .NewPoint (0,_ae ).Rotate (_ee ),_f .NewPoint (_cc ,_ae ).Rotate (_ee )}}.GetBoundingBox ();
};_ab :=_fa .NewContentCreator ();var _abf float64 ;if _eg {_abf =-float64 (*page .Rotate );_bg :=_b (_ad ,_aa ,_abf );_ab .Translate ((_bg .Width -_ad )/2+_ad /2,(_bg .Height -_aa )/2+_aa /2);_ab .RotateDeg (_abf );_ab .Translate (-_ad /2,-_aa /2);_ad ,_aa =_bg .Width ,_bg .Height ;
};if _ag {_ab .Translate (-_dg ,-_ed );};_bgg :=_ab .Operations ();_cd ,_ff :=_ac .MakeStream (_bgg .Bytes (),_ac .NewFlateEncoder ());if _ff !=nil {return _ff ;};_aef :=_ac .MakeArray (_cd );_aef .Append (page .GetContentStreamObjs ()...);*_ce =_d .PdfRectangle {Urx :_ad ,Ury :_aa };
if _fb :=page .CropBox ;_fb !=nil {_fb .Normalize ();_ea ,_agf ,_bc ,_abe :=_fb .Llx -_dg ,_fb .Lly -_ed ,_fb .Width (),_fb .Height ();if _eg {_g :=_b (_bc ,_abe ,_abf );_bc ,_abe =_g .Width ,_g .Height ;};*_fb =_d .PdfRectangle {Llx :_ea ,Lly :_agf ,Urx :_ea +_bc ,Ury :_agf +_abe };
};_a .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_abf ,_bgg ,_ce );page .Contents =_aef ;page .Rotate =nil ;
return nil ;};