//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_ec "github.com/unidoc/unipdf/v3/contentstream";_c "github.com/unidoc/unipdf/v3/contentstream/draw";_aa "github.com/unidoc/unipdf/v3/core";_eg "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_eg .PdfPage )error {_cb ,_ed :=page .GetMediaBox ();if _ed !=nil {return _ed ;};_f ,_ed :=page .GetRotate ();if _ed !=nil {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_ed .Error ());
};_ee :=_f %360!=0&&_f %90==0;_cb .Normalize ();_ce ,_fb ,_ca ,_d :=_cb .Llx ,_cb .Lly ,_cb .Width (),_cb .Height ();_ecg :=_ce !=0||_fb !=0;if !_ee &&!_ecg {return nil ;};_b :=func (_db ,_fbb ,_cg float64 )_c .BoundingBox {return _c .Path {Points :[]_c .Point {_c .NewPoint (0,0).Rotate (_cg ),_c .NewPoint (_db ,0).Rotate (_cg ),_c .NewPoint (0,_fbb ).Rotate (_cg ),_c .NewPoint (_db ,_fbb ).Rotate (_cg )}}.GetBoundingBox ();
};_cf :=_ec .NewContentCreator ();var _fbg float64 ;if _ee {_fbg =-float64 (_f );_ad :=_b (_ca ,_d ,_fbg );_cf .Translate ((_ad .Width -_ca )/2+_ca /2,(_ad .Height -_d )/2+_d /2);_cf .RotateDeg (_fbg );_cf .Translate (-_ca /2,-_d /2);_ca ,_d =_ad .Width ,_ad .Height ;
};if _ecg {_cf .Translate (-_ce ,-_fb );};_ba :=_cf .Operations ();_fe ,_ed :=_aa .MakeStream (_ba .Bytes (),_aa .NewFlateEncoder ());if _ed !=nil {return _ed ;};_fg :=_aa .MakeArray (_fe );_fg .Append (page .GetContentStreamObjs ()...);*_cb =_eg .PdfRectangle {Urx :_ca ,Ury :_d };
if _aae :=page .CropBox ;_aae !=nil {_aae .Normalize ();_da ,_cd ,_feb ,_ff :=_aae .Llx -_ce ,_aae .Lly -_fb ,_aae .Width (),_aae .Height ();if _ee {_edb :=_b (_feb ,_ff ,_fbg );_feb ,_ff =_edb .Width ,_edb .Height ;};*_aae =_eg .PdfRectangle {Llx :_da ,Lly :_cd ,Urx :_da +_feb ,Ury :_cd +_ff };
};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_fbg ,_ba ,_cb );page .Contents =_fg ;page .Rotate =nil ;
return nil ;};