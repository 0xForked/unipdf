//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/contentstream";_eb "github.com/unidoc/unipdf/v3/contentstream/draw";_f "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_d .PdfPage )error {_cf ,_gf :=page .GetMediaBox ();if _gf !=nil {return _gf ;};_gd :=page .Rotate ;_ec :=_gd !=nil &&*_gd %360!=0&&*_gd %90==0;_cf .Normalize ();_fb ,_cb ,_gfg ,_b :=_cf .Llx ,_cf .Lly ,_cf .Width (),_cf .Height ();
_ff :=_fb !=0||_cb !=0;if !_ec &&!_ff {return nil ;};_ee :=func (_a ,_ea ,_ce float64 )_eb .BoundingBox {return _eb .Path {Points :[]_eb .Point {_eb .NewPoint (0,0).Rotate (_ce ),_eb .NewPoint (_a ,0).Rotate (_ce ),_eb .NewPoint (0,_ea ).Rotate (_ce ),_eb .NewPoint (_a ,_ea ).Rotate (_ce )}}.GetBoundingBox ();
};_ebd :=_c .NewContentCreator ();var _ac float64 ;if _ec {_ac =-float64 (*page .Rotate );_aca :=_ee (_gfg ,_b ,_ac );_ebd .Translate ((_aca .Width -_gfg )/2+_gfg /2,(_aca .Height -_b )/2+_b /2);_ebd .RotateDeg (_ac );_ebd .Translate (-_gfg /2,-_b /2);
_gfg ,_b =_aca .Width ,_aca .Height ;};if _ff {_ebd .Translate (-_fb ,-_cb );};_db :=_ebd .Operations ();_gfgg ,_gf :=_f .MakeStream (_db .Bytes (),_f .NewFlateEncoder ());if _gf !=nil {return _gf ;};_ca :=_f .MakeArray (_gfgg );_ca .Append (page .GetContentStreamObjs ()...);
*_cf =_d .PdfRectangle {Urx :_gfg ,Ury :_b };if _gff :=page .CropBox ;_gff !=nil {_gff .Normalize ();_dbf ,_fe ,_ad ,_gdg :=_gff .Llx -_fb ,_gff .Lly -_cb ,_gff .Width (),_gff .Height ();if _ec {_bc :=_ee (_ad ,_gdg ,_ac );_ad ,_gdg =_bc .Width ,_bc .Height ;
};*_gff =_d .PdfRectangle {Llx :_dbf ,Lly :_fe ,Urx :_dbf +_ad ,Ury :_fe +_gdg };};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ac ,_db ,_cf );
page .Contents =_ca ;page .Rotate =nil ;return nil ;};