//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_ae "github.com/unidoc/unipdf/v3/contentstream";_ad "github.com/unidoc/unipdf/v3/contentstream/draw";_eg "github.com/unidoc/unipdf/v3/core";_a "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_a .PdfPage )error {_c ,_ee :=page .GetMediaBox ();if _ee !=nil {return _ee ;};_egd ,_ee :=page .GetRotate ();if _ee !=nil {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_ee .Error ());
};_ac :=_egd %360!=0&&_egd %90==0;_c .Normalize ();_g ,_ga ,_d ,_gb :=_c .Llx ,_c .Lly ,_c .Width (),_c .Height ();_da :=_g !=0||_ga !=0;if !_ac &&!_da {return nil ;};_eb :=func (_ag ,_gf ,_ec float64 )_ad .BoundingBox {return _ad .Path {Points :[]_ad .Point {_ad .NewPoint (0,0).Rotate (_ec ),_ad .NewPoint (_ag ,0).Rotate (_ec ),_ad .NewPoint (0,_gf ).Rotate (_ec ),_ad .NewPoint (_ag ,_gf ).Rotate (_ec )}}.GetBoundingBox ();
};_gba :=_ae .NewContentCreator ();var _bb float64 ;if _ac {_bb =-float64 (_egd );_db :=_eb (_d ,_gb ,_bb );_gba .Translate ((_db .Width -_d )/2+_d /2,(_db .Height -_gb )/2+_gb /2);_gba .RotateDeg (_bb );_gba .Translate (-_d /2,-_gb /2);_d ,_gb =_db .Width ,_db .Height ;
};if _da {_gba .Translate (-_g ,-_ga );};_gc :=_gba .Operations ();_ecc ,_ee :=_eg .MakeStream (_gc .Bytes (),_eg .NewFlateEncoder ());if _ee !=nil {return _ee ;};_be :=_eg .MakeArray (_ecc );_be .Append (page .GetContentStreamObjs ()...);*_c =_a .PdfRectangle {Urx :_d ,Ury :_gb };
if _f :=page .CropBox ;_f !=nil {_f .Normalize ();_ce ,_aeb ,_gaf ,_ebb :=_f .Llx -_g ,_f .Lly -_ga ,_f .Width (),_f .Height ();if _ac {_bee :=_eb (_gaf ,_ebb ,_bb );_gaf ,_ebb =_bee .Width ,_bee .Height ;};*_f =_a .PdfRectangle {Llx :_ce ,Lly :_aeb ,Urx :_ce +_gaf ,Ury :_aeb +_ebb };
};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_bb ,_gc ,_c );page .Contents =_be ;page .Rotate =nil ;
return nil ;};