//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_a "fmt";_df "io";_f "os";_g "path/filepath";_cb "runtime";_c "time";);

// Debug logs debug message.
func (_be ConsoleLogger )Debug (format string ,args ...interface{}){if _be .LogLevel >=LogLevelDebug {_cc :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_be .output (_f .Stdout ,_cc ,format ,args ...);};};

// Error logs error message.
func (_ad WriterLogger )Error (format string ,args ...interface{}){if _ad .LogLevel >=LogLevelError {_bdd :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ad .logToWriter (_ad .Output ,_bdd ,format ,args ...);};};const _dba =6;

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Debug logs debug message.
func (_dag WriterLogger )Debug (format string ,args ...interface{}){if _dag .LogLevel >=LogLevelDebug {_fec :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_dag .logToWriter (_dag .Output ,_fec ,format ,args ...);};};func _dd (_dee _df .Writer ,_fecg string ,_feea string ,_db ...interface{}){_ ,_ggc ,_bgd ,_aag :=_cb .Caller (3);
if !_aag {_ggc ="\u003f\u003f\u003f";_bgd =0;}else {_ggc =_g .Base (_ggc );};_ddb :=_a .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_fecg ,_ggc ,_bgd )+_feea +"\u000a";_a .Fprintf (_dee ,_ddb ,_db ...);};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Warning logs warning message.
func (_dc ConsoleLogger )Warning (format string ,args ...interface{}){if _dc .LogLevel >=LogLevelWarning {_eg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_dc .output (_f .Stdout ,_eg ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Warning logs warning message.
func (_ae WriterLogger )Warning (format string ,args ...interface{}){if _ae .LogLevel >=LogLevelWarning {_fca :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ae .logToWriter (_ae .Output ,_fca ,format ,args ...);};};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _df .Writer )*WriterLogger {_gbe :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_gbe ;};const _dbaa =30;

// DummyLogger does nothing.
type DummyLogger struct{};

// Info logs info message.
func (_ab WriterLogger )Info (format string ,args ...interface{}){if _ab .LogLevel >=LogLevelInfo {_gfc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ab .logToWriter (_ab .Output ,_gfc ,format ,args ...);};};var Log Logger =DummyLogger {};

// Notice logs notice message.
func (_ead ConsoleLogger )Notice (format string ,args ...interface{}){if _ead .LogLevel >=LogLevelNotice {_fa :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ead .output (_f .Stdout ,_fa ,format ,args ...);};};

// Trace logs trace message.
func (_cd ConsoleLogger )Trace (format string ,args ...interface{}){if _cd .LogLevel >=LogLevelTrace {_gb :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_cd .output (_f .Stdout ,_gb ,format ,args ...);};};const _daf =2023;var ReleasedAt =_c .Date (_daf ,_dba ,_aga ,_ef ,_dbaa ,0,0,_c .UTC );


// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const _ag ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _df .Writer ;};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Error logs error message.
func (_bg ConsoleLogger )Error (format string ,args ...interface{}){if _bg .LogLevel >=LogLevelError {_fc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bg .output (_f .Stdout ,_fc ,format ,args ...);};};func (_cbc WriterLogger )logToWriter (_bf _df .Writer ,_ce string ,_dfd string ,_dce ...interface{}){_dd (_bf ,_ce ,_dfd ,_dce );
};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_bd ConsoleLogger )IsLogLevel (level LogLevel )bool {return _bd .LogLevel >=level };

// Notice logs notice message.
func (_dae WriterLogger )Notice (format string ,args ...interface{}){if _dae .LogLevel >=LogLevelNotice {_bga :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_dae .logToWriter (_dae .Output ,_bga ,format ,args ...);};};const _ef =15;

// Trace logs trace message.
func (_fcag WriterLogger )Trace (format string ,args ...interface{}){if _fcag .LogLevel >=LogLevelTrace {_gc :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fcag .logToWriter (_fcag .Output ,_gc ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const Version ="\u0033\u002e\u0034\u0037\u002e\u0030";

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_gdf WriterLogger )IsLogLevel (level LogLevel )bool {return _gdf .LogLevel >=level };

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _c .Time )string {return t .Format (_ag )+"\u0020\u0055\u0054\u0043"};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_da string ,_e ...interface{});Warning (_ea string ,_gf ...interface{});Notice (_af string ,_fe ...interface{});Info (_de string ,_eab ...interface{});Debug (_b string ,_bb ...interface{});Trace (_cf string ,_fee ...interface{});
IsLogLevel (_gd LogLevel )bool ;};

// Info logs info message.
func (_bbg ConsoleLogger )Info (format string ,args ...interface{}){if _bbg .LogLevel >=LogLevelInfo {_aa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bbg .output (_f .Stdout ,_aa ,format ,args ...);};};func (_gg ConsoleLogger )output (_dcc _df .Writer ,_ca string ,_ded string ,_bc ...interface{}){_dd (_dcc ,_ca ,_ded ,_bc ...);
};const _aga =30;