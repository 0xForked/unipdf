//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_c "fmt";_bc "io";_fe "os";_a "path/filepath";_f "runtime";_bg "time";);

// Notice logs notice message.
func (_dd ConsoleLogger )Notice (format string ,args ...interface{}){if _dd .LogLevel >=LogLevelNotice {_gfg :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_dd .output (_fe .Stdout ,_gfg ,format ,args ...);};};

// Error logs error message.
func (_ae ConsoleLogger )Error (format string ,args ...interface{}){if _ae .LogLevel >=LogLevelError {_gf :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ae .output (_fe .Stdout ,_gf ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _bg .Time )string {return t .Format (_bb )+"\u0020\u0055\u0054\u0043"};

// Trace logs trace message.
func (_fb WriterLogger )Trace (format string ,args ...interface{}){if _fb .LogLevel >=LogLevelTrace {_gdb :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fb .logToWriter (_fb .Output ,_gdb ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const _beg =25;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};const _dbg =23;func (_gbf ConsoleLogger )output (_dba _bc .Writer ,_dde string ,_cb string ,_ff ...interface{}){_cga (_dba ,_dde ,_cb ,_ff ...);};

// Debug logs debug message.
func (_afa WriterLogger )Debug (format string ,args ...interface{}){if _afa .LogLevel >=LogLevelDebug {_bd :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_afa .logToWriter (_afa .Output ,_bd ,format ,args ...);};};func _cga (_bcd _bc .Writer ,_cgc string ,_bf string ,_agfc ...interface{}){_ ,_gdbf ,_ab ,_gc :=_f .Caller (3);if !_gc {_gdbf ="\u003f\u003f\u003f";_ab =0;}else {_gdbf =_a .Base (_gdbf );};_acd :=_c .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_cgc ,_gdbf ,_ab )+_bf +"\u000a";_c .Fprintf (_bcd ,_acd ,_agfc ...);};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _bc .Writer )*WriterLogger {_agf :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_agf ;};const _aac =2021;

// Debug logs debug message.
func (_bcb ConsoleLogger )Debug (format string ,args ...interface{}){if _bcb .LogLevel >=LogLevelDebug {_ag :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_bcb .output (_fe .Stdout ,_ag ,format ,args ...);};};var ReleasedAt =_bg .Date (_aac ,_gbg ,_beg ,_dbg ,_gcf ,0,0,_bg .UTC );

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _bc .Writer ;};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_feb string ,_g ...interface{});Warning (_bga string ,_d ...interface{});Notice (_e string ,_gd ...interface{});Info (_dc string ,_fc ...interface{});Debug (_ec string ,_gb ...interface{});Trace (_ca string ,_fec ...interface{});IsLogLevel (_db LogLevel )bool ;};const _gbg =1;

// Info logs info message.
func (_ac WriterLogger )Info (format string ,args ...interface{}){if _ac .LogLevel >=LogLevelInfo {_fd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ac .logToWriter (_ac .Output ,_fd ,format ,args ...);};};func (_cbe WriterLogger )logToWriter (_dcg _bc .Writer ,_aa string ,_gbe string ,_bcbc ...interface{}){_cga (_dcg ,_aa ,_gbe ,_bcbc );};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Warning logs warning message.
func (_ef ConsoleLogger )Warning (format string ,args ...interface{}){if _ef .LogLevel >=LogLevelWarning {_af :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ef .output (_fe .Stdout ,_af ,format ,args ...);};};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};var Log Logger =DummyLogger {};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_fg ConsoleLogger )IsLogLevel (level LogLevel )bool {return _fg .LogLevel >=level };

// Trace logs trace message.
func (_ee ConsoleLogger )Trace (format string ,args ...interface{}){if _ee .LogLevel >=LogLevelTrace {_ed :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ee .output (_fe .Stdout ,_ed ,format ,args ...);};};const Version ="\u0033\u002e\u0031\u0038\u002e\u0030";

// DummyLogger does nothing.
type DummyLogger struct{};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cg WriterLogger )IsLogLevel (level LogLevel )bool {return _cg .LogLevel >=level };

// Error logs error message.
func (_eca WriterLogger )Error (format string ,args ...interface{}){if _eca .LogLevel >=LogLevelError {_ddc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_eca .logToWriter (_eca .Output ,_ddc ,format ,args ...);};};

// Warning logs warning message.
func (_gfa WriterLogger )Warning (format string ,args ...interface{}){if _gfa .LogLevel >=LogLevelWarning {_fa :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_gfa .logToWriter (_gfa .Output ,_fa ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const _bb ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";const _gcf =30;

// Info logs info message.
func (_dbd ConsoleLogger )Info (format string ,args ...interface{}){if _dbd .LogLevel >=LogLevelInfo {_feg :="\u005bI\u004e\u0046\u004f\u005d\u0020";_dbd .output (_fe .Stdout ,_feg ,format ,args ...);};};

// Notice logs notice message.
func (_be WriterLogger )Notice (format string ,args ...interface{}){if _be .LogLevel >=LogLevelNotice {_aed :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_be .logToWriter (_be .Output ,_aed ,format ,args ...);};};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};