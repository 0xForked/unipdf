//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_b "fmt";_fc "io";_f "os";_c "path/filepath";_e "runtime";_g "time";);

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Warning logs warning message.
func (_df WriterLogger )Warning (format string ,args ...interface{}){if _df .LogLevel >=LogLevelWarning {_bgd :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_df .logToWriter (_df .Output ,_bgd ,format ,args ...);};};

// Trace logs trace message.
func (_cf ConsoleLogger )Trace (format string ,args ...interface{}){if _cf .LogLevel >=LogLevelTrace {_dac :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_cf .output (_f .Stdout ,_dac ,format ,args ...);};};const _ad =9;

// Error logs error message.
func (_bgc ConsoleLogger )Error (format string ,args ...interface{}){if _bgc .LogLevel >=LogLevelError {_fb :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bgc .output (_f .Stdout ,_fb ,format ,args ...);};};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Warning logs warning message.
func (_bac ConsoleLogger )Warning (format string ,args ...interface{}){if _bac .LogLevel >=LogLevelWarning {_fcb :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bac .output (_f .Stdout ,_fcb ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;func _fbb (_gaac _fc .Writer ,_bed string ,_bdd string ,_dc ...interface{}){_ ,_edf ,_ebe ,_cfb :=_e .Caller (3);if !_cfb {_edf ="\u003f\u003f\u003f";_ebe =0;}else {_edf =_c .Base (_edf );};_gfe :=_b .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_bed ,_edf ,_ebe )+_bdd +"\u000a";_b .Fprintf (_gaac ,_gfe ,_dc ...);};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _fc .Writer )*WriterLogger {_dg :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_dg ;};func UtcTimeFormat (t _g .Time )string {return t .Format (_cag )+"\u0020\u0055\u0054\u0043"};

// DummyLogger does nothing.
type DummyLogger struct{};

// Notice logs notice message.
func (_ab WriterLogger )Notice (format string ,args ...interface{}){if _ab .LogLevel >=LogLevelNotice {_fde :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ab .logToWriter (_ab .Output ,_fde ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};const _aed =8;

// Trace logs trace message.
func (_fbf WriterLogger )Trace (format string ,args ...interface{}){if _fbf .LogLevel >=LogLevelTrace {_ae :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fbf .logToWriter (_fbf .Output ,_ae ,format ,args ...);};};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Debug logs debug message.
func (_fd ConsoleLogger )Debug (format string ,args ...interface{}){if _fd .LogLevel >=LogLevelDebug {_db :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fd .output (_f .Stdout ,_db ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_bfgf WriterLogger )IsLogLevel (level LogLevel )bool {return _bfgf .LogLevel >=level };const _dbg =2020;

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_d string ,_bb ...interface{});Warning (_ga string ,_da ...interface{});Notice (_fa string ,_eg ...interface{});Info (_fg string ,_bg ...interface{});Debug (_cb string ,_ba ...interface{});Trace (_bd string ,_bf ...interface{});IsLogLevel (_eb LogLevel )bool ;};

// Info logs info message.
func (_ge WriterLogger )Info (format string ,args ...interface{}){if _ge .LogLevel >=LogLevelInfo {_de :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ge .logToWriter (_ge .Output ,_de ,format ,args ...);};};

// Debug logs debug message.
func (_fe WriterLogger )Debug (format string ,args ...interface{}){if _fe .LogLevel >=LogLevelDebug {_gd :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fe .logToWriter (_fe .Output ,_gd ,format ,args ...);};};const _dge =50;

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_egg ConsoleLogger )IsLogLevel (level LogLevel )bool {return _egg .LogLevel >=level };var ReleasedAt =_g .Date (_dbg ,_ad ,_gbg ,_aed ,_dge ,0,0,_g .UTC );

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};var Log Logger =DummyLogger {};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _fc .Writer ;};func (_ed ConsoleLogger )output (_bfg _fc .Writer ,_ce string ,_ca string ,_fgg ...interface{}){_fbb (_bfg ,_ce ,_ca ,_fgg ...);};const Version ="\u0033\u002e\u0031\u0031\u002e\u0031";

// Error logs error message.
func (_be WriterLogger )Error (format string ,args ...interface{}){if _be .LogLevel >=LogLevelError {_dga :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_be .logToWriter (_be .Output ,_dga ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Info logs info message.
func (_cbb ConsoleLogger )Info (format string ,args ...interface{}){if _cbb .LogLevel >=LogLevelInfo {_ef :="\u005bI\u004e\u0046\u004f\u005d\u0020";_cbb .output (_f .Stdout ,_ef ,format ,args ...);};};const _gbg =14;const _cag ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";func (_gaa WriterLogger )logToWriter (_bc _fc .Writer ,_gf string ,_abc string ,_ea ...interface{}){_fbb (_bc ,_gf ,_abc ,_ea );};

// Notice logs notice message.
func (_gb ConsoleLogger )Notice (format string ,args ...interface{}){if _gb .LogLevel >=LogLevelNotice {_af :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_gb .output (_f .Stdout ,_af ,format ,args ...);};};