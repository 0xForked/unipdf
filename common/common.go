//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_f "fmt";_gf "io";_eb "os";_d "path/filepath";_fa "runtime";_g "time";);

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Debug logs debug message.
func (_ff WriterLogger )Debug (format string ,args ...interface{}){if _ff .LogLevel >=LogLevelDebug {_ddb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ff .logToWriter (_ff .Output ,_ddb ,format ,args ...);};};var Log Logger =DummyLogger {};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};const _eea =19;

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };const _beg =30;

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const _fef ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };func _gfga (_cbdc _gf .Writer ,_gb string ,_aed string ,_gd ...interface{}){_ ,_gg ,_ad ,_fc :=_fa .Caller (3);if !_fc {_gg ="\u003f\u003f\u003f";_ad =0;}else {_gg =_d .Base (_gg );};_bc :=_f .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_gb ,_gg ,_ad )+_aed +"\u000a";
_f .Fprintf (_cbdc ,_bc ,_gd ...);};var ReleasedAt =_g .Date (_cd ,_ge ,_gee ,_eea ,_beg ,0,0,_g .UTC );

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// DummyLogger does nothing.
type DummyLogger struct{};

// Info logs info message.
func (_db WriterLogger )Info (format string ,args ...interface{}){if _db .LogLevel >=LogLevelInfo {_gfd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_db .logToWriter (_db .Output ,_gfd ,format ,args ...);};};

// Notice logs notice message.
func (_bb ConsoleLogger )Notice (format string ,args ...interface{}){if _bb .LogLevel >=LogLevelNotice {_fdg :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bb .output (_eb .Stdout ,_fdg ,format ,args ...);};};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};func (_dgc ConsoleLogger )output (_fac _gf .Writer ,_bge string ,_aef string ,_abe ...interface{}){_gfga (_fac ,_bge ,_aef ,_abe ...);};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Trace logs trace message.
func (_ec ConsoleLogger )Trace (format string ,args ...interface{}){if _ec .LogLevel >=LogLevelTrace {_cf :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ec .output (_eb .Stdout ,_cf ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cbb WriterLogger )IsLogLevel (level LogLevel )bool {return _cbb .LogLevel >=level };

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _g .Time )string {return t .Format (_fef )+"\u0020\u0055\u0054\u0043"};const _gee =10;

// Trace logs trace message.
func (_be WriterLogger )Trace (format string ,args ...interface{}){if _be .LogLevel >=LogLevelTrace {_fe :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_be .logToWriter (_be .Output ,_fe ,format ,args ...);};};

// Notice logs notice message.
func (_eba WriterLogger )Notice (format string ,args ...interface{}){if _eba .LogLevel >=LogLevelNotice {_cbd :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_eba .logToWriter (_eba .Output ,_cbd ,format ,args ...);};};

// Error logs error message.
func (_dd ConsoleLogger )Error (format string ,args ...interface{}){if _dd .LogLevel >=LogLevelError {_ea :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_dd .output (_eb .Stdout ,_ea ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;
LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_abg ConsoleLogger )IsLogLevel (level LogLevel )bool {return _abg .LogLevel >=level };

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _gf .Writer )*WriterLogger {_eca :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_eca ;};const _ge =5;

// Debug logs debug message.
func (_bg ConsoleLogger )Debug (format string ,args ...interface{}){if _bg .LogLevel >=LogLevelDebug {_ca :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_bg .output (_eb .Stdout ,_ca ,format ,args ...);};};

// Info logs info message.
func (_ba ConsoleLogger )Info (format string ,args ...interface{}){if _ba .LogLevel >=LogLevelInfo {_cb :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ba .output (_eb .Stdout ,_cb ,format ,args ...);};};const _cd =2021;

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_da string ,_b ...interface{});Warning (_fd string ,_a ...interface{});Notice (_ee string ,_ab ...interface{});Info (_c string ,_af ...interface{});Debug (_eg string ,_ag ...interface{});Trace (_dg string ,_ef ...interface{});
IsLogLevel (_ae LogLevel )bool ;};

// Error logs error message.
func (_afc WriterLogger )Error (format string ,args ...interface{}){if _afc .LogLevel >=LogLevelError {_ddc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_afc .logToWriter (_afc .Output ,_ddc ,format ,args ...);};};

// Warning logs warning message.
func (_dda ConsoleLogger )Warning (format string ,args ...interface{}){if _dda .LogLevel >=LogLevelWarning {_gfg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_dda .output (_eb .Stdout ,_gfg ,format ,args ...);};};const Version ="\u0033\u002e\u0032\u0035\u002e\u0030";
func (_bab WriterLogger )logToWriter (_bee _gf .Writer ,_bd string ,_fdb string ,_efa ...interface{}){_gfga (_bee ,_bd ,_fdb ,_efa );};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _gf .Writer ;};

// Warning logs warning message.
func (_aa WriterLogger )Warning (format string ,args ...interface{}){if _aa .LogLevel >=LogLevelWarning {_cfa :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_aa .logToWriter (_aa .Output ,_cfa ,format ,args ...);};};