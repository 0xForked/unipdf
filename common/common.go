//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_a "fmt";_af "io";_c "os";_g "path/filepath";_e "runtime";_bf "time";);func (_aa ConsoleLogger )output (_bge _af .Writer ,_ca string ,_fb string ,_ee ...interface{}){_cba (_bge ,_ca ,_fb ,_ee ...);};func _cba (_gac _af .Writer ,_fg string ,_ed string ,_ef ...interface{}){_ ,_agd ,_ea ,_bda :=_e .Caller (3);if !_bda {_agd ="\u003f\u003f\u003f";_ea =0;}else {_agd =_g .Base (_agd );};_ffe :=_a .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_fg ,_agd ,_ea )+_ed +"\u000a";_a .Fprintf (_gac ,_ffe ,_ef ...);};

// Info logs info message.
func (_ae ConsoleLogger )Info (format string ,args ...interface{}){if _ae .LogLevel >=LogLevelInfo {_fa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ae .output (_c .Stdout ,_fa ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Debug logs debug message.
func (_eg ConsoleLogger )Debug (format string ,args ...interface{}){if _eg .LogLevel >=LogLevelDebug {_bb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_eg .output (_c .Stdout ,_bb ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Notice logs notice message.
func (_gea ConsoleLogger )Notice (format string ,args ...interface{}){if _gea .LogLevel >=LogLevelNotice {_ac :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_gea .output (_c .Stdout ,_ac ,format ,args ...);};};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_f string ,_d ...interface{});Warning (_cb string ,_ba ...interface{});Notice (_de string ,_ag ...interface{});Info (_ec string ,_fd ...interface{});Debug (_dc string ,_ge ...interface{});Trace (_ce string ,_age ...interface{});IsLogLevel (_bg LogLevel )bool ;};

// Trace logs trace message.
func (_fdd ConsoleLogger )Trace (format string ,args ...interface{}){if _fdd .LogLevel >=LogLevelTrace {_cd :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fdd .output (_c .Stdout ,_cd ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// DummyLogger does nothing.
type DummyLogger struct{};const _df =2020;func UtcTimeFormat (t _bf .Time )string {return t .Format (_aee )+"\u0020\u0055\u0054\u0043"};const _aee ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Notice logs notice message.
func (_gb WriterLogger )Notice (format string ,args ...interface{}){if _gb .LogLevel >=LogLevelNotice {_gce :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_gb .logToWriter (_gb .Output ,_gce ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ad ConsoleLogger )IsLogLevel (level LogLevel )bool {return _ad .LogLevel >=level };

// Trace logs trace message.
func (_fbg WriterLogger )Trace (format string ,args ...interface{}){if _fbg .LogLevel >=LogLevelTrace {_eed :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fbg .logToWriter (_fbg .Output ,_eed ,format ,args ...);};};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _af .Writer ;};var ReleasedAt =_bf .Date (_df ,_ffg ,_fdc ,_bce ,_agc ,0,0,_bf .UTC );const Version ="\u0033\u002e\u0031\u0030\u002e\u0030";

// Error logs error message.
func (_bc WriterLogger )Error (format string ,args ...interface{}){if _bc .LogLevel >=LogLevelError {_cc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bc .logToWriter (_bc .Output ,_cc ,format ,args ...);};};

// Error logs error message.
func (_gc ConsoleLogger )Error (format string ,args ...interface{}){if _gc .LogLevel >=LogLevelError {_gf :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_gc .output (_c .Stdout ,_gf ,format ,args ...);};};var Log Logger =DummyLogger {};func (_bd WriterLogger )logToWriter (_bbbg _af .Writer ,_ff string ,_agf string ,_eb ...interface{}){_cba (_bbbg ,_ff ,_agf ,_eb );};

// Warning logs warning message.
func (_ece WriterLogger )Warning (format string ,args ...interface{}){if _ece .LogLevel >=LogLevelWarning {_cg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ece .logToWriter (_ece .Output ,_cg ,format ,args ...);};};const _agc =46;

// Info logs info message.
func (_ga WriterLogger )Info (format string ,args ...interface{}){if _ga .LogLevel >=LogLevelInfo {_dd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ga .logToWriter (_ga .Output ,_dd ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Debug logs debug message.
func (_cbg WriterLogger )Debug (format string ,args ...interface{}){if _cbg .LogLevel >=LogLevelDebug {_bbc :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_cbg .logToWriter (_cbg .Output ,_bbc ,format ,args ...);};};const _bce =17;

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};const _fdc =27;

// Warning logs warning message.
func (_ada ConsoleLogger )Warning (format string ,args ...interface{}){if _ada .LogLevel >=LogLevelWarning {_bfd :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ada .output (_c .Stdout ,_bfd ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_da WriterLogger )IsLogLevel (level LogLevel )bool {return _da .LogLevel >=level };

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};const _ffg =8;

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _af .Writer )*WriterLogger {_bbb :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_bbb ;};