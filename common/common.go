//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_b "fmt";_dg "io";_dc "os";_cg "path/filepath";_c "runtime";_d "time";);

// Notice logs notice message.
func (_cge ConsoleLogger )Notice (format string ,args ...interface{}){if _cge .LogLevel >=LogLevelNotice {_gc :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_cge .output (_dc .Stdout ,_gc ,format ,args ...);};};const _bga =2021;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Error logs error message.
func (_cd ConsoleLogger )Error (format string ,args ...interface{}){if _cd .LogLevel >=LogLevelError {_ed :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_cd .output (_dc .Stdout ,_ed ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;
LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_cc string ,_df ...interface{});Warning (_af string ,_de ...interface{});Notice (_f string ,_ba ...interface{});Info (_dec string ,_dd ...interface{});Debug (_aa string ,_e ...interface{});Trace (_fe string ,_cf ...interface{});
IsLogLevel (_bg LogLevel )bool ;};func (_be WriterLogger )logToWriter (_fbg _dg .Writer ,_fddg string ,_fa string ,_beg ...interface{}){_gf (_fbg ,_fddg ,_fa ,_beg );};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _d .Time )string {return t .Format (_bad )+"\u0020\u0055\u0054\u0043"};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_fea ConsoleLogger )IsLogLevel (level LogLevel )bool {return _fea .LogLevel >=level };const _bad ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};const _ddc =4;

// Notice logs notice message.
func (_fb WriterLogger )Notice (format string ,args ...interface{}){if _fb .LogLevel >=LogLevelNotice {_dfc :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_fb .logToWriter (_fb .Output ,_dfc ,format ,args ...);};};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Info logs info message.
func (_fdd WriterLogger )Info (format string ,args ...interface{}){if _fdd .LogLevel >=LogLevelInfo {_bgb :="\u005bI\u004e\u0046\u004f\u005d\u0020";_fdd .logToWriter (_fdd .Output ,_bgb ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};func (_fg ConsoleLogger )output (_gaa _dg .Writer ,_gb string ,_ca string ,_db ...interface{}){_gf (_gaa ,_gb ,_ca ,_db ...);};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_da WriterLogger )IsLogLevel (level LogLevel )bool {return _da .LogLevel >=level };

// Warning logs warning message.
func (_ef ConsoleLogger )Warning (format string ,args ...interface{}){if _ef .LogLevel >=LogLevelWarning {_g :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ef .output (_dc .Stdout ,_g ,format ,args ...);};};

// Error logs error message.
func (_gba WriterLogger )Error (format string ,args ...interface{}){if _gba .LogLevel >=LogLevelError {_ae :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_gba .logToWriter (_gba .Output ,_ae ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Debug logs debug message.
func (_ea WriterLogger )Debug (format string ,args ...interface{}){if _ea .LogLevel >=LogLevelDebug {_ec :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ea .logToWriter (_ea .Output ,_ec ,format ,args ...);};};

// Info logs info message.
func (_aac ConsoleLogger )Info (format string ,args ...interface{}){if _aac .LogLevel >=LogLevelInfo {_fd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_aac .output (_dc .Stdout ,_fd ,format ,args ...);};};func _gf (_bf _dg .Writer ,_ce string ,_ede string ,_egb ...interface{}){_ ,_ddb ,_ebf ,_add :=_c .Caller (3);
if !_add {_ddb ="\u003f\u003f\u003f";_ebf =0;}else {_ddb =_cg .Base (_ddb );};_ccd :=_b .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_ce ,_ddb ,_ebf )+_ede +"\u000a";_b .Fprintf (_bf ,_ccd ,_egb ...);};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _dg .Writer )*WriterLogger {_gd :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_gd ;};

// Trace logs trace message.
func (_aef WriterLogger )Trace (format string ,args ...interface{}){if _aef .LogLevel >=LogLevelTrace {_cac :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_aef .logToWriter (_aef .Output ,_cac ,format ,args ...);};};

// Warning logs warning message.
func (_gda WriterLogger )Warning (format string ,args ...interface{}){if _gda .LogLevel >=LogLevelWarning {_eb :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_gda .logToWriter (_gda .Output ,_eb ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;const _ab =30;var ReleasedAt =_d .Date (_bga ,_ddc ,_gfg ,_ac ,_ab ,0,0,_d .UTC );

// DummyLogger does nothing.
type DummyLogger struct{};const _gfg =17;

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _dg .Writer ;};

// Trace logs trace message.
func (_ga ConsoleLogger )Trace (format string ,args ...interface{}){if _ga .LogLevel >=LogLevelTrace {_eg :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ga .output (_dc .Stdout ,_eg ,format ,args ...);};};const _ac =12;var Log Logger =DummyLogger {};
const Version ="\u0033\u002e\u0032\u0033\u002e\u0030";

// Debug logs debug message.
func (_dgg ConsoleLogger )Debug (format string ,args ...interface{}){if _dgg .LogLevel >=LogLevelDebug {_ad :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_dgg .output (_dc .Stdout ,_ad ,format ,args ...);};};