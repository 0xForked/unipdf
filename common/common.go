//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_b "fmt";_a "io";_ea "os";_g "path/filepath";_e "runtime";_ba "time";);

// DummyLogger does nothing.
type DummyLogger struct{};

// Info logs info message.
func (_bb ConsoleLogger )Info (format string ,args ...interface{}){if _bb .LogLevel >=LogLevelInfo {_gbc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bb .output (_ea .Stdout ,_gbc ,format ,args ...);};};

// Info logs info message.
func (_dbd WriterLogger )Info (format string ,args ...interface{}){if _dbd .LogLevel >=LogLevelInfo {_dc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_dbd .logToWriter (_dbd .Output ,_dc ,format ,args ...);};};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _a .Writer )*WriterLogger {_ed :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_ed ;};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};const _cf =10;

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _ba .Time )string {return t .Format (_dba )+"\u0020\u0055\u0054\u0043"};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Trace logs trace message.
func (_ff WriterLogger )Trace (format string ,args ...interface{}){if _ff .LogLevel >=LogLevelTrace {_df :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ff .logToWriter (_ff .Output ,_df ,format ,args ...);};};const _dba ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";


// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_bd string ,_ad ...interface{});Warning (_ga string ,_ab ...interface{});Notice (_d string ,_ee ...interface{});Info (_ag string ,_gb ...interface{});Debug (_eef string ,_bf ...interface{});Trace (_f string ,_ac ...interface{});
IsLogLevel (_ca LogLevel )bool ;};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _a .Writer ;};

// Warning logs warning message.
func (_bbb WriterLogger )Warning (format string ,args ...interface{}){if _bbb .LogLevel >=LogLevelWarning {_bfd :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bbb .logToWriter (_bbb .Output ,_bfd ,format ,args ...);};};

// Debug logs debug message.
func (_bea WriterLogger )Debug (format string ,args ...interface{}){if _bea .LogLevel >=LogLevelDebug {_agb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_bea .logToWriter (_bea .Output ,_agb ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_fac WriterLogger )IsLogLevel (level LogLevel )bool {return _fac .LogLevel >=level };

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};const _bfg =30;

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Notice logs notice message.
func (_gf WriterLogger )Notice (format string ,args ...interface{}){if _gf .LogLevel >=LogLevelNotice {_be :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_gf .logToWriter (_gf .Output ,_be ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Error logs error message.
func (_gba ConsoleLogger )Error (format string ,args ...interface{}){if _gba .LogLevel >=LogLevelError {_acc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_gba .output (_ea .Stdout ,_acc ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;
LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);const _fd =8;func (_cc WriterLogger )logToWriter (_cbc _a .Writer ,_facf string ,_agf string ,_de ...interface{}){_eg (_cbc ,_facf ,_agf ,_de );
};

// Error logs error message.
func (_aec WriterLogger )Error (format string ,args ...interface{}){if _aec .LogLevel >=LogLevelError {_aa :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_aec .logToWriter (_aec .Output ,_aa ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_baf ConsoleLogger )IsLogLevel (level LogLevel )bool {return _baf .LogLevel >=level };var ReleasedAt =_ba .Date (_fe ,_cf ,_fd ,_gea ,_bfg ,0,0,_ba .UTC );const Version ="\u0033\u002e\u0035\u0031\u002e\u0030";const _gea =15;

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Notice logs notice message.
func (_fa ConsoleLogger )Notice (format string ,args ...interface{}){if _fa .LogLevel >=LogLevelNotice {_db :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_fa .output (_ea .Stdout ,_db ,format ,args ...);};};const _fe =2023;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};func _eg (_bdc _a .Writer ,_cbcg string ,_dg string ,_egf ...interface{}){_ ,_abc ,_gfe ,_gfg :=_e .Caller (3);if !_gfg {_abc ="\u003f\u003f\u003f";_gfe =0;}else {_abc =_g .Base (_abc );};
_bg :=_b .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_cbcg ,_abc ,_gfe )+_dg +"\u000a";_b .Fprintf (_bdc ,_bg ,_egf ...);};

// Debug logs debug message.
func (_add ConsoleLogger )Debug (format string ,args ...interface{}){if _add .LogLevel >=LogLevelDebug {_ae :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_add .output (_ea .Stdout ,_ae ,format ,args ...);};};

// Warning logs warning message.
func (_cab ConsoleLogger )Warning (format string ,args ...interface{}){if _cab .LogLevel >=LogLevelWarning {_bc :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_cab .output (_ea .Stdout ,_bc ,format ,args ...);};};var Log Logger =DummyLogger {};


// Trace logs trace message.
func (_dbc ConsoleLogger )Trace (format string ,args ...interface{}){if _dbc .LogLevel >=LogLevelTrace {_bfe :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_dbc .output (_ea .Stdout ,_bfe ,format ,args ...);};};func (_bde ConsoleLogger )output (_age _a .Writer ,_ge string ,_cb string ,_fae ...interface{}){_eg (_age ,_ge ,_cb ,_fae ...);
};