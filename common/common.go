//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_c "fmt";_dd "io";_b "os";_e "path/filepath";_cf "runtime";_g "time";);

// DummyLogger does nothing.
type DummyLogger struct{};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_bf WriterLogger )IsLogLevel (level LogLevel )bool {return _bf .LogLevel >=level };const Version ="\u0033\u002e\u0033\u0030\u002e\u0030";

// Warning logs warning message.
func (_cg ConsoleLogger )Warning (format string ,args ...interface{}){if _cg .LogLevel >=LogLevelWarning {_aa :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_cg .output (_b .Stdout ,_aa ,format ,args ...);};};const _bce =30;

// LogLevel is the verbosity level for logging.
type LogLevel int ;func _gc (_ada _dd .Writer ,_bcg string ,_bee string ,_ef ...interface{}){_ ,_ga ,_ebga ,_ca :=_cf .Caller (3);if !_ca {_ga ="\u003f\u003f\u003f";_ebga =0;}else {_ga =_e .Base (_ga );};_bca :=_c .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_bcg ,_ga ,_ebga )+_bee +"\u000a";
_c .Fprintf (_ada ,_bca ,_ef ...);};var Log Logger =DummyLogger {};func (_gd WriterLogger )logToWriter (_fee _dd .Writer ,_ebc string ,_gfe string ,_gb ...interface{}){_gc (_fee ,_ebc ,_gfe ,_gb );};const _cbg =10;

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cc ConsoleLogger )IsLogLevel (level LogLevel )bool {return _cc .LogLevel >=level };func (_cgg ConsoleLogger )output (_be _dd .Writer ,_fg string ,_ee string ,_dba ...interface{}){_gc (_be ,_fg ,_ee ,_dba ...);};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _g .Time )string {return t .Format (_efg )+"\u0020\u0055\u0054\u0043"};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const _aeb =2021;const _bb =22;const _efg ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _dd .Writer )*WriterLogger {_ec :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_ec ;};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Warning logs warning message.
func (_gf WriterLogger )Warning (format string ,args ...interface{}){if _gf .LogLevel >=LogLevelWarning {_ff :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_gf .logToWriter (_gf .Output ,_ff ,format ,args ...);};};

// Debug logs debug message.
func (_ag ConsoleLogger )Debug (format string ,args ...interface{}){if _ag .LogLevel >=LogLevelDebug {_fd :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ag .output (_b .Stdout ,_fd ,format ,args ...);};};

// Info logs info message.
func (_cde ConsoleLogger )Info (format string ,args ...interface{}){if _cde .LogLevel >=LogLevelInfo {_fa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_cde .output (_b .Stdout ,_fa ,format ,args ...);};};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Error logs error message.
func (_eb ConsoleLogger )Error (format string ,args ...interface{}){if _eb .LogLevel >=LogLevelError {_ebg :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_eb .output (_b .Stdout ,_ebg ,format ,args ...);};};

// Notice logs notice message.
func (_bdc WriterLogger )Notice (format string ,args ...interface{}){if _bdc .LogLevel >=LogLevelNotice {_de :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bdc .logToWriter (_bdc .Output ,_de ,format ,args ...);};};var ReleasedAt =_g .Date (_aeb ,_cbg ,_bb ,_fb ,_bce ,0,0,_g .UTC );


// Debug logs debug message.
func (_df WriterLogger )Debug (format string ,args ...interface{}){if _df .LogLevel >=LogLevelDebug {_bg :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_df .logToWriter (_df .Output ,_bg ,format ,args ...);};};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Info logs info message.
func (_agf WriterLogger )Info (format string ,args ...interface{}){if _agf .LogLevel >=LogLevelInfo {_eea :="\u005bI\u004e\u0046\u004f\u005d\u0020";_agf .logToWriter (_agf .Output ,_eea ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _dd .Writer ;};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const _fb =15;

// Trace logs trace message.
func (_fe ConsoleLogger )Trace (format string ,args ...interface{}){if _fe .LogLevel >=LogLevelTrace {_bd :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fe .output (_b .Stdout ,_bd ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;
LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_dc string ,_ed ...interface{});Warning (_f string ,_cd ...interface{});Notice (_dcf string ,_a ...interface{});Info (_ba string ,_ae ...interface{});Debug (_ad string ,_ac ...interface{});Trace (_cb string ,_fc ...interface{});
IsLogLevel (_edf LogLevel )bool ;};

// Trace logs trace message.
func (_fabg WriterLogger )Trace (format string ,args ...interface{}){if _fabg .LogLevel >=LogLevelTrace {_bc :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fabg .logToWriter (_fabg .Output ,_bc ,format ,args ...);};};

// Error logs error message.
func (_fab WriterLogger )Error (format string ,args ...interface{}){if _fab .LogLevel >=LogLevelError {_fgc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_fab .logToWriter (_fab .Output ,_fgc ,format ,args ...);};};

// Notice logs notice message.
func (_ea ConsoleLogger )Notice (format string ,args ...interface{}){if _ea .LogLevel >=LogLevelNotice {_db :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ea .output (_b .Stdout ,_db ,format ,args ...);};};