//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_b "fmt";_bg "io";_bd "os";_bc "path/filepath";_a "runtime";_g "time";);

// Error logs error message.
func (_bfc ConsoleLogger )Error (format string ,args ...interface{}){if _bfc .LogLevel >=LogLevelError {_db :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bfc .output (_bd .Stdout ,_db ,format ,args ...);};};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Warning logs warning message.
func (_dbe WriterLogger )Warning (format string ,args ...interface{}){if _dbe .LogLevel >=LogLevelWarning {_dc :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_dbe .logToWriter (_dbe .Output ,_dc ,format ,args ...);};};

// Trace logs trace message.
func (_cf WriterLogger )Trace (format string ,args ...interface{}){if _cf .LogLevel >=LogLevelTrace {_edg :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_cf .logToWriter (_cf .Output ,_edg ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_dd ConsoleLogger )IsLogLevel (level LogLevel )bool {return _dd .LogLevel >=level };

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_ba string ,_c ...interface{});Warning (_d string ,_fb ...interface{});Notice (_ff string ,_bce ...interface{});Info (_bgd string ,_bf ...interface{});Debug (_bga string ,_da ...interface{});Trace (_fff string ,_ffe ...interface{});
IsLogLevel (_cg LogLevel )bool ;};

// Notice logs notice message.
func (_ee ConsoleLogger )Notice (format string ,args ...interface{}){if _ee .LogLevel >=LogLevelNotice {_ce :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ee .output (_bd .Stdout ,_ce ,format ,args ...);};};func (_cef ConsoleLogger )output (_fa _bg .Writer ,_cec string ,_ab string ,_cgf ...interface{}){_edf (_fa ,_cec ,_ab ,_cgf ...);
};const _cea =2021;func _edf (_fe _bg .Writer ,_dag string ,_bbf string ,_fg ...interface{}){_ ,_bbe ,_baa ,_fd :=_a .Caller (3);if !_fd {_bbe ="\u003f\u003f\u003f";_baa =0;}else {_bbe =_bc .Base (_bbe );};_ca :=_b .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_dag ,_bbe ,_baa )+_bbf +"\u000a";
_b .Fprintf (_fe ,_ca ,_fg ...);};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _bg .Writer ;};const _fea ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";const _fag =3;

// Info logs info message.
func (_fbe ConsoleLogger )Info (format string ,args ...interface{}){if _fbe .LogLevel >=LogLevelInfo {_fc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_fbe .output (_bd .Stdout ,_fc ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};var ReleasedAt =_g .Date (_cea ,_fag ,_aa ,_gg ,_ded ,0,0,_g .UTC );func (_bfb WriterLogger )logToWriter (_cecf _bg .Writer ,_ffb string ,_bb string ,_cc ...interface{}){_edf (_cecf ,_ffb ,_bb ,_cc );};const (LogLevelTrace LogLevel =5;
LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Error logs error message.
func (_eb WriterLogger )Error (format string ,args ...interface{}){if _eb .LogLevel >=LogLevelError {_gd :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_eb .logToWriter (_eb .Output ,_gd ,format ,args ...);};};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Debug logs debug message.
func (_ebb WriterLogger )Debug (format string ,args ...interface{}){if _ebb .LogLevel >=LogLevelDebug {_afe :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ebb .logToWriter (_ebb .Output ,_afe ,format ,args ...);};};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _bg .Writer )*WriterLogger {_de :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_de ;};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Warning logs warning message.
func (_bab ConsoleLogger )Warning (format string ,args ...interface{}){if _bab .LogLevel >=LogLevelWarning {_e :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bab .output (_bd .Stdout ,_e ,format ,args ...);};};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};const _aa =23;const _gg =13;

// DummyLogger does nothing.
type DummyLogger struct{};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_deb WriterLogger )IsLogLevel (level LogLevel )bool {return _deb .LogLevel >=level };

// Notice logs notice message.
func (_bad WriterLogger )Notice (format string ,args ...interface{}){if _bad .LogLevel >=LogLevelNotice {_dcb :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bad .logToWriter (_bad .Output ,_dcb ,format ,args ...);};};const Version ="\u0033\u002e\u0032\u0031\u002e\u0030";
var Log Logger =DummyLogger {};

// Trace logs trace message.
func (_ed ConsoleLogger )Trace (format string ,args ...interface{}){if _ed .LogLevel >=LogLevelTrace {_eed :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ed .output (_bd .Stdout ,_eed ,format ,args ...);};};

// Info logs info message.
func (_bdb WriterLogger )Info (format string ,args ...interface{}){if _bdb .LogLevel >=LogLevelInfo {_ebe :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bdb .logToWriter (_bdb .Output ,_ebe ,format ,args ...);};};

// Debug logs debug message.
func (_af ConsoleLogger )Debug (format string ,args ...interface{}){if _af .LogLevel >=LogLevelDebug {_bfa :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_af .output (_bd .Stdout ,_bfa ,format ,args ...);};};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _g .Time )string {return t .Format (_fea )+"\u0020\u0055\u0054\u0043"};const _ded =30;