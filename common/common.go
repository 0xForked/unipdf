//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_c "fmt";_d "io";_cd "os";_e "path/filepath";_a "runtime";_g "time";);

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Error logs error message.
func (_ff ConsoleLogger )Error (format string ,args ...interface{}){if _ff .LogLevel >=LogLevelError {_fe :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ff .output (_cd .Stdout ,_fe ,format ,args ...);};};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _d .Writer )*WriterLogger {_bee :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_bee ;};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Info logs info message.
func (_abc ConsoleLogger )Info (format string ,args ...interface{}){if _abc .LogLevel >=LogLevelInfo {_gd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_abc .output (_cd .Stdout ,_gd ,format ,args ...);};};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _g .Time )string {return t .Format (_ceg )+"\u0020\u0055\u0054\u0043"};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Error logs error message.
func (_da WriterLogger )Error (format string ,args ...interface{}){if _da .LogLevel >=LogLevelError {_fa :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_da .logToWriter (_da .Output ,_fa ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Warning logs warning message.
func (_cac ConsoleLogger )Warning (format string ,args ...interface{}){if _cac .LogLevel >=LogLevelWarning {_cb :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_cac .output (_cd .Stdout ,_cb ,format ,args ...);};};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Debug logs debug message.
func (_ea WriterLogger )Debug (format string ,args ...interface{}){if _ea .LogLevel >=LogLevelDebug {_faa :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ea .logToWriter (_ea .Output ,_faa ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Warning logs warning message.
func (_cacg WriterLogger )Warning (format string ,args ...interface{}){if _cacg .LogLevel >=LogLevelWarning {_dac :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_cacg .logToWriter (_cacg .Output ,_dac ,format ,args ...);};};func _ce (_fge _d .Writer ,_feg string ,_gc string ,_dgb ...interface{}){_ ,_aab ,_aae ,_efb :=_a .Caller (3);
if !_efb {_aab ="\u003f\u003f\u003f";_aae =0;}else {_aab =_e .Base (_aab );};_dad :=_c .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_feg ,_aab ,_aae )+_gc +"\u000a";_c .Fprintf (_fge ,_dad ,_dgb ...);};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };var Log Logger =DummyLogger {};

// Debug logs debug message.
func (_ega ConsoleLogger )Debug (format string ,args ...interface{}){if _ega .LogLevel >=LogLevelDebug {_fcc :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ega .output (_cd .Stdout ,_fcc ,format ,args ...);};};const _eb =2;

// Trace logs trace message.
func (_gb WriterLogger )Trace (format string ,args ...interface{}){if _gb .LogLevel >=LogLevelTrace {_ed :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gb .logToWriter (_gb .Output ,_ed ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};func (_cg WriterLogger )logToWriter (_de _d .Writer ,_aa string ,_ef string ,_fea ...interface{}){_ce (_de ,_aa ,_ef ,_fea );};

// DummyLogger does nothing.
type DummyLogger struct{};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};func (_bd ConsoleLogger )output (_ec _d .Writer ,_gg string ,_cdb string ,_ffb ...interface{}){_ce (_ec ,_gg ,_cdb ,_ffb ...);};

// Notice logs notice message.
func (_fab WriterLogger )Notice (format string ,args ...interface{}){if _fab .LogLevel >=LogLevelNotice {_cfe :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_fab .logToWriter (_fab .Output ,_cfe ,format ,args ...);};};const _gcf =15;const _ae =5;

// Notice logs notice message.
func (_fdd ConsoleLogger )Notice (format string ,args ...interface{}){if _fdd .LogLevel >=LogLevelNotice {_cdf :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_fdd .output (_cd .Stdout ,_cdf ,format ,args ...);};};

// Trace logs trace message.
func (_gf ConsoleLogger )Trace (format string ,args ...interface{}){if _gf .LogLevel >=LogLevelTrace {_cf :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gf .output (_cd .Stdout ,_cf ,format ,args ...);};};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _d .Writer ;};var ReleasedAt =_g .Date (_cef ,_eb ,_ae ,_gcf ,_dgg ,0,0,_g .UTC );

// Info logs info message.
func (_dg WriterLogger )Info (format string ,args ...interface{}){if _dg .LogLevel >=LogLevelInfo {_af :="\u005bI\u004e\u0046\u004f\u005d\u0020";_dg .logToWriter (_dg .Output ,_af ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_eg ConsoleLogger )IsLogLevel (level LogLevel )bool {return _eg .LogLevel >=level };const _cef =2022;

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_fd string ,_ab ...interface{});Warning (_ac string ,_b ...interface{});Notice (_fc string ,_ba ...interface{});Info (_dc string ,_cc ...interface{});Debug (_be string ,_ca ...interface{});Trace (_fg string ,_abb ...interface{});
IsLogLevel (_ccb LogLevel )bool ;};const Version ="\u0033\u002e\u0033\u0032\u002e\u0030";

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cdbg WriterLogger )IsLogLevel (level LogLevel )bool {return _cdbg .LogLevel >=level };

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};const _ceg ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";const _dgg =30;