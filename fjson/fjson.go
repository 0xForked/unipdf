//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_af "encoding/json";_b "github.com/unidoc/unipdf/v3/common";_bf "github.com/unidoc/unipdf/v3/core";_bb "github.com/unidoc/unipdf/v3/model";_g "io";_e "os";);type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;
ImageValue *_bb .Image `json:"-"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_fa ,_ce :=_e .Open (filePath );if _ce !=nil {return nil ,_ce ;};defer _fa .Close ();return LoadFromJSON (_fa );};

// FieldImageValues implements model.FieldImageProvider interface.
func (_ag *FieldData )FieldImageValues ()(map[string ]*_bb .Image ,error ){_abe :=make (map[string ]*_bb .Image );for _ ,_ge :=range _ag ._f {if _ge .ImageValue !=nil {_abe [_ge .Name ]=_ge .ImageValue ;};};return _abe ,nil ;};

// FieldValues implements model.FieldValueProvider interface.
func (_ggg *FieldData )FieldValues ()(map[string ]_bf .PdfObject ,error ){_aad :=make (map[string ]_bf .PdfObject );for _ ,_efd :=range _ggg ._f {if len (_efd .Value )> 0{_aad [_efd .Name ]=_bf .MakeString (_efd .Value );};};return _aad ,nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_f []fieldValue };

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _g .ReadSeeker )(*FieldData ,error ){_eda ,_d :=_bb .NewPdfReader (rs );if _d !=nil {return nil ,_d ;};if _eda .AcroForm ==nil {return nil ,nil ;};var _cd []fieldValue ;_afg :=_eda .AcroForm .AllFields ();for _ ,_dc :=range _afg {var _gb []string ;
_dd :=make (map[string ]struct{});_aa ,_db :=_dc .FullName ();if _db !=nil {return nil ,_db ;};if _fg ,_aaf :=_dc .V .(*_bf .PdfObjectString );_aaf {_cd =append (_cd ,fieldValue {Name :_aa ,Value :_fg .Decoded ()});continue ;};var _cb string ;for _ ,_bc :=range _dc .Annotations {_ceb ,_cf :=_bf .GetName (_bc .AS );
if _cf {_cb =_ceb .String ();};_df ,_cc :=_bf .GetDict (_bc .AP );if !_cc {continue ;};_gg ,_ :=_bf .GetDict (_df .Get ("\u004e"));for _ ,_gd :=range _gg .Keys (){_fd :=_gd .String ();if _ ,_ec :=_dd [_fd ];!_ec {_gb =append (_gb ,_fd );_dd [_fd ]=struct{}{};
};};_cca ,_ :=_bf .GetDict (_df .Get ("\u0044"));for _ ,_ee :=range _cca .Keys (){_fc :=_ee .String ();if _ ,_fe :=_dd [_fc ];!_fe {_gb =append (_gb ,_fc );_dd [_fc ]=struct{}{};};};};_ef :=fieldValue {Name :_aa ,Value :_cb ,Options :_gb };_cd =append (_cd ,_ef );
};_ea :=FieldData {_f :_cd };return &_ea ,nil ;};

// SetImage assign model.Image to a specific field identified by fieldName.
func (_ddb *FieldData )SetImage (fieldName string ,img *_bb .Image ,opt []string )error {_ecf :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_ddb ._f =append (_ddb ._f ,_ecf );return nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _g .Reader )(*FieldData ,error ){var _c FieldData ;_ed :=_af .NewDecoder (r ).Decode (&_c ._f );if _ed !=nil {return nil ,_ed ;};return &_c ,nil ;};

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_dcf *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_dbd ,_dg :=_e .Open (imagePath );if _dg !=nil {return _dg ;};defer _dbd .Close ();_bg ,_dg :=_bb .ImageHandling .Read (_dbd );if _dg !=nil {_b .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_dg );
return _dg ;};return _dcf .SetImage (fieldName ,_bg ,opt );};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_fag ,_ab :=_e .Open (filePath );if _ab !=nil {return nil ,_ab ;};defer _fag .Close ();return LoadFromPDF (_fag );};

// JSON returns the field data as a string in JSON format.
func (_abf FieldData )JSON ()(string ,error ){_faa ,_cdc :=_af .MarshalIndent (_abf ._f ,"","\u0020\u0020\u0020\u0020");return string (_faa ),_cdc ;};