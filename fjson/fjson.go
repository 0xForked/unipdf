//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_e "encoding/json";_ef "github.com/unidoc/unipdf/v3/core";_ac "github.com/unidoc/unipdf/v3/model";_g "io";_c "os";);

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _g .ReadSeeker )(*FieldData ,error ){_ad ,_gg :=_ac .NewPdfReader (rs );if _gg !=nil {return nil ,_gg ;};if _ad .AcroForm ==nil {return nil ,nil ;};var _fd []fieldValue ;_d :=_ad .AcroForm .AllFields ();for _ ,_df :=range _d {var _fa []string ;
_b :=make (map[string ]struct{});_cd ,_bb :=_df .FullName ();if _bb !=nil {return nil ,_bb ;};if _ag ,_db :=_df .V .(*_ef .PdfObjectString );_db {_fd =append (_fd ,fieldValue {Name :_cd ,Value :_ag .Decoded ()});continue ;};var _cf string ;for _ ,_fc :=range _df .Annotations {_ba ,_bc :=_ef .GetName (_fc .AS );
if _bc {_cf =_ba .String ();};_faa ,_ae :=_ef .GetDict (_fc .AP );if !_ae {continue ;};_dd ,_ :=_ef .GetDict (_faa .Get ("\u004e"));for _ ,_aab :=range _dd .Keys (){_ggc :=_aab .String ();if _ ,_dg :=_b [_ggc ];!_dg {_fa =append (_fa ,_ggc );_b [_ggc ]=struct{}{};
};};_fda ,_ :=_ef .GetDict (_faa .Get ("\u0044"));for _ ,_ced :=range _fda .Keys (){_af :=_ced .String ();if _ ,_cfb :=_b [_af ];!_cfb {_fa =append (_fa ,_af );_b [_af ]=struct{}{};};};};_ead :=fieldValue {Name :_cd ,Value :_cf ,Options :_fa };_fd =append (_fd ,_ead );
};_ddd :=FieldData {_ce :_fd };return &_ddd ,nil ;};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _g .Reader )(*FieldData ,error ){var _f FieldData ;_gc :=_e .NewDecoder (r ).Decode (&_f ._ce );if _gc !=nil {return nil ,_gc ;};return &_f ,nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_ce []fieldValue };

// JSON returns the field data as a string in JSON format.
func (_bg FieldData )JSON ()(string ,error ){_add ,_bbc :=_e .MarshalIndent (_bg ._ce ,"","\u0020\u0020\u0020\u0020");return string (_add ),_bbc ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_fb ,_cfd :=_c .Open (filePath );if _cfd !=nil {return nil ,_cfd ;};defer _fb .Close ();return LoadFromPDF (_fb );};

// FieldValues implements model.FieldValueProvider interface.
func (_fab *FieldData )FieldValues ()(map[string ]_ef .PdfObject ,error ){_cc :=make (map[string ]_ef .PdfObject );for _ ,_fcc :=range _fab ._ce {if len (_fcc .Value )> 0{_cc [_fcc .Name ]=_ef .MakeString (_fcc .Value );};};return _cc ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_gcf ,_gd :=_c .Open (filePath );if _gd !=nil {return nil ,_gd ;};defer _gcf .Close ();return LoadFromJSON (_gcf );};