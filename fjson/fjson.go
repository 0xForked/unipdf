//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_g "encoding/json";_ge "github.com/unidoc/unipdf/v3/common";_gc "github.com/unidoc/unipdf/v3/core";_aa "github.com/unidoc/unipdf/v3/model";_gf "io";_e "os";);

// SetImage assign model.Image to a specific field identified by fieldName.
func (_ec *FieldData )SetImage (fieldName string ,img *_aa .Image ,opt []string )error {_ecg :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_ec ._f =append (_ec ._f ,_ecg );return nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _gf .Reader )(*FieldData ,error ){var _b FieldData ;_fa :=_g .NewDecoder (r ).Decode (&_b ._f );if _fa !=nil {return nil ,_fa ;};return &_b ,nil ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _gf .ReadSeeker )(*FieldData ,error ){_d ,_bd :=_aa .NewPdfReader (rs );if _bd !=nil {return nil ,_bd ;};if _d .AcroForm ==nil {return nil ,nil ;};var _ga []fieldValue ;_eb :=_d .AcroForm .AllFields ();for _ ,_cf :=range _eb {var _gfg []string ;
_gfd :=make (map[string ]struct{});_fc ,_gfad :=_cf .FullName ();if _gfad !=nil {return nil ,_gfad ;};if _db ,_ca :=_cf .V .(*_gc .PdfObjectString );_ca {_ga =append (_ga ,fieldValue {Name :_fc ,Value :_db .Decoded ()});continue ;};var _ee string ;for _ ,_ce :=range _cf .Annotations {_ea ,_ff :=_gc .GetName (_ce .AS );
if _ff {_ee =_ea .String ();};_gee ,_af :=_gc .GetDict (_ce .AP );if !_af {continue ;};_ab ,_ :=_gc .GetDict (_gee .Get ("\u004e"));for _ ,_bb :=range _ab .Keys (){_cfe :=_bb .String ();if _ ,_cg :=_gfd [_cfe ];!_cg {_gfg =append (_gfg ,_cfe );_gfd [_cfe ]=struct{}{};
};};_gad ,_ :=_gc .GetDict (_gee .Get ("\u0044"));for _ ,_ed :=range _gad .Keys (){_cd :=_ed .String ();if _ ,_edg :=_gfd [_cd ];!_edg {_gfg =append (_gfg ,_cd );_gfd [_cd ]=struct{}{};};};};_gg :=fieldValue {Name :_fc ,Value :_ee ,Options :_gfg };_ga =append (_ga ,_gg );
};_cgc :=FieldData {_f :_ga };return &_cgc ,nil ;};

// FieldImageValues implements model.FieldImageProvider interface.
func (_dbc *FieldData )FieldImageValues ()(map[string ]*_aa .Image ,error ){_gea :=make (map[string ]*_aa .Image );for _ ,_dbe :=range _dbc ._f {if _dbe .ImageValue !=nil {_gea [_dbe .Name ]=_dbe .ImageValue ;};};return _gea ,nil ;};

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_edgc *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_gfc ,_cdd :=_e .Open (imagePath );if _cdd !=nil {return _cdd ;};defer _gfc .Close ();_ffg ,_cdd :=_aa .ImageHandling .Read (_gfc );if _cdd !=nil {_ge .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_cdd );
return _cdd ;};return _edgc .SetImage (fieldName ,_ffg ,opt );};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_f []fieldValue };

// FieldValues implements model.FieldValueProvider interface.
func (_ceg *FieldData )FieldValues ()(map[string ]_gc .PdfObject ,error ){_edc :=make (map[string ]_gc .PdfObject );for _ ,_ad :=range _ceg ._f {if len (_ad .Value )> 0{_edc [_ad .Name ]=_gc .MakeString (_ad .Value );};};return _edc ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_fg ,_c :=_e .Open (filePath );if _c !=nil {return nil ,_c ;};defer _fg .Close ();return LoadFromJSON (_fg );};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_ae ,_cea :=_e .Open (filePath );if _cea !=nil {return nil ,_cea ;};defer _ae .Close ();return LoadFromPDF (_ae );};

// JSON returns the field data as a string in JSON format.
func (_be FieldData )JSON ()(string ,error ){_cb ,_fe :=_g .MarshalIndent (_be ._f ,"","\u0020\u0020\u0020\u0020");return string (_cb ),_fe ;};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;ImageValue *_aa .Image `json:"-"`;


// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};