//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_a "encoding/json";_e "github.com/unidoc/unipdf/v3/core";_ee "github.com/unidoc/unipdf/v3/model";_cb "io";_c "os";);

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_fc ,_cc :=_c .Open (filePath );if _cc !=nil {return nil ,_cc ;};defer _fc .Close ();return LoadFromJSON (_fc );};

// FieldValues implements model.FieldValueProvider interface.
func (_agd *FieldData )FieldValues ()(map[string ]_e .PdfObject ,error ){_beac :=make (map[string ]_e .PdfObject );for _ ,_df :=range _agd ._f {if len (_df .Value )> 0{_beac [_df .Name ]=_e .MakeString (_df .Value );};};return _beac ,nil ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_dc ,_gf :=_c .Open (filePath );if _gf !=nil {return nil ,_gf ;};defer _dc .Close ();return LoadFromPDF (_dc );};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_f []fieldValue };

// JSON returns the field data as a string in JSON format.
func (_gee FieldData )JSON ()(string ,error ){_fda ,_beg :=_a .MarshalIndent (_gee ._f ,"","\u0020\u0020\u0020\u0020");return string (_fda ),_beg ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _cb .ReadSeeker )(*FieldData ,error ){_gg ,_ae :=_ee .NewPdfReader (rs );if _ae !=nil {return nil ,_ae ;};if _gg .AcroForm ==nil {return nil ,nil ;};var _fcd []fieldValue ;_fce :=_gg .AcroForm .AllFields ();for _ ,_fg :=range _fce {var _bc []string ;
_cbc :=make (map[string ]struct{});_ge ,_bcc :=_fg .FullName ();if _bcc !=nil {return nil ,_bcc ;};if _be ,_cd :=_fg .V .(*_e .PdfObjectString );_cd {_fcd =append (_fcd ,fieldValue {Name :_ge ,Value :_be .Decoded ()});continue ;};var _fd string ;for _ ,_bec :=range _fg .Annotations {_ca ,_ccb :=_e .GetName (_bec .AS );
if _ccb {_fd =_ca .String ();};_ccc ,_ec :=_e .GetDict (_bec .AP );if !_ec {continue ;};_eed ,_ :=_e .GetDict (_ccc .Get ("\u004e"));for _ ,_eg :=range _eed .Keys (){_db :=_eg .String ();if _ ,_bg :=_cbc [_db ];!_bg {_bc =append (_bc ,_db );_cbc [_db ]=struct{}{};
};};_ag ,_ :=_e .GetDict (_ccc .Get ("\u0044"));for _ ,_ga :=range _ag .Keys (){_ea :=_ga .String ();if _ ,_bea :=_cbc [_ea ];!_bea {_bc =append (_bc ,_ea );_cbc [_ea ]=struct{}{};};};};_af :=fieldValue {Name :_ge ,Value :_fd ,Options :_bc };_fcd =append (_fcd ,_af );
};_bgg :=FieldData {_f :_fcd };return &_bgg ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _cb .Reader )(*FieldData ,error ){var _g FieldData ;_d :=_a .NewDecoder (r ).Decode (&_g ._f );if _d !=nil {return nil ,_d ;};return &_g ,nil ;};