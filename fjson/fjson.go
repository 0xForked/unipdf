//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_d "encoding/json";_b "github.com/unidoc/unipdf/v3/common";_dcb "github.com/unidoc/unipdf/v3/core";_fd "github.com/unidoc/unipdf/v3/model";_e "io";_dc "os";);

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_ffeb *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_ae ,_faf :=_dc .Open (imagePath );if _faf !=nil {return _faf ;};defer _ae .Close ();_aef ,_faf :=_fd .ImageHandling .Read (_ae );if _faf !=nil {_b .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_faf );
return _faf ;};return _ffeb .SetImage (fieldName ,_aef ,opt );};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_c []fieldValue };

// JSON returns the field data as a string in JSON format.
func (_ccf FieldData )JSON ()(string ,error ){_bcg ,_df :=_d .MarshalIndent (_ccf ._c ,"","\u0020\u0020\u0020\u0020");return string (_bcg ),_df ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _e .ReadSeeker )(*FieldData ,error ){_eg ,_g :=_fd .NewPdfReader (rs );if _g !=nil {return nil ,_g ;};if _eg .AcroForm ==nil {return nil ,nil ;};var _aa []fieldValue ;_fdg :=_eg .AcroForm .AllFields ();for _ ,_ce :=range _fdg {var _fbd []string ;
_ge :=make (map[string ]struct{});_ab ,_bf :=_ce .FullName ();if _bf !=nil {return nil ,_bf ;};if _fc ,_abd :=_ce .V .(*_dcb .PdfObjectString );_abd {_aa =append (_aa ,fieldValue {Name :_ab ,Value :_fc .Decoded ()});continue ;};var _dcd string ;for _ ,_bfg :=range _ce .Annotations {_ga ,_fa :=_dcb .GetName (_bfg .AS );
if _fa {_dcd =_ga .String ();};_be ,_cac :=_dcb .GetDict (_bfg .AP );if !_cac {continue ;};_eed ,_ :=_dcb .GetDict (_be .Get ("\u004e"));for _ ,_bc :=range _eed .Keys (){_bg :=_bc .String ();if _ ,_ac :=_ge [_bg ];!_ac {_fbd =append (_fbd ,_bg );_ge [_bg ]=struct{}{};
};};_fdd ,_ :=_dcb .GetDict (_be .Get ("\u0044"));for _ ,_fe :=range _fdd .Keys (){_cc :=_fe .String ();if _ ,_abe :=_ge [_cc ];!_abe {_fbd =append (_fbd ,_cc );_ge [_cc ]=struct{}{};};};};_bbg :=fieldValue {Name :_ab ,Value :_dcd ,Options :_fbd };_aa =append (_aa ,_bbg );
};_aaf :=FieldData {_c :_aa };return &_aaf ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _e .Reader )(*FieldData ,error ){var _ca FieldData ;_fb :=_d .NewDecoder (r ).Decode (&_ca ._c );if _fb !=nil {return nil ,_fb ;};return &_ca ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ee ,_a :=_dc .Open (filePath );if _a !=nil {return nil ,_a ;};defer _ee .Close ();return LoadFromJSON (_ee );};

// SetImage assign model.Image to a specific field identified by fieldName.
func (_ebe *FieldData )SetImage (fieldName string ,img *_fd .Image ,opt []string )error {_ag :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_ebe ._c =append (_ebe ._c ,_ag );return nil ;};type fieldValue struct{Name string `json:"name"`;
Value string `json:"value"`;ImageValue *_fd .Image `json:"-"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_faa ,_ced :=_dc .Open (filePath );if _ced !=nil {return nil ,_ced ;};defer _faa .Close ();return LoadFromPDF (_faa );};

// FieldValues implements model.FieldValueProvider interface.
func (_af *FieldData )FieldValues ()(map[string ]_dcb .PdfObject ,error ){_ba :=make (map[string ]_dcb .PdfObject );for _ ,_ff :=range _af ._c {if len (_ff .Value )> 0{_ba [_ff .Name ]=_dcb .MakeString (_ff .Value );};};return _ba ,nil ;};

// FieldImageValues implements model.FieldImageProvider interface.
func (_da *FieldData )FieldImageValues ()(map[string ]*_fd .Image ,error ){_cd :=make (map[string ]*_fd .Image );for _ ,_cdb :=range _da ._c {if _cdb .ImageValue !=nil {_cd [_cdb .Name ]=_cdb .ImageValue ;};};return _cd ,nil ;};